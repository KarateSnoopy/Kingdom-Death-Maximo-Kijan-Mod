--------------------------------------------------------------------------------
--                           TABLE OF CONTENTS                                --
--                   Scripts created by Maximo and Kijan                      --
--------------------------------------------------------------------------------


-- Buttons ---------------------------------------------------------------------


-- Depart ----------------------------------------------------------------------
	-- function departClick(nemesis)
	-- function calculate_departing_bonuses()
	-- function departCoroutine
	-- function departSurv
	-- function checkStinkyGear
	-- function checkOtherGear


-- Return ----------------------------------------------------------------------
	-- function returnClick
	-- function returnCoroutine
	-- function returnSurv
	-- function spawnEndeavor
	-- function spawnTinkerEndeavor


-- Start Monster Setup ---------------------------------------------------------
	-- function view_Quarry
	-- function close_Quarry
	-- function view_Nemesis
	-- function close_Nemesis


-- Buttons (Monster Setups) ----------------------------------------------------
	-- function createButton_openMenu
	-- function createQuarryButtons
	-- function createNemesisButtons
	-- function createButtons_Levels
	-- function setup_Legendaries


-- Set Quarries ----------------------------------------------------------------
-- Set Nemesis -----------------------------------------------------------------
-- Set Legendaries -------------------------------------------------------------


-- Setup Levels ----------------------------------------------------------------
	-- function setup_level1
	-- function setup_level2
	-- function setup_level3
	-- function setup_level4


-- Get Showdown Bag / Monster Story --------------------------------------------
	-- function get_bag_Showdown
	-- function load_showdown_story_set_board_state


-- Setup Terrain Decks ---------------------------------------------------------
	-- function clone_deal_terrainDeck
	-- function deal_cardsTerrain


-- Setup Hunt Decks ------------------------------------------------------------
	-- function clone_deal_huntDecks
	-- function deal_cardsHunt


-- Utility Functions -----------------------------------------------------------
	-- function updateDisplay
	-- function resetTemps
	-- function plus
	-- function minus
	-- function changeAllSurvivors
	-- function changeSurvivors
	-- function changeMonster
	-- function wait
	-- function raise_hunt_figurine_after_load
	-- function dud


-- End Hunt --------------------------------------------------------------------

#include shared/util

-- Tables and Variables --------------------------------------------------------
btn_removal = {}
hunt_Phase = false

-- END TABLE OF CONTENTS -------------------------------------------------------

--Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
function onSave()
	local data_to_save = {}
	data_to_save.saved_counts = {}
	for i, v in pairs(buttons.counts) do
		data_to_save.saved_counts[tostring(i)] = v or 0
	end
	saved_data = JSON.encode(data_to_save)

	--Uncomment this line to reset the save data
	-- saved_data = ''
	return saved_data
end

--loads buttons and gets saved data
function onload(saved_data)
	bag_quarry_showdowns = getObjectFromGUID('f18343')
	bag_nemesis_showdowns = getObjectFromGUID('3cb738')

	-- Available Monster Display
	bag_Quarry = getObjectFromGUID('6e836f')
	bag_Nemesis = getObjectFromGUID('e59309')

	-- Hunt Phase Setup Bag
	bag_Hunt = getObjectFromGUID('3bc832')

	-- For Setting Monster Stats
	monsterBoard = getObjectFromGUID(Global.getTable("boards").boardMonster.guid)

	-- Token used to get Rotation for ifHunt
	huntLoaded = getObjectFromGUID('50ec55')

	gameBox = getObjectFromGUID(Global.getTable('bags').gameBox.guid)

	-- Zones
	zoneInjuryBoard = getObjectFromGUID(Global.getTable('zones').zoneInjuryBoard.guid)
	zoneShowdown = getObjectFromGUID(Global.getTable('zonesDestruct').zoneShowdown.guid)

	if huntLoaded.getRotation().z < 65 then
		createButton_endHunt()
	end

	original_rot = {['x'] = 0, ['y'] = 180, ['z'] = 0}
	initButtonsTable()
	objs = {}
	initCustomButtons()

	--categorize buttons
	for i, v in pairs(buttons) do
		buttons.counts[tostring(i)] = 0
		if tostring(i) ~= 'index' and tostring(i) ~= 'counts' and tostring(i) ~= 'params' and tostring(i) ~= 'targetFunc' then
			self.setVar(tostring(i) .. 'PlusOne', function () plus(tostring(i), 1) end)
			self.setVar(tostring(i) .. 'MinusOne', function () minus(tostring(i), 1) end)
			self.setVar(tostring(i) .. 'ResetTemps', function () resetTemps(tostring(i)) end)
			self.setVar(tostring(i) .. 'depart', function () departClick(false) end)
			self.setVar(tostring(i) .. 'departN', function () departClick(true) end)
		end
	end
	generateButtonParameters()

	--loads saved data if exists
	if saved_data ~= '' then
		local loaded_data = JSON.decode(saved_data)
		buttons.counts = loaded_data.saved_counts
		for i, v in pairs(buttons) do
			if tostring(i) ~= 'index' and tostring(i) ~= 'counts' and tostring(i) ~= 'params' and tostring(i) ~= 'targetFunc' and tostring(i) ~= 'reset' and tostring(i) ~= 'depart' then
				if buttons.counts[tostring(i)] == nil then
					buttons.counts[tostring(i)] = 0
				end
			end
		end
	else
		for i, v in pairs(buttons) do
			if tostring(i) ~= 'index' and tostring(i) ~= 'counts' and tostring(i) ~= 'params' and tostring(i) ~= 'targetFunc' and tostring(i) ~= 'reset' and tostring(i) ~= 'depart' then
				buttons.counts[tostring(i)] = 0
			end
		end
	end

	--update display
	updateDisplay(true)
	create_other_Buttons()
end




-- Buttons ---------------------------------------------------------------------
function initCustomButtons()
	thick = 0.14

	dx = -7; dy = -2.7; px = 0.8
	createCounter('survival_perm', 'count', dx, dy); dx = dx + px;
	dx = -5; dy = -2.7; px = 0.8
	createCounter('survivalN_perm', 'count', dx, dy); dx = dx + px;
	dx = -3; dy = -2.7; px = 0.8
	createCounter('insanity_perm', 'count', dx, dy); dx = dx + px;

	dx = 3; dy = -2.7; px = 0.8
	createCounter('survival_temp', 'count', dx, dy); dx = dx + px;
	dx = 5; dy = -2.7; px = 0.8
	createCounter('survivalN_temp', 'count', dx, dy); dx = dx + px;
	dx = 7; dy = -2.7; px = 0.8
	createCounter('insanity_temp', 'count', dx, dy); dx = dx + px;

	dx = 0; dy = 1.2
	createDepart('depart', dx - 5, dy)
	createDepart('departN', dx + 5, dy)
	createResetTemps('reset', dx, dy + 0.8)

end

function initButtonsTable()

	buttons = {}
	buttons.index = 0
	buttons.counts = {}
	buttons.params = {}
	buttons.params.positions = {}
	buttons.params.scales = {}
	buttons.params.rotations = {}
	buttons.params.positions.offsets = {}
	buttons.params.sizes = {}
	buttons.targetFunc = {}

	--make a style of button by adding a new size
	buttons.params.sizes.count = {
		display = {width = 0, height = 0, font = 300},
		button = {width = 150, height = 150, font = 200},
		offsets = { bottomButtons = {x = 0.3, y = 0, z = -0.4}, topButtons = {x = 0.1, y = 0, z = -0.17} }
	}
	buttons.params.sizes.std = {
		display = {width = 1500, height = 250, font = 250},
		button = {width = 0, height = 0, font = 200},
		offsets = { bottomButtons = {x = 0, y = 0, z = 0}, topButtons = {x = 0, y = 0, z = 0} }
	}
end

function createCounter(name, btype, px, py)
	buttons[name] = {type = btype}
	buttons.params.positions[name] = {x = px, y = 1.2, z = py}
end

function createResetTemps(name, px, py)
	name = "r_" .. name
	buttons[name] = { type = 'std'}
	buttons.params.positions[name] = {x = px, y = 1.2, z = py}
end

function createDepart(name, px, py)
	name = "d_" .. name
	buttons[name] = { type = 'std'}
	buttons.params.positions[name] = {x = px, y = 1.2, z = py}
	buttons.params.scales[name] = {x = 1, y = 1, z = 3.5}
end

--gets buttons params
function generateButtonParameters()
	for i, v in pairs(buttons) do
		if tostring(i) ~= 'index' and tostring(i) ~= 'counts' and tostring(i) ~= 'params' and tostring(i) ~= 'targetFunc' then
			btn = tostring(i)
			prefix = string.sub(btn, 1, 2)
			if (prefix == "r_") then
				buttons[tostring(i)].display = setupButton(tostring(i) .. 'ResetTemps', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, 'Reset', nil, false)
				buttons[tostring(i)].isReset = true
			elseif (prefix == "d_") then
				temp = string.sub(btn, 3)
				buttons[tostring(i)].display = setupButton(tostring(i) .. temp, buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, 'Reset', nil, false)
				if temp == "depart" then
					buttons[tostring(i)].isDepart = true
				else
					buttons[tostring(i)].isNemesis = true
				end
			else
				buttons[tostring(i)].display = setupButton(tostring(i) .. 'dud', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].display, '', nil, false)
				buttons[tostring(i)].plusOne = setupButton(tostring(i) .. 'PlusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '+', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, false)
				buttons[tostring(i)].minusOne = setupButton(tostring(i) .. 'MinusOne', buttons.params.positions[tostring(i)], buttons.params.sizes[buttons[tostring(i)].type].button, '-', buttons.params.sizes[buttons[tostring(i)].type].offsets.bottomButtons, true)
			end
		end
	end
end

--creates buttons
function setupButton(targetFunc, positions, sizes, label, offsets, isLeft)
	local buttonInfo = {}
	buttonInfo.function_owner = self
	buttonInfo.index = buttons.index
	buttonInfo.click_function = targetFunc
	--reverse things for backside
	if string.sub(targetFunc, 3, 4) == 'b_' or string.sub(targetFunc, 1, 2) == 'b_' then
		buttonInfo.rotation = {0, 0, 180}
		if offsets ~= nil then
			reverse_x = -offsets.x
		end
	elseif offsets ~= nil then
		reverse_x = offsets.x
	end
	--reversed
	if isLeft then
		orientationModifier = -1
	else
		orientationModifier = 1
	end
	if offsets == nil then
		buttonInfo.position = {positions.x, positions.y, positions.z}
	else
		buttonInfo.position = {positions.x + (reverse_x) * orientationModifier, positions.y + offsets.y, positions.z + offsets.z}
	end
	buttonInfo.width = sizes.width
	buttonInfo.height = sizes.height
	buttonInfo.font_size = sizes.font
	buttonInfo.label = label

	buttonInfo.color = {0, 0, 0, 0}
	buttonInfo.font_color = {1, 1, 1, 255}
	buttonInfo.scale = {1,1,3}

	buttons.index = buttons.index + 1
	return buttonInfo
end

function create_other_Buttons()

	self.createButton{index = 29, click_function = "dud", function_owner = self, label = "Survival", position = {-7, 1.1, -3.8}, scale = {1, 1, 3},
	width = 0, height = 0, color = {0, 0, 0, 1}, font_color = {1, 1, 1, 1}}

	self.createButton{index = 30, click_function = "dud", function_owner = self, label = "Survival", position = {3, 1.1, -3.8}, scale = {1, 1, 3},
	width = 0, height = 0, color = {0, 0, 0, 1}, font_color = {1, 1, 1, 1}}

	self.createButton{index = 31, click_function = "dud", function_owner = self, label = "vs Nemesis", position = {-5, 1.1, -3.8}, scale = {1, 1, 3},
	width = 0, height = 0, color = {0, 0, 0, 1}, font_color = {1, 1, 1, 1}}

	self.createButton{index = 32, click_function = "dud", function_owner = self, label = "vs Nemesis", position = {5, 1.1, -3.8}, scale = {1, 1, 3},
	width = 0, height = 0, color = {0, 0, 0, 1}, font_color = {1, 1, 1, 1}}

	self.createButton{index = 33, click_function = "dud", function_owner = self, label = "Insanity", position = {-3, 1.1, -3.8}, scale = {1, 1, 3},
	width = 0, height = 0, color = {0, 0, 0, 1}, font_color = {1, 1, 1, 1}}

	self.createButton{index = 34, click_function = "dud", function_owner = self, label = "Insanity", position = {7, 1.1, -3.8}, scale = {1, 1, 3},
	width = 0, height = 0, color = {0, 0, 0, 1}, font_color = {1, 1, 1, 1}}

	self.createButton{index = 36, click_function = "dud", function_owner = self, label = "All Departures", position = {-5, 1.1, -5}, scale = {1, 1, 3.5},
	width = 0, height = 0, font_size = 150, color = {0, 0, 0, 1}, font_color = {1, 1, 1, 1}}

	self.createButton{index = 37, click_function = "dud", function_owner = self, label = "This Departure", position = {5, 1.1, -5}, scale = {1, 1, 3.5},
	width = 0, height = 0, font_size = 150, color = {0, 0, 0, 1}, font_color = {1, 1, 1, 1}}

	self.createButton{click_function = "view_Quarry", function_owner = self, label = "View", position = {-5, 1.2, 3}, scale = {1, 1, 3}, width = 1500, height = 250, font_size = 150, color = {0, 0, 0, 1}, font_color = {1, 1, 1, 1}}

	self.createButton{click_function = "close_Quarry", function_owner = self, label = "Close", position = {-5, 1.2, 4.4}, scale = {1, 1, 3}, width = 1500, height = 250, font_size = 150, color = {0, 0, 0, 1}, font_color = {1, 1, 1, 1}}

	self.createButton{click_function = "view_Nemesis", function_owner = self, label = "View", position = {5, 1.2, 3}, scale = {1, 1, 3}, width = 1500, height = 250, font_size = 150, color = {0, 0, 0, 1}, font_color = {1, 1, 1, 1}}

	self.createButton{click_function = "close_Nemesis", function_owner = self, label = "Close", position = {5, 1.2, 4.4}, scale = {1, 1, 3}, width = 1500, height = 250, font_size = 150, color = {0, 0, 0, 1}, font_color = {1, 1, 1, 1}}
end

function createButton_endHunt()
	self.createButton({click_function = "endHunt", function_owner = self, label = "End Hunt", position = {0, 1.2, 10.7}, rotation = {-20, 0, 0}, scale = {1, 1, 2.5}, width = 2000, height = 250, font_size = 350, color = {0, 0, 0, 0}, font_color = {1, 1, 1, 100}})
end

function removeButtons_All()
	local btns = self.getButtons()
	for i, v in pairs(btns) do
		self.removeButton(v.index)
	end
end

function removeButtons_monsterSetup()
	local btns = self.getButtons()
	for i, v in pairs(btns) do
		if string.find(v.click_function, "setup_") then
			self.removeButton(v.index)
		end
	end
end











-- Depart ----------------------------------------------------------------------
function departClick(nemesis)
	if isCampaignLoaded() == false then
		goToCampaignStartButton()
		return
	end

	-- Reset Game State for Start of Showdown without triggering monster AI cards in Injury Board Zone
	local next_round_tool = getObjectFromGUID('b94669')
	next_round_tool.call("nextRound")

	local zone = getObjectFromGUID(Global.getTable('zones').zoneInjuryBoard.guid)
	for _, obj in ipairs(zone.getObjects()) do
		if string.find(obj.getDescription(), "board") then
			board = obj
			break
		end
	end
	local btns = board.getButtons()
	if btns ~= nil then
		for i, v in pairs(btns) do
			if v.label == "Main Menu" then
				board.call("main_menu")
			end
		end
	end

	if nemesis then
		removeButtons_monsterSetup()
		createNemesisButtons()
		--local showdownTool = getObjectFromGUID('c3451a')
		--showdownTool.call("createNemesisButtons")
		nemesis_perm = tonumber(buttons.counts["survivalN_perm"])
		nemesis_temp = tonumber(buttons.counts["survivalN_temp"])
	else
		removeButtons_monsterSetup()
		createQuarryButtons()
		bag_Hunt.call('buttonClick_place')
		huntLoaded.setRotation({0,180,0})
		nemesis_perm = 0
		nemesis_temp = 0
	end
	--[[
	changeAllSurvivors("survival", tonumber(buttons.counts["survival_perm"]) + nemesis_perm + tonumber(buttons.counts["survival_temp"]) + nemesis_temp)
	changeAllSurvivors("insanity", tonumber(buttons.counts["insanity_perm"]) + tonumber(buttons.counts["insanity_temp"]))
	broadcastToAll("_____________ Departing Bonuses Gained _____________", {1, 1, 1})
	startLuaCoroutine(self, "departCoroutine") --]]
end

function calculate_departing_bonuses()
	changeAllSurvivors("survival", tonumber(buttons.counts["survival_perm"]) + nemesis_perm + tonumber(buttons.counts["survival_temp"]) + nemesis_temp)
	changeAllSurvivors("insanity", tonumber(buttons.counts["insanity_perm"]) + tonumber(buttons.counts["insanity_temp"]))
	broadcastToAll("_____________ Departing Bonuses Gained _____________", {1, 1, 1})
	startLuaCoroutine(self, "departCoroutine")
end

function departCoroutine()
	local gridTable = Global.getTable('grids')
	local zonesTable = Global.getTable('zones')
	local players = {player1 = {getObjectFromGUID(gridTable.red.guid), getObjectFromGUID(zonesTable.zoneP1.guid), "Player 1"},
						player2 = {getObjectFromGUID(gridTable.yellow.guid), getObjectFromGUID(zonesTable.zoneP2.guid), "Player 2"},
						player3 = {getObjectFromGUID(gridTable.green.guid), getObjectFromGUID(zonesTable.zoneP3.guid), "Player 3"},
						player4 = {getObjectFromGUID(gridTable.blue.guid), getObjectFromGUID(zonesTable.zoneP4.guid), "Player 4"}
						}
	wait(1)
	for _, player in pairs(players) do
		departSurv(player[1], player[2], player[3])
	end
	return 1
end

function departSurv(grid, zone, name)
	hasArmor = false
	isInsane = false

	local broadcastTable = {}
	for _, object in ipairs(zone.getObjects()) do
		local desc = object.getDescription()
		local rotZ = object.getRotation().z

		-- True / False Settings
		if string.find(desc, 'armor') then
			hasArmor = true
		end

		if object.getName() == "isInsane" and (rotZ > 165 and rotZ < 195) then
			isInsane = true
		end

		if string.find(desc, "green_affinities") then
			affinity_green = object
		elseif string.find(desc, "blue_affinities") then
			affinity_blue = object
		elseif string.find(desc, "red_affinities") then
			affinity_red = object
		end

			-- Crystal Skin
		if object.getName() == "Crystal Skin" then
			if hasArmor then
				table.insert(broadcastTable, "[b]Crystal Skin[/b]: You have Armor ~ No Bonus")
			end
			if not hasArmor then
				if object.getName() == "Crystal Skin" then
					object.translate({0,6,0})
					wait(1)
					local desc = object.getDescription()
					local new_desc = (object.getDescription() .. ", armor, 3head, 3body, 3waist, 3legs, 3arms")
					object.setDescription(new_desc)
					table.insert(broadcastTable, "[b]Crystal Skin[/b]: You gained 3 to all Hit Locations")
				end
			end
		end

			-- Binge Eating Disorder
		if object.getName() == "Binge Eating Disorder" then
			table.insert(broadcastTable, "[b]Binge Eating Disorder[/b]: You cannot depart unless you have 'consumable' gear.")

			-- Quixotic
		elseif object.getName() == "Quixotic" then
			local insanity = tonumber(getObjectFromGUID(grid.getVar("FullCharSheetGUID")).getTable("buttons").insanity.label)
			if isInsane or insanity >= 3 then
				table.insert(broadcastTable, "[b]Quixotic[/b]: You are insane ~ You gained +1 Survival and +1 Strength Token")
				changeSurvivors("survival", 1, grid)
				local strTokenBag = getObjectFromGUID('0bf641')
				local pos = grid.getPosition()
				local quixoticToken = strTokenBag.takeObject({position = {-21.90, 4.12, -26.91}, rotation = {0,180,0}})
				quixoticToken.setPosition({pos.x + 3.07, pos.y+2, pos.z + 3.39})
				quixoticToken.setName("Quixotic")
			end

			-- Squeamish
		elseif object.getName() == "Squeamish" then
			table.insert(broadcastTable, "[b]Squeamish[/b]: You cannot depart with 'stinky' gear.")
			stinky = checkStinkyGear(zone)
			if stinky ~= "" then
				table.insert(stinky)
			end

			-- Superstitous
		elseif object.getName() == "Superstitous" then
			table.insert(broadcastTable, "[b]Superstitious[/b]: You cannot depart with 'other' gear.")
			other = checkOtherGear(zone)
			if other ~= "" then
				table.insert(other)
			end

			-- Flower Addiction
		elseif object.getName() == "Flower Addiction" then
			table.insert(broadcastTable, "[b]Flower Addiction[/b]: You may only depart to hunt the Flower Knight.")

			-- Megalophobia
		elseif object.getName() == "Megalophobia" then
			table.insert(broadcastTable, "[b]Megalophobia[/b]: You cannot depart to hunt a monster that occupies more than 4 spaces.")

			-- Necromancer
		elseif object.getName() == "Necromancer" then
			table.insert(broadcastTable, "[b]Necromancer[/b]: Gain +1 to All hit locations for each gear card in your grid with the symbol keyword.")

			-- Ageless Apprentice
		elseif object.getName() == "Ageless Apprentice" then
			table.insert(broadcastTable, "[b]Ageless Apprenctice[/b]: You may rotate up to 3 gear cards in your gear grid; changing the affinity locations.")

			-- Seasoned Monster Meat
		elseif object.getName() == "Seasoned Monster Meat" then
			table.insert(broadcastTable, "[b]Seasoned Monster Meat[/b]: You gained (+3) Survival.")
			changeSurvivors("survival", 3, grid)

			-- Gloom Bracelets
		elseif object.getName() == "Gloom Bracelets" then
			table.insert(broadcastTable, "[b]Gloom Bracelets[/b]: You gained (+2) Insanity.")
			changeSurvivors("insanity", 2, grid)

			-- Slender Ovule
		elseif object.getName() == "Slender Ovule" then
			table.insert(broadcastTable, "[b]Slender Ovule[/b]: You gained (+3) Insanity.")
			changeSurvivors("insanity", 3, grid)

			-- Silk Robes
		elseif object.getName() == "Silk Robes" then
			table.insert(broadcastTable, "[b]Silk Robes[/b]: You gained (+1) Survival.")
			changeSurvivors("survival", 1, grid)

			-- Silk Sash
		elseif object.getName() == "Silk Sash" then
			table.insert(broadcastTable, "[b]Silk Sash[/b]: You gained (+1) Survival.")
			changeSurvivors("survival", 1, grid)

			-- Almanac
		elseif object.getName() == "Almanac" then
			table.insert(broadcastTable, "[b]Almanac[/b]: You gained (+2) Insanity.")
			changeSurvivors("insanity", 2, grid)

			-- Lantern Cuirass
		elseif object.getName() == "Lantern Cuirass" and (rotZ > 165 and rotZ < 195) then
			table.insert(broadcastTable, "[b]Lantern Cuirass[/b]: Add 3 to all hit locations.")

			-- Leather Bracers
		elseif object.getName() == "Leather Bracers" then
			table.insert(broadcastTable, "[b]Leather Bracers[/b]: You gained (+2) Survival.")
			changeSurvivors("survival", 2, grid)

			-- Leather Mask
		elseif object.getName() == "Leather Mask" then
			table.insert(broadcastTable, "[b]Leather Mask[/b]: You gained (+2) Insanity.")
			changeSurvivors("insanity", 2, grid)

			-- Dried Acanthus
		elseif object.getName() == "Dried Acanthus" then
			table.insert(broadcastTable, "[b]Dried Acanthus[/b]: You gained (+2) Survival.")
			changeSurvivors("survival", 2, grid)

			-- Fecal Salve
		elseif object.getName() == "Fecal Salve" then
			table.insert(broadcastTable, "[b]Fecal Salve[/b]: You gained (+1) Survival.")
			changeSurvivors("survival", 1, grid)

			-- Crest Crown
		elseif object.getName() == "Crest Crown" and (rotZ > 165 and rotZ < 195) then
			local numBlueAffinity = tonumber(affinity_blue.call("getCount"))
			for i=1, numBlueAffinity do
				changeSurvivors("survival", 1, grid)
				changeSurvivors("insanity", 1, grid)
			end
			if numBlueAffinity >= 1 then
				table.insert(broadcastTable, "[b]Crest Crown[/b]: You gained (+" .. numBlueAffinity .. ") Survival and (+" .. numBlueAffinity .. ") Insanity")
			end

			-- Phoenix Faulds
		elseif object.getName() == "Phoenix Faulds" then
			table.insert(broadcastTable, "[b]Phoenix Faulds[/b]: You gained (+1) Insanity.")
			changeSurvivors("insanity", 1, grid)

			-- Phoenix Gauntlet
		elseif object.getName() == "Phoenix Gauntlet" then
			table.insert(broadcastTable, "[b]Phoenix Gauntlet[/b]: You gained (+1) Insanity.")
			changeSurvivors("insanity", 1, grid)

			-- Rawhide Boots
		elseif object.getName() == "Rawhide Boots" then
			table.insert(broadcastTable, "[b]Rawhide Boots[/b]: You gained (+1) Survival.")
			changeSurvivors("survival", 1, grid)

			-- Rawhide Gloves
		elseif object.getName() == "Rawhide Gloves" then
			table.insert(broadcastTable, "[b]Rawhide Gloves[/b]: You gained (+1) Survival.")
			changeSurvivors("survival", 1, grid)

			-- Rawhide Drum
		elseif object.getName() == "Rawhide Drum" then
			table.insert(broadcastTable, "[b]Rawhide Drums[/b]: You gained (+1) Insanity.")
			changeSurvivors("insanity", 1, grid)

			-- Partner
		elseif object.getName() == "Partner" then
			table.insert(broadcastTable, "[b]Partner[/b]: If your Partner also departed, (+2) Survival.")

			-- Endless Babble
		elseif object.getName() == "Endless Babble" then
			table.insert(broadcastTable, "[b]Endless Babble[/b]: Departing Survivors gained (+1) Insanity.")
			changeAllSurvivors("insanity", 1)

			-- Gloom Mehndi
		elseif object.getName() == "Gloom Mehndi" then
			object.setDescription(desc .. ", once per showdown used, set, 1head, 1body, 1waist, 1arms, 1legs")
			object.translate({0,6,0})
			table.insert(broadcastTable, "[b]Gloom Mehndi[/b]: You gained 1 Armor to all Hit Locations.")

			-- Cycloid Scale Skirt
		elseif object.getName() == "Cycloid Scale Skirt" and (rotZ > 165 and rotZ < 195) then
			local numBlueAffinity = tonumber(affinity_blue.call("getCount"))
			for i=1, numBlueAffinity do
				changeSurvivors("survival", 1, grid)
			end
			if numBlueAffinity >= 1 then
				table.insert(broadcastTable, "[b]Cycloid Scale Skirt[/b]: You gained (+" .. numBlueAffinity .. ") Survival" )
			end

			-- Gloom Cream
		elseif object.getName() == "Gloom Cream" and (rotZ > 165 and rotZ < 195) then
			table.insert(broadcastTable, "[b]Gloom Cream[/b]: Gain (-3) Hunt XP and (-1) Understanding. If you have no Understanding, die immediately")

		-- Acanthus Doctor
		elseif object.getName() == "Acanthus Doctor" and (rotZ < 165 or rotZ > 345) then
			if hasArmor then
				table.insert(broadcastTable, "[b]Acanthus Doctor[/b]: You are wearing Armor ~ You do not gain any Strength Tokens")
			end
			if not hasArmor then
				local pos = object.getPosition()
				local numGreenAffinity = tonumber(affinity_green.call("getCount"))
				for i=1, numGreenAffinity do
					local strToken = getObjectFromGUID('4c2300')
					local strToken_temp = strToken.takeObject({position = {pos.x, pos.y + i * 0.5, pos.z}, rotation = {0, 180, 0}})
					strToken_temp.setScale({0.46, 1.00, 0.46})
				end
				table.insert(broadcastTable, "[b]Acanthus Doctor[/b]: You gained (+" .. numGreenAffinity .. ") Strength Tokens")
			end -- End Acanthus Doctor

		-- Sun Lure and Hook
		elseif object.getName() == "Sun Lure and Hook" then
			changeSurvivors("survival", 1, grid)
			table.insert(broadcastTable, "[b]Sun Lure and Hook[/b]: You gained (+1) Survival.")

		end
	end
	if #broadcastTable > 0 then
		broadcastToAll("~~~~~~~[b]" .. name .. "[/b]~~~~~~~", {1,1,1})
		for _, b in pairs(broadcastTable) do
			broadcastToAll(b, {1,1,1})
			wait(1.5)
		end
		wait(0.50) -- wait between each players itemcheck
	end
end

function checkStinkyGear(zone)
	wait(2)
	local objectsInZone = zone.getObjects()
	for _, object in ipairs(objectsInZone) do
		local desc = object.getDescription()
		if string.find(desc, 'stinky') then
			return "You have 'stinky' gear in your gear grid."
		end
	end
	return ""
end

function checkOtherGear(zone)
	wait(2)
	local objectsInZone = zone.getObjects()
	for _, object in ipairs(objectsInZone) do
		local desc = object.getDescription()
		if string.find(desc, 'other') then
			return "You have 'other' gear in your gear grid."
		end
	end
	return ""
end





-- Return ----------------------------------------------------------------------
function returnClick()
	startLuaCoroutine(self, "returnCoroutine")
end

function returnCoroutine()
	local gridTable = Global.getTable('grids')
	local zonesTable = Global.getTable('zones')
	local players = {player1 = {getObjectFromGUID(gridTable.red.guid), getObjectFromGUID(zonesTable.zoneP1.guid), "Player 1"},
	player2 = {getObjectFromGUID(gridTable.yellow.guid), getObjectFromGUID(zonesTable.zoneP2.guid), "Player 2"},
	player3 = {getObjectFromGUID(gridTable.green.guid), getObjectFromGUID(zonesTable.zoneP3.guid), "Player 3"},
	player4 = {getObjectFromGUID(gridTable.blue.guid), getObjectFromGUID(zonesTable.zoneP4.guid), "Player 4"}
	}
	wait(0.1)
	for _, player in pairs(players) do
		returnSurv(player[1], player[2], player[3])
	end
	return 1
end

function returnSurv(grid, zone, name)
	local broadcastTable = {}
	local bag = ""
	local tempBag = ""
	if grid.getVar("FullCharSheetGUID") == '' or grid.getVar("FullCharSheetGUID") == nil then
		table.insert(broadcastTable, "__________" .. name .. " Died __________")
	else
		table.insert(broadcastTable, "__________" .. name .. " Returned __________")
		if name == "Player 1" then
			bag = getObjectFromGUID('d202ed')
		elseif name == "Player 2" then
			bag = getObjectFromGUID('6b02af')
		elseif name == "Player 3" then
			bag = getObjectFromGUID('98eafe')
		elseif name == "Player 4" then
			bag = getObjectFromGUID('38ac5c')
		end
		local objectsInZone = zone.getObjects()
		for _, object in ipairs(objectsInZone) do
			if object.getName() == "Hoarder" then
				table.insert(broadcastTable, "[b]Hoarder[/b]: Archive 1 resource gained from this showdown and gain (+1) Courage")

			elseif object.getName() == "Matchmaker" then
				table.insert(broadcastTable, "[b]Matchmaker[/b]: You may spend an Endeavor for Intimacy")
				bag = getObjectFromGUID('5dffd3')

			elseif object.getName() == "Secretive" then
				table.insert(broadcastTable, "[b]Secretive[/b]: You must skip the next hunt")

			elseif object.getName() == "Post Traumatic Stress" then
				table.insert(broadcastTable, "[b]Post Traumatic Stress[/b]: You must skip the next hunt and cannot contribute to any endeavors")

			elseif object.getName() == "Fear of the Dark" then
				table.insert(broadcastTable, "[b]Fear of the Dark[/b]: You Retire")

			elseif object.getName() == "Tinker" then
				spawnTinkerEndeavor(name)

			elseif object.getName() == "Heart of the Storm" then
				table.insert(broadcastTable, "[b]Heart of the Storm[/b]: If you gain Weapon XP, gain (+3) Weapon XP and 1 Iron Strange Resource")

			elseif object.getName() == "Elder Earrings" then
				table.insert(broadcastTable, "[b]Elder Earrings[/b]: Gain (+1) Hunt XP")

			elseif object.getName() == "Scavenger Kit" then
				table.insert(broadcastTable, "[b]Scavenger Kit[/b]: Gain either +1 Random Basic or +1 Random Monster resource from this monster.")

			elseif object.getName() == "Healing Potion" then
				table.insert(broadcastTable, "[b]Healing Potion[/b]: If you suffered any Severe Injuries ~ You may archive Healing Potion to remove it")

			elseif object.getName() == "Torn Achilles Tendon" then
				table.insert(broadcastTable, "Torn Achilles ~ Skip the Next Hunt")
				object.destroy()

			elseif object.getName() == "Dislocated Shoulder" then
				object.destroy()

			elseif object.getName() == "Ruptured Spleen" then
				table.insert(broadcastTable, "Ruptured Spleen ~ Skip the Next Hunt")
				object.destroy()

			elseif object.getName() == "Torn Muscle" then
				table.insert(broadcastTable, "Torn Muscle ~ Skip the Next Hunt")
				object.destroy()

			elseif object.getName() == "Bruised Tailbone" then
				object.destroy()

			elseif object.getName() == "Spiral Fracture" then
				table.insert(broadcastTable, "Spiral Fracture ~ Skip the Next Hunt")
				object.destroy()

			elseif object.getName() == "Slashed Back" then
				object.destroy()

			end
		end
		spawnEndeavor(bag)
	end
	if #broadcastTable > 0 then
		for _, b in pairs(broadcastTable) do
			broadcastToAll(b, {1,1,1})
			wait(1)
		end
		wait(0.4)
	end
	return 1
end

function spawnEndeavor(bag)
	local pos = bag.getPosition()
	pos.y = pos.y + 2
	pos.x = pos.x - 2
	bag.takeObject({position = pos})
end

function spawnTinkerEndeavor(name)
	local bag = ""
	if name == "Player 1" then
		bag = getObjectFromGUID('d202ed')
	elseif name == "Player 2" then
		bag = getObjectFromGUID('6b02af')
	elseif name == "Player 3" then
		bag = getObjectFromGUID('98eafe')
	elseif name == "Player 4" then
		bag = getObjectFromGUID('38ac5c')
	end
	local pos = bag.getPosition()
	pos.y = pos.y + 2
	pos.x = pos.x - 3
	bag.takeObject({position = pos})
end





-- Start Monster Setup ---------------------------------------------------------
name = ""
pos = {24.96, 4.01, 1.79}

pos_deckBasic = {-21.61, 4.31, 25.29}
pos_deckMonst = {-19.12, 4.30, 25.31}
huntPos1 = {-12.97, 4.40, 31.63}
huntPos2 = {-10.33, 4.40, 31.65}
huntPos3 = {-7.69, 4.40, 31.63}
huntPos4 = {-5.12, 4.40, 31.64}
huntPos5 = {-2.61, 4.40, 31.60}
huntPos6 = {2.71, 4.40, 31.54}
huntPos7 = {5.24, 4.40, 31.53}
huntPos8 = {7.81, 4.40, 31.52}
huntPos9 = {10.36, 4.40, 31.53}
huntPos10 = {12.98, 4.40, 31.49}

terrainPos1 = {-19.12, 4.28, 7.45}
terrainPos2 = {-19.17, 4.29, 11.01}
terrainPos3 = {-19.13, 4.29, 14.61}
terrainPos4 = {-19.15, 4.29, 18.17}
terrainPos5 = {-21.66, 4.29, 21.65}
terrainPos6 = {-21.65, 4.29, 10.98}
terrainPos7 = {-21.64, 4.29, 14.59}
terrainPos8 = {-21.65, 4.29, 18.21}

function view_Quarry()
	bag_Quarry.call("buttonClick_place")
end

function close_Quarry()
	bag_Quarry.call("buttonClick_recall")
end

function view_Nemesis()
	bag_Nemesis.call("buttonClick_place")
end

function close_Nemesis()
	bag_Nemesis.call("buttonClick_recall")
end





-- Buttons (Monster Setups) ----------------------------------------------------
function createButton_openMenu()
	btn_params = {
		click_function = "",
		function_owner = self,
		label          = "",
		position       = {},
		rotation       = {-5,0,0},
		width          = 5000,
		height         = 800,
		font_size      = 600,
		color          = {0,0,0},
		font_color     = {1,1,1},
	}

	btn_params.click_function = "createQuarryButtons"
	btn_params.label = "Open Menu"
	btn_params.position = {0, 0.2, -3}
	self.createButton(btn_params)
end

function createQuarryButtons()
	hunt_Phase = true
	btn_params = {
		click_function = "",
		function_owner = self,
		label          = "",
		position       = {},
		rotation       = {-15,0,0},
		width          = 3500,
		height         = 400,
		scale				= {0.5, 0.5, 1.2},
		font_size      = 450,
		color          = {0,0,0},
		font_color     = {1,1,1},
	}

	btn_params.click_function = "setup_DK"
	btn_params.label = "Dragon King"
	btn_params.position = {0, 1.2, -6.9}
	self.createButton(btn_params)

	btn_params.click_function = "setup_DBK"
	btn_params.label = "Dung Beetle Knight"
	btn_params.position = {0, 1.2, -5.4}
	self.createButton(btn_params)

	btn_params.click_function = "setup_FK"
	btn_params.label = "Flower Knight"
	btn_params.position = {0, 1.2, -3.9}
	self.createButton(btn_params)

	btn_params.click_function = "setup_GRM"
	btn_params.label = "Gorm"
	btn_params.position = {0, 1.2, -2.4}
	self.createButton(btn_params)

	btn_params.click_function = "setup_LG"
	btn_params.label = "Lion God"
	btn_params.position = {0, 1.2, -0.9}
	self.createButton(btn_params)

	btn_params.click_function = "setup_PNIX"
	btn_params.label = "Phoenix"
	btn_params.position = {0, 1.2, 0.6}
	self.createButton(btn_params)

	btn_params.click_function = "setup_SA"
	btn_params.label = "Screaming Antelope"
	btn_params.position = {0, 1.2, 2.1}
	self.createButton(btn_params)

	btn_params.click_function = "setup_SPID"
	btn_params.label = "Spidicules"
	btn_params.position = {0, 1.2, 3.6}
	self.createButton(btn_params)

	btn_params.click_function = "setup_SS"
	btn_params.label = "Sunstalker"
	btn_params.position = {0, 1.2, 5.1}
	self.createButton(btn_params)

	btn_params.click_function = "setup_WL"
	btn_params.label = "White Lion"
	btn_params.position = {0, 1.2, 6.6}
	self.createButton(btn_params)

	btn_params.click_function = "setup_BL"
	btn_params.label = "Black Lion"
	btn_params.position = {0, 1.2, 8.1}
	self.createButton(btn_params)

	btn_params.click_function = "setup_Legendaries"
	btn_params.label = "Legendaries"
	btn_params.position = {-5, 1.2, 6.5}
	self.createButton(btn_params)

	--[[btn_params.click_function = "setup_Fanmade"
	btn_params.label = "Fanmade"
	btn_params.position = {5, 1.2, 6.5}
	self.createButton(btn_params)--]]
end

function createNemesisButtons()
	btn_params = {
		click_function = "",
		function_owner = self,
		label          = "",
		position       = {},
		rotation       = {-15,0,0},
		width          = 2500,
		height         = 400,
		scale				= {0.5, 0.5, 1.1},
		font_size      = 375,
		color          = {0,0,0,0},
		font_color     = {1,1,1,100},
	}

	btn_params.click_function = "setup_BUTCH"
	btn_params.label = "The Butcher"
	btn_params.position = {0, 1.2, -6.0}
	self.createButton(btn_params)

	btn_params.click_function = "setup_GSK"
	btn_params.label = "Gold Smoke Knight"
	btn_params.position = {0, 1.2, -4.6}
	self.createButton(btn_params)

	btn_params.click_function = "setup_HAND"
	btn_params.label = "The Hand"
	btn_params.position = {0, 1.2, -3.2}
	self.createButton(btn_params)

	btn_params.click_function = "setup_KING"
	btn_params.label = "King's Man"
	btn_params.position = {0, 1.2, -1.8}
	self.createButton(btn_params)

	btn_params.click_function = "setup_LK"
	btn_params.label = "Lion Knight"
	btn_params.position = {0, 1.2, -0.4}
	self.createButton(btn_params)

	btn_params.click_function = "setup_LT"
	btn_params.label = "Lonely Tree"
	btn_params.position = {0, 1.2, 1}
	self.createButton(btn_params)

	btn_params.click_function = "setup_MH"
	btn_params.label = "Manhunter"
	btn_params.position = {0, 1.2, 2.4}
	self.createButton(btn_params)

	btn_params.click_function = "setup_SM"
	btn_params.label = "Slenderman"
	btn_params.position = {0, 1.2, 3.8}
	self.createButton(btn_params)

	btn_params.click_function = "setup_TYRANT"
	btn_params.label = "The Tyrant"
	btn_params.position = {0, 1.2, 5.2}
	self.createButton(btn_params)

	btn_params.click_function = "setup_WATCH"
	btn_params.label = "The Watcher"
	btn_params.position = {0, 1.2, 6.6}
	self.createButton(btn_params)
end

function createButtons_Levels()
	btn_params = {
		click_function = "",
		function_owner = self,
		label          = "",
		position       = {},
		rotation       = {-15,0,0},
		width          = 2500,
		height         = 600,
		scale					 = {0.5, 0.5, 1},
		font_size      = 500,
		color          = {0,0,0},
		font_color     = {1,1,1},
	}

	btn_params.click_function = "setup_level1"
	btn_params.label = "[ Level 1 ]"
	btn_params.position = {-3, 1.2, 10.5}
	self.createButton(btn_params)

	btn_params.click_function = "setup_level2"
	btn_params.label = "[ Level 2 ]"
	btn_params.position = {0, 1.2, 10.5}
	self.createButton(btn_params)

	btn_params.click_function = "setup_level3"
	btn_params.label = "[ Level 3 ]"
	btn_params.position = {3, 1.2, 10.5}
	self.createButton(btn_params)

	if btn_clicked == 15 or btn_clicked == 25 then
		btn_params.click_function = "setup_level4"
		btn_params.label = "[ Level 4 ]"
		btn_params.position = {6, 1.2, 10.5}
		self.createButton(btn_params)
	end
end

function setup_Legendaries()
	btn_params = {
		click_function = "",
		function_owner = self,
		label          = "",
		position       = {},
		rotation       = {-15,0,0},
		width          = 2500,
		height         = 600,
		scale				= {0.5, 0.5, 1},
		font_size      = 350,
		color          = {0,0,0},
		font_color     = {1,1,1},
	}

	btn_params.click_function = "setup_great_golden_cat"
	btn_params.position = {-3, 1.2, 10.5}
	btn_params.label = "Great Golden Cat"
	self.createButton(btn_params)

	btn_params.click_function = "setup_beast_of_sorrow"
	btn_params.position = {-7, 1.2, 10.5}
	btn_params.label = "Beast of Sorrow"
	self.createButton(btn_params)

	btn_params.click_function = "setup_mad_steed"
	btn_params.position = {1, 1.2, 10.5}
	btn_params.label = "Mad Steed"
	self.createButton(btn_params)

	btn_params.click_function = "setup_golden_king"
	btn_params.position = {6, 1.2, 10.5}
	btn_params.label = "Golden Eyed King of 1000 Years"
	self.createButton(btn_params)
end





-- Set Quarries ----------------------------------------------------------------
function setup_DK()
	btn_clicked = 1
	deck_toGet = "Dragon King Hunt Events Deck"
	broadcastToAll("Dragon King Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
end

function setup_DBK()
	btn_clicked = 2
	deck_toGet = "Dung Beetle Knight Hunt Events Deck"
	broadcastToAll("Dung Beetle Knight Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
end

function setup_FK()
	btn_clicked = 3
	deck_toGet = "Flower Knight Hunt Events Deck"
	broadcastToAll("Flower Knight Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
end

function setup_GRM()
	btn_clicked = 4
	deck_toGet = "Gorm Hunt Events Deck"
	broadcastToAll("Gorm Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()

	for _, obj in ipairs(gameBox.getObjects()) do
		if obj.name == "Gorm Bulb Effect" then
			gameBox.takeObject({guid = obj.guid, position = {79.50, 4.11, 46.94}, rotation = {0, 0, 0}, smooth = false})
		elseif obj.name == "Posturing Piss Miasma" then
			gameBox.takeObject({guid = obj.guid, position = {79.50, 4.11, 50}, rotation = {0, 0, 0}, smooth = false})
		end
	end
end

function setup_PNIX()
	btn_clicked = 5
	deck_toGet = "Phoenix Hunt Events Deck"
	broadcastToAll("Phoenix Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
end

function setup_LG()
	btn_clicked = 6
	deck_toGet = "Lion God Hunt Events Deck"
	broadcastToAll("Lion God Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
end

function setup_SA()
	btn_clicked = 7
	deck_toGet = "Screaming Antelope Hunt Events Deck"
	broadcastToAll("Screaming Antelope Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
end

function setup_SPID()
	btn_clicked = 8
	deck_toGet = "Spidicules Hunt Events Deck"
	broadcastToAll("Spidicules Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
	for _, obj in ipairs(gameBox.getObjects()) do
		if obj.name == "Egg Sac Explosion Effect" then
			gameBox.takeObject({guid = obj.guid, position = {72.14, 4.17, 48.02}, rotation = {0, 0, 0}, smooth = false})
		end
		if obj.name == "Egg Sac Miasma" then
			gameBox.takeObject({guid = obj.guid, position = {72.14, 4.10, 44.50}, rotation = {0, 0, 0}, smooth = false})
		end
	end
end

function setup_SS()
	btn_clicked = 9
	deck_toGet = "Sunstalker Hunt Events Deck"
	broadcastToAll("Sunstalker Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
	for _, obj in ipairs(gameBox.getObjects()) do
		if obj.name == "Shade Miasma" then
			gameBox.takeObject({guid = obj.guid, position = {73.23, 4.10, 44.54}, rotation = {0, 0, 0}, smooth = false})
		end
	end
end

function setup_WL()
	btn_clicked = 10
	deck_toGet = "White Lion Hunt Events Deck"
	broadcastToAll("White Lion Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
end

function setup_BL()
	btn_clicked = 25
	deck_toGet = "Black Lion Hunt Events Deck"
	broadcastToAll("Black Lion Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
end





-- Set Nemesis -----------------------------------------------------------------
function setup_BUTCH()
	btn_clicked = 11
	broadcastToAll("The Butcher Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
end

function setup_HAND()
	btn_clicked = 12
	broadcastToAll("The Hand Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
end

function setup_KING()
	btn_clicked = 13
	broadcastToAll("King's Man Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
end

function setup_LK()
	btn_clicked = 14
	broadcastToAll("Lion Knight Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
end

function setup_MH()
	btn_clicked = 15
	broadcastToAll("Manhunter Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
end

function setup_SM()
	btn_clicked = 16
	broadcastToAll("Slenderman Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
end

function setup_TYRANT()
	btn_clicked = 17
	broadcastToAll("The Tyrant Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
end

function setup_WATCH()
	btn_clicked = 18
	broadcastToAll("The Watcher Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
end

function setup_GSK()
	btn_clicked = 19
	broadcastToAll("Gold Smoke Knight Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
end

function setup_LT()
	btn_clicked = 20
	broadcastToAll("Lonely Tree Selected ~ Choose Level", {1,1,1})
	createButtons_Levels()
	for _, obj in ipairs(gameBox.getObjects()) do
		if obj.name == "Egg Sac Explosion Effect" then
			gameBox.takeObject({guid = obj.guid, position = {72.14, 4.17, 48.02}, rotation = {0, 0, 0}, smooth = false})
		end
	end
end





-- Set Legendaries -------------------------------------------------------------
function setup_great_golden_cat()
	btn_clicked = 21
	deck_toGet = "White Lion Hunt Events Deck"
	name = "Great Golden Cat"
	changeMonster({mov = 9, tgh = 17, spd = 3, dmg = 5, lck = 1, acc = 3})
	get_bag_Showdown()
	removeButtons_monsterSetup()
	calculate_departing_bonuses()
end

function setup_beast_of_sorrow()
	btn_clicked = 22
	deck_toGet = "White Lion Hunt Events Deck"
	name = "Beast of Sorrow"
	changeMonster({mov = 7, tgh = 13, spd = 1, dmg = 1})
	get_bag_Showdown()
	removeButtons_monsterSetup()
	calculate_departing_bonuses()
end

function setup_mad_steed()
	btn_clicked = 23
	deck_toGet = "Screaming Antelope Hunt Events Deck"
	name = "Mad Steed"
	changeMonster({mov = 9, tgh = 22, spd = 3, dmg = 5, lck = 1, acc = 1})
	get_bag_Showdown()
	removeButtons_monsterSetup()
	calculate_departing_bonuses()
end

function setup_golden_king()
	btn_clicked = 24
	deck_toGet = "Phoenix Hunt Events Deck"
	name = "Great Golden Eyed King of 1000 Years"
	changeMonster({mov = 10, tgh = 25, spd = 3, dmg = 3, lck = 1000, evs = 1, acc = 2})
	get_bag_Showdown()
	removeButtons_monsterSetup()
	calculate_departing_bonuses()
end





-- Setup Levels ----------------------------------------------------------------
function setup_level1(object, player)
	if btn_clicked == 1 then
		name = "Dragon King Level 1"
		changeMonster({mov = 10, tgh = 13})
	elseif btn_clicked == 2 then
		name = "Dung Beetle Knight Level 1"
		changeMonster({mov = 7, tgh = 12})
	elseif btn_clicked == 3 then
		name = "Flower Knight Level 1"
		changeMonster({mov = 7, tgh = 6})
	elseif btn_clicked == 4 then
		name = "Gorm Level 1"
		changeMonster({mov = 6, tgh = 8})
	elseif btn_clicked == 5 then
		name = "Phoenix Level 1"
		changeMonster({mov = 8, tgh = 14})
	elseif btn_clicked == 6 then
		name = "Lion God Level 1"
		changeMonster({mov = 8, tgh = 10})
	elseif btn_clicked == 7 then
		name = "Screaming Antelope Level 1"
		changeMonster({mov = 6, tgh = 8})
	elseif btn_clicked == 8 then
		name = "Spidicules Level 1"
		changeMonster({mov = 11, tgh = 8})
	elseif btn_clicked == 9 then
		name = "Sunstalker Level 1"
		changeMonster({mov = 16, tgh = 10})
	elseif btn_clicked == 10 then
		name = "White Lion Level 1"
		changeMonster({mov = 6, tgh = 8})
	elseif btn_clicked == 11 then
		name = "The Butcher Level 1"
		changeMonster({mov = 5, tgh = 9})
	elseif btn_clicked == 12 then
		name = "The Hand Level 1"
		changeMonster({mov = 5, tgh = 14})
	elseif btn_clicked == 13 then
		name = "Kingsman Level 1"
		changeMonster({mov = 5, tgh = 12})
	elseif btn_clicked == 14 then
		name = "Lion Knight Level 1"
		changeMonster({mov = 7, tgh = 10})
	elseif btn_clicked == 15 then
		name = "Manhunter Level 1"
		changeMonster({mov = 6, tgh = 8})
	elseif btn_clicked == 16 then
		name = "Slenderman Level 1"
		changeMonster({mov = 6, tgh = 11})
	elseif btn_clicked == 17 then
		name = "The Tyrant Level 1"
		changeMonster({mov = 6, tgh = 8})
	elseif btn_clicked == 18 then
		name = "The Watcher Level 1"
	elseif btn_clicked == 19 then
		name = "Gold Smoke Knight Level 1"
		changeMonster({mov = 8, tgh = 27})
	elseif btn_clicked == 20 then
		name = "The Lonely Tree Level 1"
		changeMonster({mov = 0, tgh = 11, dmg = -1})
	elseif btn_clicked == 25 then
		name = "Black Lion Level 1"
		changeMonster({mov = 7, tgh = 10})
	end
	get_bag_Showdown()
	removeButtons_monsterSetup()
	calculate_departing_bonuses()
end

function setup_level2(object, player)
	if btn_clicked == 1 then
		name = "Dragon King Level 2"
		changeMonster({mov = 10, tgh = 15, spd = 1, dmg = 1})
	elseif btn_clicked == 2 then
		name = "Dung Beetle Knight Level 2"
		changeMonster({mov = 7, tgh = 14, spd = 1, dmg = 1})
	elseif btn_clicked == 3 then
		name = "Flower Knight Level 2"
		changeMonster({mov = 8, tgh = 8, dmg = 1})
	elseif btn_clicked == 4 then
		name = "Gorm Level 2"
		changeMonster({mov = 9, tgh = 11, spd = 1, dmg = 1})
	elseif btn_clicked == 5 then
		name = "Phoenix Level 2"
		changeMonster({mov = 8, tgh = 12, spd = 1, dmg = 1})
	elseif btn_clicked == 6 then
		name = "Lion God Level 2"
		changeMonster({mov = 9, tgh = 16, spd = 1, dmg = 1, lck = 1})
	elseif btn_clicked == 7 then
		name = "Screaming Antelope Level 2"
		changeMonster({mov = 6, tgh = 10, spd = 1, dmg = 1})
	elseif btn_clicked == 8 then
		name = "Spidicules Level 2"
		changeMonster({mov = 14, tgh = 10, spd = 1, dmg = 1})
	elseif btn_clicked == 9 then
		name = "Sunstalker Level 2"
		changeMonster({mov = 16, tgh = 12, spd = 1, dmg = 1})
	elseif btn_clicked == 10 then
		name = "White Lion Level 2"
		changeMonster({mov = 7, tgh = 10, spd = 1, dmg = 1})
	elseif btn_clicked == 11 then
		name = "The Butcher Level 2"
		changeMonster({mov = 5, tgh = 12, spd = 1, dmg = 1})
	elseif btn_clicked == 12 then
		name = "The Hand Level 2"
		changeMonster({mov = 6, tgh = 15, spd = 1, dmg = 1})
	elseif btn_clicked == 13 then
		name = "Kingsman Level 2"
		changeMonster({mov = 6, tgh = 15, spd = 1, dmg = 1})
	elseif btn_clicked == 14 then
		name = "Lion Knight Level 2"
		changeMonster({mov = 8, tgh = 12})
	elseif btn_clicked == 15 then
		name = "Manhunter Level 2"
		changeMonster({mov = 7, tgh = 11, spd = 1, dmg = 1})
	elseif btn_clicked == 16 then
		name = "Slenderman Level 2"
		changeMonster({mov = 6, tgh = 13, spd = 1, dmg = 1, acc = 1})
	elseif btn_clicked == 17 then
		name = "The Tyrant Level 2"
		changeMonster({mov = 7, tgh = 10, spd = 1, dmg = 1})
	elseif btn_clicked == 20 then
		name = "The Lonely Tree Level 2"
		changeMonster({tgh = 13})
	elseif btn_clicked == 25 then
		name = "Black Lion Level 2"
		changeMonster({mov = 8, tgh = 12, spd = 1, dmg = 1})
	end
	get_bag_Showdown()
	removeButtons_monsterSetup()
	calculate_departing_bonuses()
end

function setup_level3(object, player)
	if btn_clicked == 1 then
		name = "Dragon King Level 3"
		changeMonster({mov = 10, tgh = 17, spd = 2, dmg = 2, lck = 1})
	elseif btn_clicked == 2 then
		name = "Dung Beetle Knight Level 3"
		changeMonster({mov = 8, tgh = 18, spd = 2, dmg = 2, acc = 1, evs = 1})
	elseif btn_clicked == 3 then
		name = "Flower Knight Level 3"
		changeMonster({mov = 9, tgh = 11, spd = 1, dmg = 2})
	elseif btn_clicked == 4 then
		name = "Gorm Level 3"
		changeMonster({mov = 8, tgh = 15, spd = 2, dmg = 2, lck = 1})
	elseif btn_clicked == 5 then
		name = "Phoenix Level 3"
		changeMonster({mov = 8, tgh = 17, spd = 2, dmg = 3, lck = 2})
	elseif btn_clicked == 6 then
		name = "Lion God Level 3"
		changeMonster({mov = 10, tgh = 21, spd = 2, dmg = 3, evs = 1, lck = 2})
	elseif btn_clicked == 7 then
		name = "Screaming Antelope Level 3"
		changeMonster({mov = 8, tgh = 12, spd = 2, dmg = 2, evs = 1})
	elseif btn_clicked == 8 then
		name = "Spidicules Level 3"
		changeMonster({mov = 16, tgh = 12, spd = 2, dmg = 2})
	elseif btn_clicked == 9 then
		name = "Sunstalker Level 3"
		changeMonster({mov = 16, tgh = 16, spd = 2, dmg = 2, acc = 1, lck = 1})
	elseif btn_clicked == 10 then
		name = "White Lion Level 3"
		changeMonster({mov = 8, tgh = 14, spd = 2, dmg = 2, acc = 2, lck = 1})
	elseif btn_clicked == 11 then
		name = "The Butcher Level 3"
		changeMonster({mov = 8, tgh = 15, spd = 2, dmg = 2, acc = 2})
	elseif btn_clicked == 12 then
		name = "The Hand Level 3"
		changeMonster({mov = 6, tgh = 30, spd = 3, dmg = 6})
	elseif btn_clicked == 13 then
		name = "Kingsman Level 3"
		changeMonster({mov = 6, tgh = 18, spd = 2, dmg = 2, acc = 2})
	elseif btn_clicked == 14 then
		name = "Lion Knight Level 3"
		changeMonster({mov = 9, tgh = 15, spd = 1, dmg = 1})
	elseif btn_clicked == 15 then
		name = "Manhunter Level 3"
		changeMonster({mov = 8, tgh = 11, spd = 1, dmg = 1})
	elseif btn_clicked == 16 then
		name = "Slenderman Level 3"
		changeMonster({mov = 6, tgh = 17, spd = 2, dmg = 2, acc = 2, lck = 1})
	elseif btn_clicked == 17 then
		name = "The Tyrant Level 3"
		changeMonster({mov = 7, tgh = 14, spd = 2, dmg = 2})
	elseif btn_clicked == 20 then
		name = "The Lonely Tree Level 3"
		changeMonster({tgh = 17, spd = 1, dmg = 1})
	elseif btn_clicked == 25 then
		name = "Black Lion Level 3"
		changeMonster({mov = 9, tgh = 18, spd = 2, dmg = 2, acc = 3, lck = 2})
	end
	get_bag_Showdown()
	removeButtons_monsterSetup()
	calculate_departing_bonuses()
end

function setup_level4(object, player)
	if btn_clicked == 15 then
		name = "Manhunter Level 4"
		changeMonster({mov = 9, tgh = 13, spd = 2, dmg = 2, acc = 2})
	elseif btn_clicked == 25 then
		name = "Black Lion Level 4"
		changeMonster({mov = 10, tgh = 25, spd = 4, dmg = 4, acc = 7, lck = 5})
	end
	get_bag_Showdown()
	removeButtons_monsterSetup()
	calculate_departing_bonuses()
end
-- additional levels
	-- DBK - changeMonster({mov = 9, tgh = 25, spd = 2, dmg = 5, acc = 1, lck = 3})




-- Get Showdown Bag / Monster Story --------------------------------------------
function get_bag_Showdown(object, player)
	close_Quarry()
	close_Nemesis()
	clone_deal_terrainDeck()
	clone_deal_huntDecks()
	removeButtons_monsterSetup()

	if hunt_Phase then
		createButton_endHunt()
		for _, obj in ipairs(bag_quarry_showdowns.getObjects()) do
			local pos = bag_quarry_showdowns.getPosition()
			if obj.name == name then
				local bag = bag_quarry_showdowns.takeObject({position = {pos.x, pos.y + 10, pos.z - 10}, smooth = false, guid = obj.guid})
				bag.setPosition({24.79, 4.25, 5.24})
				bag.setLock(true)
			end
		end

	elseif not hunt_Phase then
		for _, obj in ipairs(bag_nemesis_showdowns.getObjects()) do
			local pos = bag_nemesis_showdowns.getPosition()
			if obj.name == name then
				local bag = bag_nemesis_showdowns.takeObject({position = {pos.x, pos.y + 10, pos.z - 10}, smooth = false, guid = obj.guid})
				bag.setPosition({24.79, 4.25, 5.24})
				bag.setLock(true)
			end
		end
	end

	if hunt_Phase then
		-- Lighting
		local set_Lighting = getObjectFromGUID(Global.getTable('user_settings').set_Lighting.guid)
		local rotZ = set_Lighting.getRotation().z
		if rotZ < 10 or rotZ > 350 then
			tool_Lighting = getObjectFromGUID('cdef09')
			tool_Lighting.call("setLightingTable_hunt")
		end
		-- Music
		local set_Sound = getObjectFromGUID(Global.getTable('user_settings').set_Sound.guid)
		local rotZ = set_Sound.getRotation().z
		if rotZ < 10 or rotZ > 350 then
			local music_player = getObjectFromGUID(Global.getTable('user_settings').music_player.guid)
			local hunt_phase_soundtrack = getObjectFromGUID(Global.getTable('user_settings').hunt_phase_soundtrack.guid)
			local track = tonumber(hunt_phase_soundtrack.getDescription())
			if music_player ~= nil then
				music_player.AssetBundle.playLoopingEffect(track)
			end
		end
	end
	startLuaCoroutine(self, "load_showdown_story_set_board_state")
	startLuaCoroutine(self, "raise_hunt_figurine_after_load")
	hunt_Phase = false
end

function load_showdown_story_set_board_state()
	wait(1)

	for _, obj in ipairs(zoneInjuryBoard.getObjects()) do
		if obj.tag == "Board" and obj.getPosition().y > 3 then
			board = obj
			break
		end
	end

	tool_storyHunt = getObjectFromGUID('c66fd4')
	if btn_clicked == 1 then
		tool_storyHunt.call('show_DK')
		board.setState(1)

	elseif btn_clicked == 2 then
		tool_storyHunt.call('showDBK')
		board.setState(2)

	elseif btn_clicked == 3 then
		tool_storyHunt.call('showFK')
		board.setState(3)

	elseif btn_clicked == 4 then
		tool_storyHunt.call('showGRM')
		board.setState(4)

	elseif btn_clicked == 5 then
		tool_storyHunt.call('showPNIX')
		board.setState(5)

	elseif btn_clicked == 6 then
		tool_storyHunt.call('showLG')
		board.setState(6)

	elseif btn_clicked == 7 then
		tool_storyHunt.call('showSA')
		board.setState(7)

	elseif btn_clicked == 8 then
		tool_storyHunt.call('showSPID')
		board.setState(8)

	elseif btn_clicked == 9 then
		tool_storyHunt.call('showSS')
		board.setState(9)

	elseif btn_clicked == 10 then
		tool_storyHunt.call('showWL')
		board.setState(10)

	elseif btn_clicked == 11 then
		tool_storyHunt.call('showBUTCH')
		board.setState(11)

	elseif btn_clicked == 12 then
		tool_storyHunt.call('showHAND')
		board.setState(12)

	elseif btn_clicked == 13 then
		tool_storyHunt.call('showKING')
		board.setState(13)

	elseif btn_clicked == 14 then
		tool_storyHunt.call('showLK')
		board.setState(14)

	elseif btn_clicked == 15 then
		tool_storyHunt.call('showMH')
		board.setState(15)

	elseif btn_clicked == 16 then
		tool_storyHunt.call('showSM')
		board.setState(16)

	elseif btn_clicked == 17 then
		tool_storyHunt.call('showTYRANT')
		board.setState(17)

	elseif btn_clicked == 18 then
		tool_storyHunt.call('showWATCH')
		board.setState(18)

	elseif btn_clicked == 19 then
		tool_storyHunt.call('showGSK')
		board.setState(19)

	elseif btn_clicked == 20 then
		tool_storyHunt.call('showLT')
		board.setState(20)

	elseif btn_clicked == 21 then
		tool_storyHunt.call('showLEGEND')
		board.setState(10)

	elseif btn_clicked == 22 then
		tool_storyHunt.call('showLEGEND')
		board.setState(10)

	elseif btn_clicked == 23 then
		tool_storyHunt.call('showLEGEND')
		board.setState(7)

	elseif btn_clicked == 24 then
		tool_storyHunt.call('showLEGEND')
		board.setState(5)

	elseif btn_clicked == 25 then
		tool_storyHunt.call('showBL')
		board.setState(23)
	end
	return 1
end




-- Setup Terrain Decks ---------------------------------------------------------
function clone_deal_terrainDeck()
	local zone = getObjectFromGUID(Global.getTable('zones').zone_deckTERRAIN.guid)
	for _, obj in ipairs(zone.getObjects()) do
		if obj.tag == "Deck" then
			deck_to_clone = obj
			break
		end
	end
	deckTerrain = deck_to_clone.clone({position = {-19.14, 4.34, 3.89}})
	startLuaCoroutine(self, "deal_cardsTerrain")
end

function deal_cardsTerrain()
	wait(1)

	if btn_clicked == 1 then
		local card1 = {cardName = "Toppled Pillar", zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card2 = {cardName = "Toppled Pillar", zone = "", deck = deckTerrain}
		Global.setTable("card", card2)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card3 = {cardName = "Stone Columns", zone = "", deck = deckTerrain}
		Global.setTable("card", card3)
		local pos = terrainPos3
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 2 then
		local card1 = {cardName = "Resin Dung Ball", zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card2 = {cardName = "Stone Columns", zone = "", deck = deckTerrain}
		Global.setTable("card", card2)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card3 = {cardName = "Bug Patch", zone = "", deck = deckTerrain}
		Global.setTable("card", card3)
		local pos = terrainPos3
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 3 then
		local card1 = {cardName = "Flower Patch", zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card2 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card2)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 4 then
		local card1 = {cardName = "Tall Grass", zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card2 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card2)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card3 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card3)
		local pos = terrainPos3
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 5 or btn_clicked == 24 then
		local card1 = {cardName = "Nightmare Tree", zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card2 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card2)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card3 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card3)
		local pos = terrainPos3
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		if btn_clicked == 24 then -- golden eyed king additional terrain
			wait(0.25)
			local card = {cardName = "Ore Vein", zone = "", deck = deckTerrain}
			Global.setTable("card", card)
			local pos = terrainPos4
			Global.setTable("pos_toSpawn", pos)
			Global.call("get_Card")

			wait(0.25)
			local card = {cardName = "Bug Patch", zone = "", deck = deckTerrain}
			Global.setTable("card", card)
			local pos = terrainPos4
			Global.setTable("pos_toSpawn", pos)
			Global.call("get_Card")
		end

	elseif btn_clicked == 6 then
		local card1 = {cardName = "Stone Columns", zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card2 = {cardName = "Toppled Pillar", zone = "", deck = deckTerrain}
		Global.setTable("card", card2)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card3 = {cardName = "Giant Stone Face", zone = "", deck = deckTerrain}
		Global.setTable("card", card3)
		local pos = terrainPos3
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card4 = {cardName = "Lion God Statue", zone = "", deck = deckTerrain}
		Global.setTable("card", card4)
		local pos = terrainPos4
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 7 or btn_clicked == 23 then
		local card1 = {cardName = "Acanthus Plants", zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card2 = {cardName = "Acanthus Plants", zone = "", deck = deckTerrain}
		Global.setTable("card", card2)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card3 = {cardName = "Acanthus Plants", zone = "", deck = deckTerrain}
		Global.setTable("card", card3)
		local pos = terrainPos3
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card4 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card4)
		local pos = terrainPos4
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card5 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card5)
		local pos = terrainPos5
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card6 = {cardName = "Bug Patch", zone = "", deck = deckTerrain}
		Global.setTable("card", card6)
		local pos = terrainPos6
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		if btn_clicked == 23 then -- mad steed + 2 random
			wait(0.25)
			local card = {cardName = nil, zone = "", deck = deckTerrain}
			Global.setTable("card", card)
			local pos = terrainPos7
			Global.setTable("pos_toSpawn", pos)
			Global.call("get_Card")

			wait(0.25)
			local card = {cardName = nil, zone = "", deck = deckTerrain}
			Global.setTable("card", card)
			local pos = terrainPos8
			Global.setTable("pos_toSpawn", pos)
			Global.call("get_Card")
		end

	elseif btn_clicked == 8 then
		local card1 = {cardName = "Egg Sac", zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card2 = {cardName = "Silk Nest", zone = "", deck = deckTerrain}
		Global.setTable("card", card2)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card3 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card3)
		local pos = terrainPos3
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card4 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card4)
		local pos = terrainPos4
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 9 then
		local card1 = {cardName = "Salt Sculpture", zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card2 = {cardName = "Stone Columns", zone = "", deck = deckTerrain}
		Global.setTable("card", card2)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 10  or btn_clicked == 22 then
		local card1 = {cardName = "Tall Grass", zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card2 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card2)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card3 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card3)
		local pos = terrainPos3
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 11 then
		local card1 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card2 = {cardName = "Stone Columns", zone = "", deck = deckTerrain}
		Global.setTable("card", card2)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 12 then
		local card1 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card2 = {cardName = "Stone Columns", zone = "", deck = deckTerrain}
		Global.setTable("card", card2)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card3 = {cardName = "Giant Stone Face", zone = "", deck = deckTerrain}
		Global.setTable("card", card3)
		local pos = terrainPos3
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 13 then
		local card1 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card2 = {cardName = "Stone Columns", zone = "", deck = deckTerrain}
		Global.setTable("card", card2)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card3 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card3)
		local pos = terrainPos3
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 14 then
		local card1 = {cardName = "Horn", zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card2 = {cardName = "Throne", zone = "", deck = deckTerrain}
		Global.setTable("card", card2)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card3 = {cardName = "Balcony", zone = "", deck = deckTerrain}
		Global.setTable("card", card3)
		local pos = terrainPos3
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card4 = {cardName = "Stage", zone = "", deck = deckTerrain}
		Global.setTable("card", card4)
		local pos = terrainPos4
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 15 then
		local card1 = {cardName = "Stone Columns", zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card2 = {cardName = "Stone Columns", zone = "", deck = deckTerrain}
		Global.setTable("card", card2)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card3 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card3)
		local pos = terrainPos3
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 16 then
		local card1 = {cardName = "Stone Columns", zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card2 = {cardName = "Bug Patch", zone = "", deck = deckTerrain}
		Global.setTable("card", card2)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card3 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card3)
		local pos = terrainPos3
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 17 then
		local card1 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 19 then
		local card1 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card1)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card2 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card2)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card3 = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card3)
		local pos = terrainPos3
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 20 then
		local card = {cardName = "Acanthus Plants", zone = "", deck = deckTerrain}
		Global.setTable("card", card)
		local pos = terrainPos7
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 21 then
		local card = {cardName = "Tall Grass", zone = "", deck = deckTerrain}
		Global.setTable("card", card)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card)
		local pos = terrainPos3
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card)
		local pos = terrainPos4
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		wait(0.25)
		local card = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card)
		local pos = terrainPos5
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	elseif btn_clicked == 25 then
		local card = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card)
		local pos = terrainPos1
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		local card = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card)
		local pos = terrainPos2
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

		local card = {cardName = nil, zone = "", deck = deckTerrain}
		Global.setTable("card", card)
		local pos = terrainPos3
		Global.setTable("pos_toSpawn", pos)
		Global.call("get_Card")

	end
	return 1
end





-- Setup Hunt Decks ------------------------------------------------------------
function clone_deal_huntDecks()
	if hunt_Phase then
		-- Get Basic Hunt Event Deck
		local zone = getObjectFromGUID(Global.getTable('zones').zone_deckBasicHunt.guid)
		for _, obj in ipairs(zone.getObjects()) do
			if obj.tag == "Deck" then
				deckBasic = obj
				break
			end
		end
		basic = deckBasic.clone({position = pos_deckBasic})
		basic.setPosition(pos_deckBasic)
		basic.setLock(false)
		basic.setScale({1,1,1})

		-- Get Monster Hunt Event Deck
		local pos = gameBox.getPosition()
		for _, obj in ipairs(gameBox.getObjects()) do
			if obj.name == deck_toGet then
				master_hunt_deck = gameBox.takeObject({position = {pos.x, pos.y + 10, pos.z}, rotation = {0, 180, 180}, smooth = false, guid = obj.guid})
				local pos_toClone = master_hunt_deck.getPosition()
				monst = master_hunt_deck.clone({position = pos_toClone})
				monst.setPosition(pos_deckMonst)
				monst.setScale({1,1,1})
			end
		end
		gameBox.putObject(master_hunt_deck)

		startLuaCoroutine(self, "deal_cardsHunt")
	end
end

function deal_cardsHunt()
	wait(3)

	if btn_clicked == 1 then
		basic.shuffle()
		basic.takeObject({top=true, position=huntPos2, smooth=false})
		basic.takeObject({top=true, position=huntPos5, smooth=false})
		basic.takeObject({top=true, position=huntPos7, smooth=false})
		basic.takeObject({top=true, position=huntPos8, smooth=false})
		basic.takeObject({top=true, position=huntPos10, smooth=false})

		monst.shuffle()
		monst.takeObject({top=true, position=huntPos1, smooth=false})
		monst.takeObject({top=true, position=huntPos3, smooth=false})
		monst.takeObject({top=true, position=huntPos4, smooth=false})
		monst.takeObject({top=true, position=huntPos6, smooth=false})
		monst.takeObject({top=true, position=huntPos9, smooth=false})

	elseif btn_clicked == 2 then

		basic.shuffle()
		basic.takeObject({top=true, position=huntPos1, smooth=false})
		basic.takeObject({top=true, position=huntPos4, smooth=false})
		basic.takeObject({top=true, position=huntPos5, smooth=false})
		basic.takeObject({top=true, position=huntPos7, smooth=false})
		basic.takeObject({top=true, position=huntPos8, smooth=false})
		basic.takeObject({top=true, position=huntPos10, smooth=false})

		monst.shuffle()
		monst.takeObject({top=true, position=huntPos2, smooth=false})
		monst.takeObject({top=true, position=huntPos3, smooth=false})
		monst.takeObject({top=true, position=huntPos6, smooth=false})
		monst.takeObject({top=true, position=huntPos9, smooth=false})


	elseif btn_clicked == 3 then

		basic.shuffle()
		basic.takeObject({top=true, position=huntPos1, smooth=false})
		basic.takeObject({top=true, position=huntPos2, smooth=false})
		basic.takeObject({top=true, position=huntPos3, smooth=false})
		basic.takeObject({top=true, position=huntPos4, smooth=false})
		basic.takeObject({top=true, position=huntPos5, smooth=false})

		monst.shuffle()
		monst.takeObject({top=true, position=huntPos6, smooth=false})
		monst.takeObject({top=true, position=huntPos7, smooth=false})
		monst.takeObject({top=true, position=huntPos8, smooth=false})
		monst.takeObject({top=true, position=huntPos9, smooth=false})
		monst.takeObject({top=true, position=huntPos10})


	elseif btn_clicked == 4 then

		basic.shuffle()
		basic.takeObject({top=true, position=huntPos3, smooth=false})
		basic.takeObject({top=true, position=huntPos4, smooth=false})
		basic.takeObject({top=true, position=huntPos6, smooth=false})
		basic.takeObject({top=true, position=huntPos7, smooth=false})
		basic.takeObject({top=true, position=huntPos10, smooth=false})

		monst.shuffle()
		monst.takeObject({top=true, position=huntPos1, smooth=false})
		monst.takeObject({top=true, position=huntPos2, smooth=false})
		monst.takeObject({top=true, position=huntPos5, smooth=false})
		monst.takeObject({top=true, position=huntPos8, smooth=false})
		monst.takeObject({top=true, position=huntPos9, smooth=false})


	elseif btn_clicked == 5 or btn_clicked == 24 then

		basic.shuffle()
		basic.takeObject({top=true, position=huntPos1, smooth=false})
		basic.takeObject({top=true, position=huntPos3, smooth=false})
		basic.takeObject({top=true, position=huntPos5, smooth=false})
		basic.takeObject({top=true, position=huntPos6, smooth=false})
		basic.takeObject({top=true, position=huntPos8, smooth=false})
		basic.takeObject({top=true, position=huntPos10, smooth=false})

		monst.shuffle()
		monst.takeObject({top=true, position=huntPos2, smooth=false})
		monst.takeObject({top=true, position=huntPos4, smooth=false})
		monst.takeObject({top=true, position=huntPos7, smooth=false})
		monst.takeObject({top=true, position=huntPos9, smooth=false})

	elseif btn_clicked == 6 then

		basic.shuffle()
		basic.takeObject({top=true, position=huntPos1, smooth=false})
		basic.takeObject({top=true, position=huntPos3, smooth=false})
		basic.takeObject({top=true, position=huntPos5, smooth=false})
		basic.takeObject({top=true, position=huntPos7, smooth=false})
		basic.takeObject({top=true, position=huntPos9, smooth=false})
		basic.takeObject({top=true, position=huntPos10, smooth=false})

		monst.shuffle()
		monst.takeObject({top=true, position=huntPos2, smooth=false})
		monst.takeObject({top=true, position=huntPos4, smooth=false})
		monst.takeObject({top=true, position=huntPos6, smooth=false})
		monst.takeObject({top=true, position=huntPos8, smooth=false})


	elseif btn_clicked == 7 or btn_clicked == 23 then

		basic.shuffle()
		basic.takeObject({top=true, position=huntPos2, smooth=false})
		basic.takeObject({top=true, position=huntPos4, smooth=false})
		basic.takeObject({top=true, position=huntPos5, smooth=false})
		basic.takeObject({top=true, position=huntPos7, smooth=false})
		basic.takeObject({top=true, position=huntPos9, smooth=false})
		basic.takeObject({top=true, position=huntPos10, smooth=false})

		monst.shuffle()
		monst.takeObject({top=true, position=huntPos1, smooth=false})
		monst.takeObject({top=true, position=huntPos3, smooth=false})
		monst.takeObject({top=true, position=huntPos6, smooth=false})
		monst.takeObject({top=true, position=huntPos8, smooth=false})

	elseif btn_clicked == 8 then

		basic.shuffle()
		basic.takeObject({top=true, position=huntPos3, smooth=false})
		basic.takeObject({top=true, position=huntPos4, smooth=false})
		basic.takeObject({top=true, position=huntPos6, smooth=false})
		basic.takeObject({top=true, position=huntPos9, smooth=false})
		basic.takeObject({top=true, position=huntPos10, smooth=false})

		monst.shuffle()
		monst.takeObject({top=true, position=huntPos1, smooth=false})
		monst.takeObject({top=true, position=huntPos2, smooth=false})
		monst.takeObject({top=true, position=huntPos5, smooth=false})
		monst.takeObject({top=true, position=huntPos7, smooth=false})
		monst.takeObject({top=true, position=huntPos8, smooth=false})

	elseif btn_clicked == 9 then

		basic.shuffle()
		basic.takeObject({top=true, position=huntPos1, smooth=false})
		basic.takeObject({top=true, position=huntPos4, smooth=false})
		basic.takeObject({top=true, position=huntPos5, smooth=false})
		basic.takeObject({top=true, position=huntPos7, smooth=false})
		basic.takeObject({top=true, position=huntPos8, smooth=false})
		basic.takeObject({top=true, position=huntPos10, smooth=false})

		monst.shuffle()
		monst.takeObject({top=true, position=huntPos2, smooth=false})
		monst.takeObject({top=true, position=huntPos3, smooth=false})
		monst.takeObject({top=true, position=huntPos6, smooth=false})
		monst.takeObject({top=true, position=huntPos9, smooth=false})

	elseif btn_clicked == 10 or btn_clicked == 21 or btn_clicked == 22 then

		basic.shuffle()
		basic.takeObject({top=true, position=huntPos3, smooth=false})
		basic.takeObject({top=true, position=huntPos4, smooth=false})
		basic.takeObject({top=true, position=huntPos6, smooth=false})
		basic.takeObject({top=true, position=huntPos9, smooth=false})
		basic.takeObject({top=true, position=huntPos10, smooth=false})

		monst.shuffle()
		monst.takeObject({top=true, position=huntPos1, smooth=false})
		monst.takeObject({top=true, position=huntPos2, smooth=false})
		monst.takeObject({top=true, position=huntPos5, smooth=false})
		monst.takeObject({top=true, position=huntPos7, smooth=false})
		monst.takeObject({top=true, position=huntPos8, smooth=false})

	elseif btn_clicked == 25 then
		basic.shuffle()
		basic.takeObject({top=true, position=huntPos2, smooth=false})
		basic.takeObject({top=true, position=huntPos4, smooth=false})
		basic.takeObject({top=true, position=huntPos6, smooth=false})
		basic.takeObject({top=true, position=huntPos7, smooth=false})
		basic.takeObject({top=true, position=huntPos8, smooth=false})
		basic.takeObject({top=true, position=huntPos10, smooth=false})

		monst.shuffle()
		monst.takeObject({top=true, position=huntPos1, smooth=false})
		monst.takeObject({top=true, position=huntPos3, smooth=false})
		monst.takeObject({top=true, position=huntPos5, smooth=false})
		monst.takeObject({top=true, position=huntPos9, smooth=false})

	end
	return 1
end





-- Utility Functions -----------------------------------------------------------
function updateDisplay(firstTime)
	for i, v in pairs(buttons) do
		if tostring(i) ~= 'index' and tostring(i) ~= 'counts' and tostring(i) ~= 'params' and tostring(i) ~= 'targetFunc' then
			if (buttons[tostring(i)].isReset == true) then
				buttons[tostring(i)].display.label = ''
			elseif (buttons[tostring(i)].isDepart == true) then
				buttons[tostring(i)].display.label = 'Depart vs Quarry'
			elseif (buttons[tostring(i)].isNemesis == true) then
				buttons[tostring(i)].display.label = 'Depart vs Nemesis'
			else
				buttons[tostring(i)].display.label = tostring(buttons.counts[tostring(i)])
			end
			if (firstTime) then
				self.createButton(buttons[tostring(i)].display)
				if (buttons[tostring(i)].plusOne ~= nil) then self.createButton(buttons[tostring(i)].plusOne) end
				if (buttons[tostring(i)].minusOne ~= nil) then self.createButton(buttons[tostring(i)].minusOne) end
			else
				self.editButton(buttons[tostring(i)].display)
			end
		end
	end
end

function resetTemps()
	--Resets counts on each display to 0
	for i, v in pairs(buttons) do
		if tostring(i) == 'survival_temp' or tostring(i) == 'survivalN_temp' or tostring(i) == 'insanity_temp' then
			buttons.counts[tostring(i)] = 0
		end
	end
	updateDisplay(false)
end

function plus(location, amount)
	buttons.counts[location] = buttons.counts[location] + amount
	updateDisplay(false)
end

function minus(location, amount)
	buttons.counts[location] = buttons.counts[location] - amount
	updateDisplay(false)
end

function changeAllSurvivors(location, amount)
	grids = Global.getTable("grids")
	for i, v in pairs(grids) do
		obj = getObjectFromGUID(getObjectFromGUID(v.guid).getVar("FullCharSheetGUID"))
		obj.call("add", {location, amount})
	end
end

function changeSurvivors(location, amount, grid)
	obj = getObjectFromGUID(grid.getVar("FullCharSheetGUID"))
	obj.call("add", {location, amount})
end

function changeMonster(stats)
  local buttons = monsterBoard.getTable("buttons")
  for i, v in pairs(stats) do
    buttons.counts[i] = v
  end
  monsterBoard.setTable("buttons", buttons)
  monsterBoard.call("updateDisplay")
end

function wait(time)
  local start = os.time()
  --each frame the coroutine is given control back, but we immediately call coroutine.yield() again until we exceed the time limit
  repeat coroutine.yield(0) until os.time() > start + time
end

-- to prevent collision with hunt even card
function raise_hunt_figurine_after_load()
	wait(3)
	for _, obj in ipairs(zoneShowdown.getObjects()) do
		if obj.tag == "Figurine" and obj.getPosition().z > 25 and not string.find(obj.getName(), "Event") then
			local pos = obj.getPosition()
			obj.setLock(true)
			obj.setPosition({pos.x, pos.y + 1, pos.z})
			wait(3)
			obj.setLock(false)
		end
	end
	return 1
end

function dud() end





-- End Hunt --------------------------------------------------------------------
function endHunt(object, player)
	local zone = getObjectFromGUID(Global.getTable('zonesDestruct').zoneShowdown.guid)
	local objectsInZone = zone.getObjects()
	for _, object in ipairs(objectsInZone) do
		if object.getName() == "Manhunter: Sonorous Rest" then
			object.setPosition({-70.65, 6.07, -52.46})
		end
		if object.tag == "Card" and string.find(object.getDescription(), "hunt") then
			object.destruct()
		end
		if object.tag == "Figurine" and (object.getPosition().z > 25 and not string.find(object.getName(), "Event Revealer")) then
			object.destruct()
		end
		if object.tag == "Deck" and string.find(object.getName(), "Hunt Events") then
			object.destroy()
		end
		if object.tag == "Dice" then
			object.destroy()
		end
	end

	-- Lighting
	local set_Lighting = getObjectFromGUID(Global.getTable('user_settings').set_Lighting.guid)
	local rotZ = set_Lighting.getRotation().z
	if rotZ < 10 or rotZ > 350 then
		tool_Lighting = getObjectFromGUID('cdef09')
		tool_Lighting.call("setLightingTable_showdown")
	end

	bag_Hunt.call('buttonClick_recall')
	huntLoaded.setRotation({0,180,180})

	local btns = self.getButtons()
	for i, v in pairs(btns) do
		if v.label == "End Hunt" then
			self.removeButton(v.index)
		end
	end
end







-- deprecate
--[[function createButton_endShowdown()
btn_params = {
		click_function = "",
		function_owner = self,
		label          = "",
		position       = {},
		rotation       = {-5,0,0},
		width          = 5000,
		height         = 800,
		font_size      = 600,
		color          = {0,0,0},
		font_color     = {1,1,1},
	}

	btn_params.click_function = "endShowdown"
	btn_params.label = "End the Showdown"
	btn_params.position = {0, 0.2, 0}
	self.createButton(btn_params)
end--]]

-- END story board - hunts - depart tool ---------------------------------------