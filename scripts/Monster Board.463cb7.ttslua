--KDM Monster Board
--by maximo1984 and Kijan

hideButtonBack = true
-------------------------------------------------------------
--Customizable Buttons EDIT BELOW
-------------------------------------------------------------
function initCustomButtons()
	thick = 0.06

	--stats
	dx = -1.13; dy = -0.50; px = 0.333
	createCounter('movement', dx, dy); dx = dx + px;
	createCounter('speed', dx, dy); dx = dx + px;
	createCounter('accuracy', dx, dy); dx = dx + px;
	createCounter('damage', dx, dy); dx = dx + px + px + px;

	createCounter('toughness', dx, dy); dx = dx + px;
	createCounter('evasion', dx, dy); dx = dx + px;
	createCounter('luck', dx, dy); dx = dx + px;

end

------------------
--Style Sheet
------------------

function initButtonsTable()

	buttons = {}
	buttons.count = 0
	buttons.counts = {mov = 0, tgh = 0, spd = 0, acc = 0, evs = 0, lck = 0, dmg = 0} -- for backwards compatibility
	scaleButtons = {1, 1, 1}

	buttons.counter = {
		width = 0, height = 0, font = 100,
		ox = 0.07, oz = 0.1, ow = 50, oh = 50
	}

end

----------------------------------------------------
--DO NO EDIT BELOW unless you know what you're doing
--SAVE
----------------------------------------------------

--Saves the count value into a table (data_to_save) then encodes it into the Tabletop save
function forceSave()
	local data_to_save = {buttons = {}}
	for i, v in pairs(buttons) do
		if i ~= "count" then
			data_to_save.buttons[i] = v.value
		end
	end

	saved_data = JSON.encode_pretty(data_to_save)
	if Global.getVar("clearSavedData") then
		saved_data = ""
	end
	self.script_state = saved_data
	return saved_data
end

----------------------------------------------------
--INIT
----------------------------------------------------

--loads buttons and gets saved data
function onload(saved_data)
	tokens = {}
	initButtonsTable()
	if not Global.getVar("bypassSavedLoad") then
		loaded_data = JSON.decode(saved_data)
		if loaded_data ~= nil then
			for i, v in pairs(loaded_data.buttons) do
				buttons[i] = {value = v}
			end
		end
	end
	initCustomButtons()
	Timer.create({ identifier = "startMonsterAI", function_name = "getToken", function_owner = self, delay = 1})
end

function getToken()
	zone = getObjectFromGUID(Global.getTable('zonesDestruct').zoneAIBoard.guid)
	for i, j in pairs(zone.getObjects()) do
		onObjectEnterScriptingZone(zone, j)
	end
end

function createCounter(name, x, z, func)
	local button_parameters = {}
	button_parameters.height = buttons.counter.height
	button_parameters.width = buttons.counter.width
	button_parameters.font_size = buttons.counter.font
	if hideButtonBack then
		button_parameters.color = {1, 1, 1, 0}
		button_parameters.font_color = {0, 0, 0, 100}
	end

	button_parameters.click_function = "dud"

	if buttons[name] ~= nil then
		button_parameters.label = buttons[name].value
		button_parameters.value = buttons[name].value
	else
		button_parameters.label = 0
		button_parameters.value = 0
	end
	createpm(name, type, x, z)

	button_parameters.index = buttons.count

	button_parameters.scale = scaleButtons
	button_parameters.position = {x, thick, z}
	button_parameters.function_owner = self

	self.createButton(button_parameters)
	buttons[name] = button_parameters
	buttons.count = buttons.count + 1
end

function createpm(name, type, x, z)
	local button_parameters = {}
	button_parameters.index = buttons.count
	button_parameters.height = buttons.counter.oh
	button_parameters.width = buttons.counter.ow
	button_parameters.font_size = buttons.counter.font * 0.7
	self.setVar("add_" .. name, function () add(name, 1) end)
	button_parameters.click_function = "add_" .. name
	button_parameters.label = "+"
	button_parameters.function_owner = self
	button_parameters.scale = scaleButtons
	if hideButtonBack then
		button_parameters.color = {1, 1, 1, 0}
		button_parameters.font_color = {0, 0, 0, 100}
	end

	button_parameters.position = {x + buttons.counter.ox, thick, z + buttons.counter.oz}
	self.createButton(button_parameters)
	buttons["p_" .. name] = button_parameters
	buttons.count = buttons.count + 1

	button_parameters.index = buttons.count
	self.setVar("sub_" .. name, function () add(name, - 1) end)
	button_parameters.click_function = "sub_" .. name
	button_parameters.label = "-"
	button_parameters.position = {x - buttons.counter.ox, thick, z + buttons.counter.oz}
	self.createButton(button_parameters)
	buttons["m_" .. name] = button_parameters
	buttons.count = buttons.count + 1
end

function add(name, amount)
	buttons[name].value = tonumber(buttons[name].value) + amount
	addTemp({name, amount})
	updateGrids()
end

function addTemp(params)
	buttons[params[1]].label = tonumber(buttons[params[1]].label) + params[2]
	self.editButton(buttons[params[1]])
	--updateStat!!!!!!!!!!!
	forceSave()
end

function dud()
end

---------------------
--transfer from level
---------------------

-- transferStats = {}
--
-- function transfer()
-- 	if transferStats ~= nil then
-- 		for k, v in pairs(transferStats) do
-- 			buttons.counts[k] = v
-- 		end
-- 	end
-- 	updateDisplay(false)
-- end
--
-- function clear()
-- 	if transferStats ~= nil then
-- 		for k, v in pairs(transferStats) do
-- 			buttons.counts[k] = 0
-- 		end
-- 		tokens = {}
-- 	end
-- 	updateDisplay(false)
-- end

--------------------
--token scripts
--------------------
function onObjectEnterScriptingZone(zone, enter_object)
	if enter_object ~= nil then
		if zone == getObjectFromGUID(Global.getTable('zonesDestruct').zoneAIBoard.guid) then
			if enter_object.getVar("isKdmEffectsObject") then
				for i,j in pairs(enter_object.call("getEffects", nil)) do
					addTemp({i, j})
				end
				tokens[enter_object.getGUID()] = true
			end
		end
	end
end

function onObjectLeaveScriptingZone(zone, leave_object)
	if leave_object ~= nil then
		if zone == getObjectFromGUID(Global.getTable('zonesDestruct').zoneAIBoard.guid) then
			if leave_object.getVar("isKdmEffectsObject") then
				for i,j in pairs(leave_object.call("getEffects", nil)) do
					addTemp({i, -j})
				end
				tokens[leave_object.getGUID()] = false
			end
		end
	end
end

function onObjectDestroyed(dying_object)
	if tokens and tokens[dying_object.getGUID()] then
		onObjectLeaveScriptingZone(getObjectFromGUID(Global.getTable('zonesDestruct').zoneAIBoard.guid), dying_object)
	end
end

-- for backwards compatibility
function updateDisplay()
	buttons["movement"].value = buttons.counts.mov
	buttons["movement"].label = buttons.counts.mov
	self.editButton(buttons["movement"])

	buttons["toughness"].value = buttons.counts.tgh
	buttons["toughness"].label = buttons.counts.tgh
	self.editButton(buttons["toughness"])

	buttons["speed"].value = buttons.counts.spd
	buttons["speed"].label = buttons.counts.spd
	self.editButton(buttons["speed"])

	buttons["accuracy"].value = buttons.counts.acc
	buttons["accuracy"].label = buttons.counts.acc
	self.editButton(buttons["accuracy"])

	buttons["evasion"].value = buttons.counts.evs
	buttons["evasion"].label = buttons.counts.evs
	self.editButton(buttons["evasion"])

	buttons["luck"].value = buttons.counts.lck
	buttons["luck"].label = buttons.counts.lck
	self.editButton(buttons["luck"])

	buttons["damage"].value = buttons.counts.dmg
	buttons["damage"].label = buttons.counts.dmg
	self.editButton(buttons["damage"])

	getToken()

end

function updateGrids()
	grids = Global.getTable("grids")
	for i, v in pairs(grids) do
		obj = getObjectFromGUID(v.guid)
		-- if obj.getVar("isFullyLoaded") == true then
			obj.call("diceStats")
		-- end
	end
end