-- dice roller

-- Scripts created by Kijan, Maximo1984 and Jprattski


-- Table of Contents


-- Dice Roller Functions
-- Spawns the dice
-- Rolls the Dice
-- Removes the spawned dice
-- Coroutine, watching for all the dice to come to rest.

-- Gets the Dice Values
-- sharp calculations
-- [[[[[ ROLLING TO HIT ]]]]] --
					-- Boolean Checks for Special Gear , Fighting Arts, Disorders
					-- Lines up Dice, Rotates and Locks them
					-- Triggers Early Iron , Rainbow Wing Belt
					-- Monster Knocked Down Calculations
					-- Counts Missed Attack Rolls, Triggers Re-rolls
			-- [[[[[ ROLLING TO WOUND ]]
					-- When the Monster Suffers a Wound

	-- Buttons
	-- Selected Player Functions (color clicked)
	-- Count Tokens in Zone
	-- Get Weapon Prof, Courage, Understanding

	-- Click to Hit
			-- Check for Area of Effect while attacking
	-- Click to Wound
			--Check for BowMaster Deadly 2
			-- Removes 'end of attack' tokens

	-- Clicked Roll
		-- [[[[[[[ ROLLING TO HIT ]]
				-- Gets the Equiped WeaponGUID
				-- ARMOR SETS
				-- WEAPON TYPES
				-- WEAPON KEYWORDS
				-- UNIQUE WEAPON CONDITIONS
				-- WEAPON PROFICIENCY / MASTERY
				-- AMMUNITION
						-- [[[[[[[ DETERMINES HOW MANY DICE TO ROLL ]]

		-- [[[[[[[ ROLLING TO WOUND ]]
				-- Checks if Hit Location is selected or not
				-- GETS NAME / DESC TAGS FROM HIT LOCATION DESCRIPTION
				-- GETS EQUIPPED WEAPON
						-- Fist and Tooth
				-- CHECKS FOR DEVASTATING, SHARP, FRAIL

		-- Hit, Perfect Hit, Wound, Critical Wound Card Effects
		-- Call Hit Location Wound, Critical Wound, Failure Reaction Effects
		-- Functions for end of showdown, end of attack and end of round tokens

		-- Utility Functions
				-- Cleanup List , Cleanup Hit Location
				-- Cleans up dice left after save/load
				-- Debug Dice Roller - Resets Tables
				-- Coroutine Timer
				-- Clear 'End of Attack' Tokens on AI Board
				-- Reset 'Hit Location' Table


-- End Table of Contents


-- Set button color
buttonColor = {0, 0, 0}
coloredButtons = {x = -4, y = 0.1, z = 1, dx = 3}

hit = true
sharp = false
sharpValue = 0
blind = 0
grid = ""
objectsInZone = ""
zone = ""
playerClicked = ""
rolledHitLocation = 0

cleanUpList = {}

msg_red = {0.856, 0.1, 0.094}
msg_yellow = {0.905, 0.898, 0.172}
msg_green = {0.192, 0.701, 0.168}
msg_blue = {0.118, 0.53, 1}

-- Token Positions
pos_spd = {x = 16.07, y = 6, z = -20.95}
neg_spd = {x = 15.64, y = 6, z = -20.95}

pos_str = {x = 18.18, y = 6, z = -20.95}
neg_str = {x = 17.75, y = 6, z = -20.95}

pos_acc = {x = 17.15, y = 6, z = -20.95}
neg_acc = {x = 16.70, y = 6, z = -20.95}

pos_lck = {x = 19.26, y = 6, z = -20.95}
neg_lck = {x = 18.82, y = 6, z = -20.95}

pos_eva = {x = 19.69, y = 6, z = -19.75}
neg_eva = {x = 19.26, y = 6, z = -19.75}

pos_mov = {x = 16.89, y = 6, z = -19.75}
neg_mov = {x = 16.49, y = 6, z = -19.75}

-- Token Rotations
rot_pos = {0, 180, 0}
rot_neg = {0, 180, 180}

-- Loads when this object loads for the first time
function onLoad()
	--[[woundButton1()
	woundButton2()
	woundButton3()
	woundButton4()
	woundButton5()
	woundButton6()
	woundButton7()--]]
	createButtons()
	spawnedDice = {}
    bag_luck = getObjectFromGUID('6a1312')
    bag_speed = getObjectFromGUID('922010')
    bag_str = getObjectFromGUID('4c2300')
    bag_accuracy = getObjectFromGUID('08250f')
	token_knockdown_monster = getObjectFromGUID("a61816")
	hitTool = getObjectFromGUID('309402')
	hitTool_left = getObjectFromGUID('309402')

	-- Token Bags
	bag_spd = getObjectFromGUID(Global.getTable('bags_stats').bag_spd.guid)
	bag_acc = getObjectFromGUID(Global.getTable('bags_stats').bag_acc.guid)
	bag_str = getObjectFromGUID(Global.getTable('bags_stats').bag_str.guid)
	bag_lck = getObjectFromGUID(Global.getTable('bags_stats').bag_lck.guid)
	bag_eva = getObjectFromGUID(Global.getTable('bags_stats').bag_eva.guid)
	bag_mov = getObjectFromGUID(Global.getTable('bags_stats').bag_mov.guid)

	-- Zones
	zoneInjuryBoard = getObjectFromGUID(Global.getTable('zones').zoneInjuryBoard.guid)
	zoneAIBoard = getObjectFromGUID(Global.getTable('zonesDestruct').zoneAIBoard.guid)
	zoneShowdown = getObjectFromGUID(Global.getTable('zonesDestruct').zoneShowdown.guid)
	zoneEffect = getObjectFromGUID(Global.getTable('zones').zoneEffect.guid)
	zoneEffect2 = getObjectFromGUID(Global.getTable('zones').zoneEffect2.guid)
	zone_drawnHit = getObjectFromGUID(Global.getTable('zones').zoneLeft_drawnHit.guid)

	-- For spawning card triggers
	physics_hit_queue = getObjectFromGUID('925c00')
	physics_wound_queue = getObjectFromGUID('e06cea')

	display_table_gear = {}
	display_table_standard = {}

	-- Card Display Triggers , onPerfectHit, onHit, onCriticalWound
	clone_scale_gear = {0.47, 1.00, 0.47}
	clone_scale_standard = {0.67, 1.00, 0.67}
	clone_rot = {20, 180, 0.00}

	for _, object in ipairs(zone_drawnHit.getObjects()) do
		if string.find(object.getDescription(), "survivor dice") then
			if object ~= nil then
				object.destroy()
			end
		end
	end
end


-- Selected Player Functions (color clicked)

function redClicked()
	red_attacked = true
	yellow_attacked = false
	green_attacked = false
	blue_attacked = false

	--Sets Zone and Grid and Full Char Sheet
	grid = getObjectFromGUID(Global.getTable("grids").red.guid)
	msg_color = grid.getTable("msg_color")
	zone = getObjectFromGUID(Global.getTable('zones').zoneP1.guid)
	survCard = getObjectFromGUID(Global.getTable('survCards').red.guid)
	insanity_val = tonumber(getObjectFromGUID(grid.getVar("FullCharSheetGUID")).getTable("buttons").insanity.label)

	-- Sets Dice roller for Frenzy
	hasFrenzy = false
	local frenzy = getObjectFromGUID('7636f9')
	local pos = frenzy.getPosition()
	if pos.y > 1 then
		hasFrenzy = true
	end -- end

	-- Checks for Constellation
	hasConstellation = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), "constellation") then
			hasConstellation = true
		end
	end

	return_aura()

end -- end Red Clicked

function yellowClicked()
	red_attacked = false
	yellow_attacked = true
	green_attacked = false
	blue_attacked = false

	--Sets Zone and Grid
	grid = getObjectFromGUID(Global.getTable("grids").yellow.guid)
	msg_color = grid.getTable("msg_color")
	zone = getObjectFromGUID(Global.getTable('zones').zoneP2.guid)
	survCard = getObjectFromGUID(Global.getTable('survCards').yellow.guid)
	insanity_val = tonumber(getObjectFromGUID(grid.getVar("FullCharSheetGUID")).getTable("buttons").insanity.label)

	-- Sets Dice roller for Frenzy
	hasFrenzy = false
	local frenzy = getObjectFromGUID('c6fee5')
	local pos = frenzy.getPosition()
	if pos.y > 1 then
		hasFrenzy = true
	end

	-- Checks for Constellation
	hasConstellation = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), "constellation") then
			hasConstellation = true
		end
	end

	return_aura()

end -- end Yellow Clicked

function greenClicked()
	red_attacked = false
	yellow_attacked = false
	green_attacked = true
	blue_attacked = false

	--Sets Zone and Grid
	grid = getObjectFromGUID(Global.getTable("grids").green.guid)
	msg_color = grid.getTable("msg_color")
	zone = getObjectFromGUID(Global.getTable('zones').zoneP3.guid)
	survCard = getObjectFromGUID(Global.getTable('survCards').green.guid)
	insanity_val = tonumber(getObjectFromGUID(grid.getVar("FullCharSheetGUID")).getTable("buttons").insanity.label)

	-- Sets Dice roller for Frenzy
	hasFrenzy = false
	local frenzy = getObjectFromGUID('8120c3')
	local pos = frenzy.getPosition()
	if pos.y > 1 then
		hasFrenzy = true
	end

	-- Checks for Constellation
	hasConstellation = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), "constellation") then
			hasConstellation = true
		end
	end

	return_aura()

end -- end Green Clicked

function blueClicked()
	red_attacked = false
	yellow_attacked = false
	green_attacked = false
	blue_attacked = true

	--Sets Zone and Grid
	grid = getObjectFromGUID(Global.getTable("grids").blue.guid)
	msg_color = grid.getTable("msg_color")
	zone = getObjectFromGUID(Global.getTable('zones').zoneP4.guid)
	survCard = getObjectFromGUID(Global.getTable('survCards').blue.guid)
	insanity_val = tonumber(getObjectFromGUID(grid.getVar("FullCharSheetGUID")).getTable("buttons").insanity.label)

	-- Sets Dice roller for Frenzy
	hasFrenzy = false
	local frenzy = getObjectFromGUID('9cac01')
	local pos = frenzy.getPosition()
	if pos.y > 1 then
		hasFrenzy = true
	end

	-- Checks for Constellation
	hasConstellation = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), "constellation") then
			hasConstellation = true
		end
	end

	return_aura()

end -- end Blue Clicked


function return_aura()
	-- Gets Aura for The Hand
	local pos = survCard.getPosition()
	local hitList = Physics.cast({
		origin			= {pos.x, pos.y, pos.z},
		direction		= {0,1,0},
		type				= 2,
		size				= {2,2,2},
		max_distance 	= 0,
	})
	hasWhite = false
	hasRed = false
	hasGreen = false
	hasBlue = false
	for _, entry in ipairs(hitList) do
		if string.find(entry.hit_object.getDescription(), "white aura") then
			hasWhite = true
		end
		if string.find(entry.hit_object.getDescription(), "red aura") then
			hasRed = true
		end
		if string.find(entry.hit_object.getDescription(), "green aura") then
			hasGreen = true
		end
		if string.find(entry.hit_object.getDescription(), "blue aura") then
			hasBlue = true
		end
	end
	--[[if hasWhite then
		hasRed = false
		hasGreen = false
		hasBlue = false
	end]]--
end

-- Click to Hit
function clickToHit(color)
	--cleanUp()
	hit_blind = false
	hit = true
	blind = 0
	check_when_you_attack_effects()
	stack_beforeWound_effects()
	ClickedRoll(color)
end -- end

function clickToBlindHit(color)
	grid.call("checkWeapon")
	weaponGUID = grid.getVar("weaponGUID")

	hasSneakAttack = false
	hasDenticleAxe = false
	hasShadowWalk = false
	sharpAdded = false
	for _, card in ipairs(zone.getObjects()) do
		local desc = card.getDescription()
		local pos = card.getPosition()
		local rot = {0, 180, 0}
		local offY = 0.2

		-- Sneak Attack
		if card.getName() == "Sneak Attack" then
			hasSneakAttack = true
			for i = 1, 4 do
				local tok = bag_str.takeObject({position = {pos.x, pos.y + i * offY, pos.z}, rotation = rot, smooth = false})
				tok.setDescription("temp, end of attack")
			end
			Global.call('addBroadcast', {"blind", {effect = "Sneak Attack ~ (+4) Strength", effect2 = ""}})
		end

		-- Denticle Axe
		if card.getName() == "Denticle Axe" and card.getRotation().z > 165 and card.getGUID() == weaponGUID then
			hasDenticleAxe = true
			for i = 1, 2 do
				local tok = bag_str.takeObject({position = {pos.x, pos.y + i * offY, pos.z}, rotation = rot, smooth = false})
				tok.setDescription("temp, end of attack")
			end
			Global.call('addBroadcast', {"blind", {effect = "Denticle Axe ~ (+2) Strength ~ Devastating 1 on First Wound", effect2 = ""}})
		end

		-- Cycloid Scale Sleeves
		if card.getName() == "Cycloid Scale Sleeves" then
			local btns = survCard.getButtons()
			for i, v in pairs(btns) do
				if v.label == "[ Shadow Walk ]" then
					hasShadowWalk = true
					local tok = bag_acc.takeObject({position = {pos.x, pos.y + offY, pos.z}, rotation = rot, smooth = false})
					tok.setDescription("temp, end of attack")
				end
			end
		end
		if card.getGUID() == weaponGUID then
			if not string.find(desc, "sharp") and hasShadowWalk then
				sharpAdded = true
				card.setDescription(card.getDescription() .. ", sharp to_endOfattack")
				Global.call('addBroadcast', {"blind", {effect = "Cycloid Scale Sleeves ~ (+1) Accuracy ~ (+) Sharp", effect2 = ""}})
			elseif string.find(desc, "sharp") then
				Global.call('addBroadcast', {"blind", {effect = "Cycloid Scale Sleeves ~ (+1) Accuracy ~ Already Sharp", effect2 = ""}})
			end
		end
	end ------------------------ end for loop body ------------------------------

	-- Weak Spot
	hasWeakSpot = false
	for _, card in ipairs(zoneInjuryBoard.getObjects()) do
		if card.getName() == "Weak Spot" then
			hasWeakSpot = true
			Global.call('addBroadcast', {"blind", {effect = "Weak Spot ~ Wound attempts will gain (+4) Strength", effect2 = ""}})
		end
	end

	--cleanUp()
	hit_blind = true
	hit = true
	blind = 1
	check_when_you_attack_effects()
	stack_beforeWound_effects()
	ClickedRoll(color)

	startLuaCoroutine(Global, "printBlind")
	--startLuaCoroutine(self, "blind_msg_delay")
end

function blind_msg_delay()
	wait(1)
		startLuaCoroutine(Global, "printBlind")
		Global.call("clearBroadcast")
	return 1
end

function rollWound(params)
	clearDice()
	Timer.create({
		identifier = "wound"..self.guid,
		delay = 0.1,
		function_name = "spawnDice",
		parameters = params
	})
end

-- Click to Wound
function clickToWound(color)
	hit = false
	ClickedRoll(color)
	removeWoundButtons()
end


function check_when_you_attack_effects()
	-- Checks if in Area of Effect Zone while attacking
	if red_attacked then
		PlayerName = "Player One"
	elseif yellow_attacked then
		PlayerName = "Player Two"
	elseif green_attacked then
		PlayerName = "Player Three"
	elseif blue_attacked then
		PlayerName = "Player Four"
	end
	accuracy_penalty = 0
	for _, card in ipairs(zoneInjuryBoard.getObjects()) do

		----- FLOWER KNIGHT -----
		-- Entrancing Gaze
		if card.getName() == "Entrancing Gaze" then
			inFacing = false
			offset_pos = 1.50
			for _, obj in ipairs(zoneShowdown.getObjects()) do
				if obj.getName() == "Flower Knight" then
					monster_rotY = obj.getRotation().y ; monster_posX = obj.getPosition().x ; monster_posZ = obj.getPosition().z
				end
				if obj.getName() == PlayerName then
					survivor_posX = obj.getPosition().x ; survivor_posZ = obj.getPosition().z
				end
			end
			if (monster_rotY > 165 and monster_rotY < 195) and (survivor_posZ < (monster_posZ - offset_pos)) then
				inFacing = true
			elseif (monster_rotY > 260 and monster_rotY < 280) and (survivor_posX < (monster_posX - offset_pos)) then
				inFacing = true
			elseif (monster_rotY > 350 or monster_rotY < 10) and (survivor_posZ > (monster_posZ + offset_pos)) then
				inFacing = true
			elseif (monster_rotY > 80 and monster_rotY < 100) and (survivor_posX > (monster_posX + offset_pos)) then
				inFacing = true
			end
			if inFacing then
				broadcastToAll("Entrancing Gaze ~ This Attack suffered (-3) Accuracy", msg_color)
				accuracy_penalty = 3
				inFacing = false
			end
		end

		----- LION GOD -----
		-- Whiplash
		if card.getName() == "Whiplash" then
			for _, object in ipairs(zoneEffect.getObjects()) do
				if object.getName() == PlayerName then
					broadcastToAll("Whiplash Zone ~ Gain a Bleeding Token before Drawing Hit Locations", msg_color)
				end
			end
		end

	end --------------------------- end for loop body --------------------------
end -- end function


--Dice Roller Functions

-- Spawns the dice
function spawnDice(params)
	playerColor = params.playerColor
	number = params.number
	pointerPosition = {x = -9.91, y = 4.48, z = 1.70}

	for i=1, number do

		if number > 4 then moreThanFour = true else moreThanFour = false end
		posX = pointerPosition.x
		posY = pointerPosition.y

		if i > 4 then
			posX = posX - 6
			posZ = pointerPosition.z - 1
		else
			if number > 4 then posZ = pointerPosition.z + 1 else posZ = pointerPosition.z end
		end

		if math.fmod(number, 2) then xShift = 1.5 else xShift = 0 end
		if moreThanFour == true then
			xVal = posX + (i * 1.5 - ((number / 6) + xShift)) - 1
		else
			xVal = posX + (i * 1.5 - ((number / 2) + xShift))
		end

		yVal = posY + 2
		zVal = posZ
		newPosition = {xVal, yVal, zVal}

		self.takeObject({
			position = newPosition,
			callback = 'rollTheDice',
			callback_owner = self,
			params = {num = number}
		})
	end
end

-- Rolls the Dice
function rollTheDice(obj, params)
	table.insert(spawnedDice, obj.guid)
	if #spawnedDice == (params.num) then
		startLuaCoroutine(self, "watchDice")
	end

	obj.roll()
end

-- Removes the spawned dice
function clearDice()
	for i, v in pairs(spawnedDice) do
		local die = getObjectFromGUID(v)
		if die ~= nil then destroyObject(die) end
	end
	spawnedDice = {}
end

--[[function resetColor()
	cleanUp()
	grid = ""
	zone = ""
	params = {index = 4, color = buttonColor}
	self.editButton(params)
	params.index = 5
	self.editButton(params)
	params.index = 6
	self.editButton(params)
	clearDice()
	Global.getTable('tghEndofAttack')
	Global.setTable('tghEndofAttack', {})
	Global.call("clearBroadcast")
end--]]

--Coroutine, watching for all the dice to come to rest.
function watchDice()
	startTime = os.time()
	repeat
		local restingCount = 0
		for i, dieGUID in ipairs(spawnedDice) do
			local die = getObjectFromGUID(dieGUID)
			if not die or die.resting == true then
				restingCount = restingCount + 1
			end
		end
		coroutine.yield(0)
	until restingCount == #spawnedDice or os.time() > startTime + 4
	watchingDice = false

	CheckResults()

	return 1
end

function ClickedRoll(color)
	-- Resets Display Tables and removes any that need to be added to wound queue display
	--cleanUp()
	reset_display_stack_queue()

	Global.call("clearBroadcast")

	hasSpinningHalberd = false
	red_lens_open = false
	green_lens_open = false
	blue_lens_open = false
	for _, card in ipairs(zoneInjuryBoard.getObjects()) do
		local rotZ = card.getRotation().z
		-- Spinning Halberd
		if card.getName() == "Spinning Halberd" then
			hasSpinningHalberd = true
		end
		-- Red Lens
		if card.getName() == "Red Lens" and rotZ > 165 and rotZ < 195 then
			red_lens_open = true
		end
		-- Green Lens
		if card.getName() == "Green Lens" and rotZ > 165 and rotZ < 195 then
			green_lens_open = true
		end
		-- Blue Lens
		if card.getName() == "Blue Lens" and rotZ > 165 and rotZ < 195 then
			blue_lens_open = true
		end
	end

	-- ROLLING TO HIT

	if hit then
	-- Gets the Equiped WeaponGUID
	grid.call("checkWeapon")
	weaponGUID = grid.getVar("weaponGUID")

	-- Checks for Weapon Key Words, Armor Sets, Weapon Proficiency, Mastery
	hasDevastating_1 = false
	hasDevastating_2 = false
	hasEarlyIron = false
	hasUnwiedly = false
	hasSlow = false

	hasLionArmor = false
	hasWarlord = false

	hasRegalEdge = false
	hasCelestialSpear = false

	hasAxe = false
	--hasAxeProf = false
	hasAxeMastery = false
	hasBow = false
	hasBowProf = false
	hasClub = false
	hasClubProf = false
	hasClubMastery = false
	hasDagger = false
	hasKatar = false
	hasGrandProficiency = false
	hasGrandMastery = false
	hasGrandWeapon = false
	hasNightmareQuiver = false
	hasRanged = false
	hasShield = false
	hasSpear = false
	hasSwordMastery = false
	hasSword = false
	hasTwilight_prof4 = false
	hasThrown = false
	hasWhip = false
	hasWhipProf = false
	hasWhipMastery = false

	plus1acc = 0

		for _, v in pairs(zone.getObjects()) do
			local desc = v.getDescription()
			-------------------------- start body for loop ----------------------


			-- ARMOR SETS

			-- Warlord Armor
			if v.getName() == "Warlord Armor" then
				pos_warlord = v.getPosition()
				hasWarlord = true
			end
			-- White Lion Armor
			if v.getName() == "White Lion Armor" then
				pos_LionArmor = v.getPosition()
				hasLionArmor = true
			end


			-- Fighting Arts




			-- WEAPON KEYWORDS

			if string.find(desc, 'devastating1') and v.getGUID() == weaponGUID then
				hasDevastating_1 = true
			end
			if v.getName() == "Zanbato" and v.getRotation().z > 165 and v.getGUID() == weaponGUID then
				hasDevastating_1 = true
			end
			if string.find(desc, 'devastating2') and v.getGUID() == weaponGUID then
				hasDevastating_2 = true
			end -- end

			if string.find(desc, "earlyIron") and v.getGUID() == weaponGUID then
				hasEarlyIron = true
			end

			if not hasFrenzy and (string.find(desc, 'slow') and v.getGUID() == weaponGUID) then
				hasSlow = true
			end

			if string.find(desc, "unwiedly") and v.getGUID() == weaponGUID then
				hasUnwiedly = true
			end

			if string.find(desc, "ranged") and v.getGUID() == weaponGUID then
				hasRanged = true
			end

			if string.find(desc, "thrown") and v.getGUID() == weaponGUID then
				hasThrown = true
			end

			-- UNIQUE WEAPON CONDITIONS
            if v.getName() == "Adventure Sword" and v.getGUID() == weaponGUID then
				local pos = v.getPosition()
                numCourage = get_courage_level()
				for i = 1, numCourage do
					local token = bag_str.takeObject({position = {pos.x, pos.y + i * 0.2, pos.z}, rotation = {0, 180, 0}})
					token.setDescription("token, endOfAttack")
				end
				broadcastToAll("You gained " .. numCourage .. " Strength for this Attack for each courage you have", msg_color)
			end

			if v.getName() == "Calcified Juggernaut Blade" and v.getGUID() == weaponGUID then
				local pos = v.getPosition()
				for i = 1, count_tokens(token_count) do
					local token = bag_str.takeObject({position = {pos.x, pos.y + i * 0.2, pos.z}, rotation = {0, 180, 0}})
					token.setDescription("token, endOfAttack")
				end
				broadcastToAll("You gained " .. count_tokens(token_count) .. " Strength for this Attack for each Token you have", msg_color)
			end

			if hasConstellation and (v.getName() == "Celestial Spear" and v.getGUID() == weaponGUID) then
				gear_Celestial_Spear_pos = v.getPosition()
				hasCelestialSpear = true
			end

			if hasConstellation and (v.getName() == "Regal Edge" and v.getGUID() == weaponGUID) then
				gear_Regal_Edge_pos = v.getPosition()
				hasRegalEdge = true
			end

			if v.getName() == "Twilight Sword" and v.getGUID() == weaponGUID then
				local pos = v.getPosition()
				for i = 1, get_weapon_prof_level(weapon_prof_level) do
					local token = bag_accuracy.takeObject({position = {pos.x, pos.y + i * 0.2, pos.z}, rotation = {0, 180, 0}})
					token.setDescription("token, endOfAttack")
				end
				if get_weapon_prof_level(weapon_prof_level) >= 4 then
					hasTwilight_prof4 = true
				end
				if get_weapon_prof_level(weapon_prof_level) >= 6 then
					v.setDescription(desc .. ", deadly")
				end
			end


			-- WEAPON PROFICIENCY / MASTERY

			-- AXE
			--[[if v.getName() == "Axe" then
				hasAxeProf = true
			end]]
			if v.getName() == "Axe" and v.getRotation().z < 65 then
				hasAxeMastery = true
			end
			if string.find(desc, "axe") and v.getGUID() == weaponGUID then
				hasAxe = true
			end
			-- BOW
			if v.getName() == "Bow" then
				hasBowProf = true
			end
			if string.find(desc, "bow") and v.getGUID() == weaponGUID then
				hasBow = true
			end

			-- CLUB
			if v.getName() == "Club" then
				hasClubProf = true
			end
			if v.getName() == "Club" and v.getRotation().z < 65 then
				hasClubMastery = true
			end
			if string.find(desc, "club") and v.getGUID() == weaponGUID then
				hasClub = true
			end

			-- DAGGER
			if string.find(desc, "dagger") and v.getGUID() == weaponGUID then
				hasDagger = true
			end

			-- KATAR
			if string.find(desc, 'katar') and v.getGUID() == weaponGUID then
				hasKatar = true
			end

			-- Sword
			if v.getName() == "Sword" and v.getRotation().z < 65 then
				hasSwordMastery = true
			end
			if string.find(desc, "sword") and v.getGUID() == weaponGUID then
				hasSword = true
				sword_gear_pos = v.getPosition()
			end

			-- Grand Weapon
			if v.getName() == "Grand Weapon" and v.getRotation().z < 65 then
				hasGrandMastery = true
			end
			if v.getName() == "Grand Weapon" then
				hasGrandProficiency = true
			end
			if string.find(desc, "grand weapon") and v.getGUID() == weaponGUID then
				hasGrandWeapon = true
				pos_gear_grand = v.getPosition()
				if hasGrandProficiency then
					local token = bag_accuracy.takeObject({position = {pos_gear_grand.x, pos_gear_grand.y + 0.2, pos_gear_grand.z}, rotation = {0, 180, 0}})
					token.setDescription("token, endOfAttack")
					broadcastToAll("Grand Weapon Proficiency ~ You gained (+1) Accuracy", {1, 1, 1})
				end
			end

			-- Shield
			if string.find(desc, "shield") and v.getGUID() == weaponGUID then
				hasShield = true
			end

			-- Spear
			if v.getName() == "Spear" then
				hasSpearProf = true
			end
			if v.getName() == "Spear" and v.getRotation().z < 65 then
				hasSpearMastery = true
			end
			if string.find(desc, "spear") and v.getGUID() == weaponGUID then
				hasSpear = true
			end

			if v.getName() == "Nightmare Quiver" then
				hasNightmareQuiver = true
				nightmare_quiver_pos = v.getPosition()
			end

			-- WHIP
			if v.getName() == "Whip" and v.getRotation().z < 65 then
				hasWhipMastery = true
			end
			if v.getName() == "Whip" then
				hasWhipProf = true
			end
			if string.find(desc, "whip") and v.getGUID() == weaponGUID then
				hasWhip = true
				whip_pos = v.getPosition()
				if hasWhipMastery then
					for i = 1, 5 do
						local token = bag_str.takeObject({position = {whip_pos.x, whip_pos.y + i * 0.1, whip_pos.z}, rotation = {0, 180, 0}})
						token.setDescription("token, endOfAttack")
					end
					broadcastToAll("Whip Mastery ~ You gained (+5) Strength for this Attack", {1, 1, 1})
				end
			end


			-- AMMUNITION

			if string.find(desc, 'ammunition') and v.getGUID() == weaponGUID then
				v.call('sub')
				local count = tonumber(v.call('getCount'))
				if count < 1 then
					broadcastToAll("Ammunition Count Depleted ~ Equip another Weapon at the End of this Attack", {1, 1, 1})
				end
			end
		end -------------------------- end body for loop ------------------------


		-- CALCULATES HOW MANY DICE TO ROLL ON ATTACK
		local gridButn = grid.getTable("buttons")
		params = {number = tonumber(gridButn['attack'].label), playerColor = color}

		if hasSlow or params.number < 1 then params.number = 1 end

		if hasRegalEdge then
			params = {number = tonumber(gridButn['attack'].label) + 1, playerColor = color}
			broadcastToAll("Regal Edge: You gained (+1) Speed ~ (+4) Strength ~ for Constellation", msg_color)
			for i = 1, 4 do
				local token = bag_str.takeObject({position = {gear_Regal_Edge_pos.x, gear_Regal_Edge_pos.y + i * 0.2, gear_Regal_Edge_pos.z}, rotation = {0, 180, 0}})
				token.setDescription("token, endOfAttack")
			end
		end

		if hasCelestialSpear then
			params = {number = tonumber(gridButn['attack'].label), playerColor = color}
			broadcastToAll("Celestial Spear: You gained (+5) Strength ~ for Constellation", msg_color)
			for i = 1, 5 do
				local token = bag_str.takeObject({position = {gear_Celestial_Spear_pos.x, gear_Celestial_Spear_pos.y + i * 0.2, gear_Celestial_Spear_pos.z}, rotation = {0, 180, 0}})
				token.setDescription("token, endOfAttack")
			end
		end

		if hasAxe and hasWarlord then
			params = {number = tonumber(gridButn['attack'].label) + 1, playerColor = color}
			broadcastToAll("Warlord Armor: You gained (+1) Speed ~ (+1) Luck when attacking with Axes", msg_color)
			local token_luck = bag_luck.takeObject({position = pos_warlord, rotation = {0, 180, 0}})
			token_luck.setDescription(token_luck.getDescription() .. ", endOfAttack")
		end

		if hasLionArmor and hasDagger then
			params = {number = tonumber(gridButn['attack'].label) + 1, playerColor = color}
			broadcastToAll("White Lion Armor: You gained (+1) Speed ~ (+2) Strength when attacking with Daggers", msg_color)
			for i = 1, 2 do
				local token_strength = bag_str.takeObject({position = {pos_LionArmor.x, pos_LionArmor.y + i * 0.5, pos_LionArmor.z}, rotation = {0, 180, 0}})
				token_strength.setDescription(token_strength.getDescription() .. ", endOfAttack")
			end
		end

		if hasLionArmor and hasKatar then
			params = {number = tonumber(gridButn['attack'].label) + 1, playerColor = color}
			broadcastToAll("White Lion Armor: You gained (+1) Speed ~ (+2) Strength when attacking with Katars", msg_color)
			local str1 = bag_str.takeObject({position = {pos_LionArmor.x, pos_LionArmor.y + 0.3, pos_LionArmor.z}, rotation = {0, 180, 0}})
			local str2 = bag_str.takeObject({position = {pos_LionArmor.x, pos_LionArmor.y + 0.5, pos_LionArmor.z}, rotation = {0, 180, 0}})
			str1.setDescription(str1.getDescription() .. ", endOfAttack")
			str2.setDescription(str2.getDescription() .. ", endOfAttack")
		end

		if hasSwordMastery and hasSword then
			params = {number = tonumber(gridButn['attack'].label) + 1, playerColor = color}
			local str_token = bag_str.takeObject({position = {sword_gear_pos.x, sword_gear_pos.y + 0.2, sword_gear_pos.z}, rotation = {0, 180, 0}})
			local acc_token = bag_accuracy.takeObject({position = {sword_gear_pos.x, sword_gear_pos.y + 0.4, sword_gear_pos.z}, rotation = {0, 180, 0}})
			local speed_token = bag_speed.takeObject({position = {sword_gear_pos.x, sword_gear_pos.y + 0.6, sword_gear_pos.z}, rotation = {0, 180, 0}})
			str_token.setDescription("token, endOfAttack")
			speed_token.setDescription("token, endOfAttack")
			acc_token.setDescription("token, endOfAttack")
			broadcastToAll("Sword Mastery ~ You gained (+1) Speed ~ (+1) Strength ~ (+1) Accuracy", msg_color)
		end

		if hasThrown and hasNightmareQuiver then
			for i=1, 5 do
				local str_token = bag_str.takeObject({position = {nightmare_quiver_pos.x, nightmare_quiver_pos.y + i * 0.2, nightmare_quiver_pos.z}, rotation = {0, 180, 0}})
				str_token.setDescription("endOfAttack")
			end
		end

		if hasBowProf_reRoll then
			params = {number = tonumber(count_missed), playerColor = color}
			hasBowProf_reRoll = false
		end

		if hasTwilight_prof4 then
			params = {number = tonumber(gridButn['attack'].label) + 2, playerColor = color}
		end
		-------- END ~ CALCULATES HOW MANY DICE TO ROLL ON ATTACK ~ END -----------


		-- CALCULATES HOW MANY DICE TO ROLL ON WOUND
	else
		startLuaCoroutine(self, "display_cards_triggered_coR")

		params = {number = 1, playerColor = color}
		local desc = ""
		local sharps = 0


		-- GETS HIT LOCATION KEY WORDS

		-- Checks if Hit Location is selected or not
		local hitTable = hitTool.getTable('hitLocation')
		if next(hitTable) == nil then
			broadcastToAll("Select a Hit Location First", {1, 1, 1})
			return
		end
		cannotCrit = false
		cannot_cancel_reaction = false
		needsAxe = false

		hasAxe_vs_persistentInjury = false
		hasDagger_bonus = false
		hasEyeOfTheStorm = false
		hasFailure_Reaction = false
		hasFailure_hasWound = false
		hasFrail = false
		hasImpervious = false
		hasNoCrit = false
		hasParry = false
		has_SuperDense = false
		hasSpear_bonus = false
		hasReflex_Reaction = false
		hasRetch = false
		hasWound_Reaction = false

		clubBonus = 0
		plusTgh = 0
		hasPlusTgh = false

		local hitTable = hitTool.getTable('hitLocation')
		for k, v in ipairs(hitTable) do
			-------------------------- start body for loop ---------------------------

			obj = getObjectFromGUID(v)
			local desc = obj.getDescription()

			if string.find(desc, 'axe only') then
				cannotCrit = true
				needsAxe = true
			end

			if string.find(desc, 'bonus_club') and string.find(desc, 'screaming antelope') then
				if hasClub then
					hasClub_bonus = true
					clubBonus = 2
					broadcastToAll("This Wound Attempt gained (+2) Luck with a Club", msg_color)
				end
			elseif string.find(desc, 'bonus_club') and string.find(desc, 'dung beetle knight') then
				if hasClub then
					hasClub_bonus = true
					clubBonus = 4
					broadcastToAll("This Wound Attempt gained (+4) Luck with a Club", msg_color)
				end
			end

			if string.find(desc, 'bonus_dagger') then
				if hasDagger then
					hasDagger_bonus = true
					broadcastToAll("You gained (+3) Strength with a Dagger vs this Hit Location", msg_color)
				end
			end

			if string.find(desc, 'bonus_spear') then
				if hasSpear then
					hasSpear_bonus = true
					broadcastToAll("You gained (+3) Strength with a Spear vs this Hit Location", msg_color)
				end
			end

			if string.find(desc, 'bonus_shield')  and string.find(desc, 'screaming antelope') then
				if hasShield then
					hasShield_bonus = true
					shieldBonus = 2
					broadcastToAll("This Wound Attempt gained (+2) Luck with a Shield", msg_color)
				end
			elseif string.find(desc, 'bonus_shield')  and string.find(desc, 'dung beetle knight') then
				if hasShield then
					hasShield_bonus = true
					shieldBonus = 4
					broadcastToAll("This Wound Attempt gained (+4) Luck with a Shield", msg_color)
				end
			end

			if string.find(desc, 'bonus_whip') then
				if hasWhip then
					hasWhip_bonus = true
					broadcastToAll("You gained (+3) Strength with a Whip vs this Hit Location", msg_color)
				end
			end

			if obj.getName() == "Century Carapace" then
				centuryCarapace = true
				cannot_cancel_reaction = true
				hasPlusTgh = true
				plusTgh = 6
				broadcastToAll("(+6) Toughness to Wound this Location Calculated", {1,1,1})
			end

			if string.find(desc, 'persistent injury') then
				if hasAxe and hasAxeMastery then
					hasAxe_vs_persistentInjury = true
				end
			end

			if string.find(desc, 'super_dense') then
				has_SuperDense = true
			end

			if string.find(desc, 'reflex reaction') then
				hasReflex_Reaction = true
			end

			if string.find(desc, 'wound reaction') then
				hasWound_Reaction = true
			end

			if string.find(desc, 'eye of the storm') then
				hasEyeOfTheStorm = true
			end

			if string.find(desc, 'retch') then
				hasRetch = true
			end

			if string.find(desc, 'failure reaction') then
				hasFailure_Reaction = true
			end

			if string.find(desc, 'no critical') then
				hasNoCrit = true
			end

			if string.find(desc, 'parry') then
				hasParry = true
			end

			if string.find(desc, 'impervious') then
				hasImpervious = true
			end

		end ------------------------- end body for loop ------------------------


		-- GETS EQUIPPED WEAPON

		local equipedWeapon = ""
		unlucky = false
		for _, v in pairs(zone.getObjects()) do
			if string.find(v.getDescription(), 'weapon') and grid.getTable("weapon").name == v.getName() then
				equipedWeapon = v
			end
			if v.getName() == "Unlucky" then
				cannotCrit = true
				unlucky = true
			end
		end

		-- Fist and Tooth
		local descWeapon = ""
		local nameWeapon = "FistAndTooth"

		if equipedWeapon ~= "" then
			descWeapon = equipedWeapon.getDescription()
			nameWeapon = equipedWeapon.getName()


			-- CHECKS FOR SHARPS

			hasDevastating_1 = false
			hasDevastating_2 = false
			for _, v in pairs(zone.getObjects()) do ------------------------------
				local desc = v.getDescription()

				if string.find(descWeapon, 'axe') then
					cannotCrit = false
					needsAxe = false
				end

				if has_SuperDense == true and string.find(descWeapon, 'frail') then
					hasFrail = true
				end

				if (centuryCarapace) and (string.find(descWeapon, 'club') or string.find(descWeapon, 'shield') or string.find(descWeapon, 'pickaxe')) then
					sharps = sharps + 2
					centuryCarapace = false
				end

				if v.getName() == "Lantern Armor" and string.find(descWeapon, 'club') then
					sharps = sharps + 1
				end

				if hasSteelSword_PerfectHit then
					sharps = sharps + 1
					hasSteelSword_PerfectHit = false
				end

				if string.find(desc, 'sharp') then
					if v.getName() == nameWeapon then
						sharps = sharps + 1
					end
				end
			end ----------------------- end body for loop -------------------------

		else -- if equipedWeapon ~= "" then
			if nameWeapon == "FistAndTooth" then
				for _, v in pairs(zone.getObjects()) do
					local desc = v.getDescription()
					if (v.getName() == "Metal Maw" or v.getName() == "Acid Palms") and v.getRotation().z < 90 then
						sharps = sharps + 1
					end
				end
			end
		end -- end if equipedWeapon ~= "" / else

		if hasFrail then
			broadcastToAll("Your " .. equipedWeapon.getName() .. " has 'Frail' and is archived after this Wound Attempt", msg_color)
		end

		if hasDevastating_1 then
			broadcastToAll(equipedWeapon.getName() .. ": Devastating 1", msg_color)
		elseif hasDevastating_2 then
			broadcastToAll(equipedWeapon.getName() .. ": Devastating 2", msg_color)
		end

		if sharps > 0 then
			sharp = true
			clearDice()
			params = {number = sharps, playerColor = color}
			playerClicked = color
		end

	end -- end if hit then / else if wound then

	-- [[ RIGHT DICE ROLLER ONLY ]] --
	-- Remove Buttons For Reactions
	--[[hitTool.call('removeButton_ReactionTriggered')
	hitTool.call('removeButton_survival_opportunity')
	hitTool.call('removeButton_FinishReaction')
	-- [[ RIGHT DICE ROLLER ONLY ]] --]]

	-- Remove Overlays
	remove_overlays()
	remove_manhunterHitLocations()

	clearDice()
	Timer.create({
		identifier = "roller"..self.guid,
		delay = 0.1,
		function_name = "spawnDice",
		parameters = params
	})
end

function remove_overlays()
	-- Bored
	-- Eye of the Storm Effects
	foundBored = false
	for _, obj in ipairs(zoneInjuryBoard.getObjects()) do
		if obj.getName() == "Bored" then
			foundBored = true
		end
	end
	if not foundBored then
		for _, obj in ipairs(zoneShowdown.getObjects()) do
			if obj.getName() == "Phoenix" then
				obj.call("remove_overlay_eyeOfTheStorm")
			end
		end
	end
	-- Retch
	for _, obj in ipairs(zoneShowdown.getObjects()) do
		if obj.getName() == "Gorm" then
			obj.call("remove_overlay_retch")
		end
	end
end

function remove_manhunterHitLocations()
	-- Remove Manhunter Hit Locations from Severe Injury area if they were not used for Rolls
	local zoneInjuryBoard = getObjectFromGUID(Global.getTable('zones').zoneInjuryBoard.guid)
	for _, board in ipairs(zoneInjuryBoard.getObjects()) do
		if board.getName() == "Manhunter" then
			injury_rollers = {'e57b2c', "411f4d", "ee0816", "dcac77", "8f1ae0"}
			for i = 1, #injury_rollers, 1 do
		      obj = getObjectFromGUID(injury_rollers[i])
				obj.getVar("cleanUpOnly")
				obj.setVar("cleanUpOnly", true)
		      if obj ~= nil then
		         obj.call("check_for_manhunterHitlocations")
		      end
				obj.getVar("cleanUpOnly")
				obj.setVar("cleanUpOnly", false)
		   end
		end
	end
end


-- Gets the Dice Values
function CheckResults()
	local rollResults = {}

	-- sharp calculations
	if sharp then
		for _, dieGUID in ipairs(spawnedDice) do
			local die = getObjectFromGUID(dieGUID)
			if die then
				sharpValue = sharpValue + die.getValue()
			end
		end
		broadcastToAll("Sharp: +" .. sharpValue .. " Strength calculated", {1,1,1})
		startLuaCoroutine(self, 'sharpMessageDelay')
		sharp = false
		Timer.create({
			identifier = "wound"..self.guid,
			delay = 2,
			function_name = "rollWound",
			parameters = {number = 1, playerColor = playerClicked}
		})
	else

		--local bowMaster = false
		local timelessEye = false
		local reroll = false
		local hasLungs = false
		local hasUnrelenting = false
		local gridButn = grid.getTable("buttons")
		objectsInZone = zone.getObjects()

		-- Boolean Checks for Special Gear , Fighting Arts, Disorders
		for _, object in ipairs(objectsInZone) do
			local desc = object.getDescription()
			if object.getName() == "Timeless Eye" then
				timelessEye = true
			end
			if object.getName() == "Rainbow Wing Belt" then
				if object.getRotation().z > 165 then
					reroll = true
				end
			end
			if object.getName() == "Legendary Lungs" then
				hasLungs = true
			end
			if object.getName() == "Unrelenting" then
				hasUnrelenting = true
			end

	            	if string.find(desc, "club") and object.getGUID() == weaponGUID then
				if hasClubMastery then
					Global.call('addBroadcast', {"wound", {gear = "◈ " .. object.getName() .. " Mastery ◈", effect = "You will earn an additional wound if your wound attempt is double the monster toughness"}})
					hasAddtionalWoundIfDouble = true
				end
			end
		end

		count = 0
		for _, dieGUID in ipairs(spawnedDice) do
			local die = getObjectFromGUID(dieGUID)
			if die then
				local value = die.getValue()
				count = count + 1
				table.insert(rollResults, value)
				-----------------------------------------
				-- Lines up Dice, Rotates and Locks them
				-----------------------------------------
					local rotY = die.getRotation().y - die.getRotation().y
					local rotX = die.getRotation().x
					local rotZ = die.getRotation().z
					die.setRotationSmooth({rotX, rotY, rotZ}, false, true)
						if value == 2 or value == 4 or value == 6 or value == 8 or value == 10 then
							die.setRotationSmooth({die.getRotation().x, 180, die.getRotation().z}, false, true)
						end
						if hit then
							die.setPositionSmooth({-8.00 - #rollResults * 1, 5, 1.65}, false, false)
							die.setLock(true)
						else
							if rolledHitLocation == 1 then
								die.setPositionSmooth({-8.91, 5.00, -2.45}, false, false)
							elseif rolledHitLocation == 2 then
								die.setPositionSmooth({-11.36, 5.00, -2.41}, false, false)
							elseif rolledHitLocation == 3 then
								die.setPositionSmooth({-13.91, 5.00, -2.42}, false, false)
							elseif rolledHitLocation == 4 then
								die.setPositionSmooth({-16.32, 5.00, -2.42}, false, false)
							elseif rolledHitLocation == 5 then
								die.setPositionSmooth({-11.41, 5.00, -6.82}, false, false)
							elseif rolledHitLocation == 6 then
								die.setPositionSmooth({-13.90, 5.00, -6.83}, false, false)
							elseif rolledHitLocation == 7 then
								die.setPositionSmooth({-16.35, 5.00, -6.79}, false, false)
							end
							die.setLock(true)
						end -- end dice rotation


				 -- Triggers Early Iron , Rainbow Wing Belt
				attackHit = false
				if hit then
					value = value - accuracy_penalty

					--[[if (hasEarlyIron and value == 1) then
						broadcastToAll("~~~~~~~~~~~~~~~~     Early Iron!     ~~~~~~~~~~~~~~~~ ", {1, 1, 1})
					end

					if (hasUnwiedly and value == 1) then
						broadcastToAll("~~~~~~~~~~~~~~~~     Unwiedly: You deal 1 Damage to yourself     ~~~~~~~~~~~~~~~~ ", {1, 1, 1})
					end

					if (reroll and value == 1) then
						broadcastToAll("~~~~~~~~~~~~~~~~     Rainbow Wing Belt: You may re-roll any 1's     ~~~~~~~~~~~~~~~~ ", {1, 1, 1})
					end]]

					local isKnockedDown = token_knockdown_monster.getVar("monster_knocked_down")
					if value == 10 or (timelessEye and value == 9) then
						if hasSpinningHalberd and hasRanged then
							attackHit = false
							die.setColorTint({0.1, 0.1, 0.1})
						else
							attackHit = true
							die.setColorTint({0.192, 0.4, 0.168})
							perfectHit()
							hitEffects()
							check_discard_onPerfectHit()
						end
					elseif value >= (tonumber(gridButn['hit'].label - blind)) and value ~= 1 then
						if hasSpinningHalberd and hasRanged then
							attackHit = false
							die.setColorTint({0.1, 0.1, 0.1})
						elseif hasRed and red_lens_open then
							attackHit = false
							die.setColorTint({0.1, 0.1, 0.1})
						elseif hasGreen and green_lens_open then
							attackHit = false
							die.setColorTint({0.1, 0.1, 0.1})
						elseif hasBlue and blue_lens_open then
							attackHit = false
							die.setColorTint({0.1, 0.1, 0.1})
						else
							attackHit = true
							die.setColorTint({0.192, 0.701, 0.168})
							hitEffects()
						end
					elseif isKnockedDown and (value >= 3 or value >= (tonumber(gridButn['hit'].label - blind))) and value ~= 1 then
						if hasSpinningHalberd and hasRanged then
							attackHit = false
							die.setColorTint({0.1, 0.1, 0.1})
						else
							attackHit = true
							die.setColorTint({0.192, 0.701, 0.168})
							hitEffects()
						end
					else
						die.setColorTint({0.1, 0.1, 0.1})
					end

					if hasLungs and attackHit then
						broadcastToAll("Legendary Lungs: Once per attack, for each successful hit, make an additional attack", msg_color)
					end

					-- Counts Missed Attack Rolls, Triggers Re-rolls
					count_missed = 0
					unrelenting_triggered = false
					for _, object in ipairs(zone_drawnHit.getObjects()) do
						if object.tag == "Dice" then
							local color = object.getColorTint()
							if color.r < 0.15 and color.g < 0.15 and color.b < 0.15 then
								count_missed = count_missed + 1
							end
						end
					end

					if hasUnrelenting then
						if count_missed == #rollResults then
							unrelenting_triggered = true
						end
					end

					if hasBow and hasBowProf then
						if count_missed >= 1 then
							hasBowProf_reRoll = true
							createButtons_BowProf_Reroll()
						end
					end
					if hasBowProf_reRoll then
						broadcastToAll("Bow Proficiency ~ Do you want to Re-Roll Misses (Limit Once Per Attack)?", msg_color)
					end

					startLuaCoroutine(self, "display_cards_triggered_coR")

				else -- if wound then

					-- Variable for Hit Locations that have both failure and wound reactions (called by hit tool in resolve attack)
					isWounded = false

					-- Special Value Checks
					crit_value = tonumber(gridButn['crit'].label)
					wound_value = tonumber(gridButn['wound'].label)

					if hasClub and hasClub_bonus then
						crit_value = crit_value - clubBonus
					end
					if hasDoubleWoundAttempt then
						value = value * 2
						hasDoubleWoundAttempt = false
					end
					if hasDagger and hasDagger_bonus then
						value = value + 3
					end
					if hasShield and hasShield_bonus then
						crit_value = crit_value - shieldBonus
					end
					if hasSpear and hasSpear_bonus then
						value = value + 3
					end
					if hasPlusTgh then
						value = value - plusTgh
					end
					if hasWeakSpot then
						value = value + 4
						hasWeakSpot = false
					end
					if hasWhip and hasWhip_bonus then
						value = value + 3
					end

					if hasAddtionalWoundIfDouble then
						local monstr = getObjectFromGUID(Global.getTable("boards").boardMonster.guid)
						local butn = monstr.getTable("buttons")
						local toughness = tonumber(butn['toughness'].label);
						if value >= toughness * 2 then
							Global.call('addBroadcast', {"wound", {gear = "Club Master ~ Monster suffers an Additional Wound", effect = ""}})
						end
					end

					-- Critical Hit Results
					if (value >= crit_value or hasAxe_vs_persistentInjury) and value ~= 1 then
						isWounded = true

						if hasNoCrit then
							die.setColorTint({0.856, 0.1, 0.094}) -- set color to wound color
							broadcastToAll("This Location does not have a Critical Wound Effect", {1,1,1})
							--[[if (hasWound_Reaction or hasReflex_Reaction) then
								local bool = checkCancelled(hasCancelled)
								if not bool then
									hitTool.call('createButton_survival_Opportunity')
									hitTool.call('createButton_reactionTriggered')
									hitTool.call('createButton_resolve_attack')]]
							hitLocation_ReflexEffect()
							hitLocationWoundEffects()
							woundEffects()
							--checkReactions()
							when_monster_suffers_wound()

						else -- if has a critical hit effect
							die.setColorTint({0.4, 0.1, 0.094}) -- set color to crit color
							if cannotCrit then
								if unlucky then
									broadcastToAll("Unlucky ~ You cannot Critically Wound!", msg_color)
								end
								if needsAxe then
									broadcastToAll("The Lonely Tree can only be Critically Wounded by Axes!", msg_color)
								end
								die.setColorTint({0.856, 0.1, 0.094}) -- set color to wound color
							end
							local hasSavage = check_hasSavage(hasSavage)
							if hasSavage then
								Global.call('addBroadcast', {"crit", {gear = "Savage ~ Monster suffers an Additional Wound", effect = ""}})
							end
							critEffects() -- survivor gear effects
							woundEffects() -- survivor gear effects
							hitLocationCriticalWoundEffects()
							resetHitLocationTable()
							when_monster_suffers_wound()
							when_monster_suffers_critical_wound()
							--hasFailure_Reaction = false
							--hasReflex_Reaction = false
							--hasWound_Reaction = false
						end

					-- Wound Results
					elseif (value + sharpValue >= tonumber(gridButn['wound'].label) or value == 10) and (value ~= 1 or cannotCrit) then
						if not hasParry and not hasImpervious then
							isWounded = true
							--hasFailure_Reaction = false
							die.setColorTint({0.856, 0.1, 0.094}) -- set color to wound color

							cancel_reactions_katar_proficiency()
							reset_display_stack_queue()
							--[[if hasWound_Reaction or hasReflex_Reaction then
								local bool = checkCancelled(hasCancelled)
								if not bool then
									hitTool.call('createButton_survival_Opportunity')
									hitTool.call('createButton_reactionTriggered')
									hitTool.call('createButton_resolve_attack')]]
							hitLocation_ReflexEffect()
							hitLocationWoundEffects()
							woundEffects()
							--checkReactions()
							when_monster_suffers_wound()

						else -- if hasParry or hasImpervious then
							die.setColorTint({0.1, 0.1, 0.1}) -- set color to miss color
							if hasParry then
								broadcastToAll("Parry ~ Wound Attempts on this location fail unless the wound roll result is Critical", {1,1,1})
							elseif hasImpervious then
								broadcastToAll("Impervious ~ This Location cannot be wounded", {1,1,1})
							end
							--hasWound_Reaction = false
							isWounded = false
							cancel_reactions_katar_proficiency()
							hitLocationFailureEffects()
							hitLocation_ReflexEffect()
							--[[if hasFailure_Reaction or hasReflex_Reaction then
								local bool = checkCancelled(hasCancelled)
									hitTool.call('createButton_reactionTriggered')
									hitTool.call('createButton_resolve_attack')
								end
							end
							checkReactions() ]]
						end -- end if has parry / else if not has parry

					-- miss Results
					else
						die.setColorTint({0.1, 0.1, 0.1}) -- set color to miss color

						hasAcidToothDagger = false
						hasAxeProf = false
						--hasDaggerProf = false
						for _, obj in ipairs(zone_drawnHit.getObjects()) do
							if obj.getName() == "Acid-Tooth Dagger" then
								hasAcidToothDagger = true
								broadcastToAll("Acid-Tooth Dagger ~ You may make this wound attempt succeed", msg_color)
							elseif obj.getName() == "Axe" then
								hasAxeProf = true
								broadcastToAll("Axe Proficiency ~ You may attempt to wound this Location again", msg_color)
							--[[elseif obj.getName() == "Dagger" then
								hasDaggerProf = true
								broadcastToAll("Dagger Proficiency", msg_color)]]
							end
						end

						if hasAcidToothDagger or hasAxeProf then return end

						--hasWound_Reaction = false
						cancel_reactions_katar_proficiency()
						hitLocationFailureEffects()
						hitLocation_ReflexEffect()
						--[[if hasFailure_Reaction or hasReflex_Reaction then
							local bool = checkCancelled(hasCancelled)
							if not bool then
								hitTool.call('createButton_survival_Opportunity')
								hitTool.call('createButton_reactionTriggered')
								hitTool.call('createButton_resolve_attack')
							end
						end]]

						--checkReactions()
					end -- end if crit, elseif wound, else miss
				end -- if hit then > else if wound then
			end  -- end if die then
		end -- end for loop for (spawnedDice)
		startLuaCoroutine(self, "spawn_tok_coR")
	end -- end if sharp then > else

	-- messages
	sharpValue = 0
	cannot_cancel_reaction = false

	if hasSpinningHalberd and hasRanged then
		broadcastToAll("Spinning Halberd ~ The King's Man ignores hit and effects from Ranged Gear", msg_color)
		hasSpinningHalberd = false
		hasRanged = false
	end

	if hasRed and red_lens_open then
		broadcastToAll("You have a Red Aura ~ Your attacks only it on Perfect Hits", msg_color)
	end
	if hasGreen and green_lens_open then
		broadcastToAll("You have a Green Aura ~ Your attacks only it on Perfect Hits", msg_color)
	end
	if hasBlue and blue_lens_open then
		broadcastToAll("You have a Blue Aura ~ Your attacks only it on Perfect Hits", msg_color)
	end

	if (hasEarlyIron and value == 1) then
		broadcastToAll("Early Iron! Cancel any Hits and End your Attack", msg_color)
	end

	if (hasUnwiedly and value == 1) then
		broadcastToAll("Unwiedly: You deal 1 Damage to yourself", msg_color)
	end

	if (reroll and value == 1) then
		broadcastToAll("Rainbow Wing Belt: You may re-roll any 1's", msg_color)
	end

	if unrelenting_triggered then
		broadcastToAll("Unrelenting: You may spend 1 Survival to re-roll all Attack Rolls", msg_color)
	end

	msg_color = grid.getTable("msg_color")
	color = grid.getVar("color")
	local msg_color = {color = msg_color}
	Global.setTable("broadcast_msg_color", msg_color)

	if hit then
		startLuaCoroutine(Global, "printHit")
	else
		if not hasAcidToothDagger or not hasFailure_reaction then
			startLuaCoroutine(Global, "printWound")
		end
		startLuaCoroutine(Global, "printReflex")
	end
end -- function checkResults()

function check_discard_onPerfectHit()
	for _, card in ipairs(zoneInjuryBoard.getObjects()) do
		if card.getName() == "Lantern Mirage" then
			Global.call('addBroadcast', {"perfecthit", {gear = "Discard Lantern Mirage for Survivor scoring a Perfect Hit!", effect = ""}})
		end
	end
end

function when_monster_suffers_critical_wound()
	for _, card in ipairs(zoneInjuryBoard.getObjects()) do
		if card.getName() == "Cudgel" then
			Global.call('addBroadcast', {"perfecthit", {gear = "Discard Cudgel for Survivor scoring a Critical Wound", effect = ""}})
		end
	end
end

function reRoll_Misses()
	removeButtons_BowProf_Reroll()
	if red_attacked then
		color = "Red"
		ClickedRoll(color)
	elseif yellow_attacked then
		color = "Yellow"
		ClickedRoll(color)
	elseif green_attacked then
		color = "Green"
		ClickedRoll(color)
	elseif blue_attacked then
		color = "Blue"
		ClickedRoll(color)
	end
end

function check_hasSavage(hasSavage)
	hasSavage = false
	for _, obj in ipairs(zone_drawnHit.getObjects()) do
		if string.find(obj.getDescription(), "savage") then
			hasSavage = true
			obj.setLock(false)
			obj.setRotation({0, 180, 0})
			obj.setPosition({-3.67, 5, -2.49})
		end
	end
	return hasSavage
end

function cancel_reactions_katar_proficiency()
	-- Cancel Reactions on First Hit Location with Katar Proficiency
	for _, obj in ipairs(zone_drawnHit.getObjects()) do
		if obj.getName() == "Katar" then
			hasWound_Reaction = false
			hasReflex_Reaction = false
			hasFailure_Reaction = false
			if obj ~= nil then
				obj.destroy()
			end
		end
	end
end

function removeButtons_BowProf_Reroll()
	local btns = self.getButtons()
	for i, v in pairs(btns) do
		if v.label == "Yes" or v.label == "No" then
			self.removeButton(v.index)
		end
	end
end

function sharpMessageDelay()
	wait(1.2)
	broadcastToAll("Wound Attempt is rolling now", msg_color)
	return 1
end

-- When the Monster Suffers a Wound
function when_monster_suffers_wound()
	for _, card in ipairs(zoneInjuryBoard.getObjects()) do
		local rotZ = card.getRotation().z

			-- Challenge
		if string.find(card.getName(), "Challenge") then
			Global.call("addBroadcast", {"wound", {gear = "Archive Challenge ~ Instead of Wounding", effect = "" }})

			-- Cocoon
		elseif card.getName() == "Cocoon" then
			card.setPositionSmooth({-1.24, 5.31, -2.48})
			Global.call("addBroadcast", {"wound", {gear = "Cocoon Discarded", effect = "" }})

			-- Embrace the Pain
		elseif card.getName() == "Embrace the Pain" then
			for _, board in ipairs(zoneInjuryBoard.getObjects()) do
				if board.getName() == "The Butcher" then
					board.call("add")
				end
			end
			Global.call("addBroadcast", {"wound", {gear = "Embrace the Pain ~ Token Placed for Wound", effect = "" }})

			-- Thunderfoot
		elseif card.getName() == "Thunder Foot" then
			card.setPositionSmooth({-1.24, 5.31, -2.48})
			Global.call("addBroadcast", {"wound", {gear = "Thunder Foot Discarded", effect = "" }})
		end

		-- Red Lens
		if card.getName() == "Red Lens" and rotZ < 10 or rotZ > 350 then
			if hasRed and not hasWhite then
				print(hasWhite)
				print("hasWhite")
				card.flip()
				Global.call("addBroadcast", {"wound", {gear = "You have a Red Aura ~ Red Lens flipped Open", effect = "" }})
			end
		end
		-- Green Lens
		if card.getName() == "Green Lens" and rotZ < 10 or rotZ > 350 then
			if hasGreen and not hasWhite then
				card.flip()
				Global.call("addBroadcast", {"wound", {gear = "You have a Green Aura ~ Green Lens flipped Open", effect = "" }})
			end
		end
		-- Blue Lens
		if card.getName() == "Blue Lens" and rotZ < 10 or rotZ > 350 then
			if hasBlue and not hasWhite then
				card.flip()
				Global.call("addBroadcast", {"wound", {gear = "You have a Blue Aura ~ Blue Lens flipped Open", effect = "" }})
				broadcastToAll("You have a Blue Aura ~ Blue Lens flipped Open", msg_color)
			end
		end

	end
	if hasWhite then
		Global.call("addBroadcast", {"wound", {gear = "You have a White Aura ~ Choose a Lens to Flip Open", effect = "" }})
	end
end


-- Hit, Perfect Hit, Wound, Critical Wound Card Effects
function woundEffects()

	-- Variables
	grid.call("checkWeapon")
	weaponGUID = grid.getVar("weaponGUID")
	PlayerName = grid.getVar("PlayerName")

	local pos = physics_wound_queue.getPosition()
	local clone_pos = {pos.x, pos.y + 0.27, pos.z - 0.15}

	for _, obj in ipairs(objectsInZone) do
		local obj_pos = obj.getPosition()
		local desc = obj.getDescription()

			-- Abyssal Sadist
		if obj.getName() == "Abyssal Sadist" then
			if not string.find(desc, "once per attack used") then
				local clone = obj.clone({position = obj_pos})
				clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_standard)
				changeSurvivors("insanity", 1, grid)
				changeSurvivors("survival", 1, grid)
				Global.call('addBroadcast', {"wound", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You gained (+1) Survival and (+1) Insanity"}})
				obj.setDescription(desc .. ", once per attack used")
			end
		end

			-- Death Touch
		if obj.getName() == "Death Touch" then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_standard)
			local obj = getObjectFromGUID(Global.getTable('tokSpawn').neg_tgh.guid)
			local var = "endOfattack"
			obj.getVar("phase")
			obj.setVar("phase", var)
			obj.call("spawn_token")
			Global.call('addBroadcast', {"wound", {gear = "◈ " .. obj.getName() .. " �����", effect = "The Monster gained (-1) Toughness until the end of your attack"}})
		end

			-- The Weaver
		if obj.getName() == "The Weaver" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			Global.call('addBroadcast', {"wound", {gear = "◈ " .. obj.getName() .. " ◈", effect = "Add 1 Armor Point to a random Hit Location"}})
		end

		-- Grinning Visage
		if obj.getName() == "Grinning Visage" and obj.getGUID() == weaponGUID then
			if not string.find(desc, "once per attack used") then
				local clone = obj.clone({position = obj_pos})
				clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
				Global.call('addBroadcast', {"wound", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You may Spend 1 Survival to Add 1 Armor to all Hit Locations"}})
				obj.setDescription(desc .. ", once per attack used")
			end
		end

		-- Ignis Fatuus
		if obj.getName() == "Ignis Fatuus" and obj.getRotation().z > 165 then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			Global.call('addBroadcast', {"wound", {gear = sigil .. "  " .. obj.getName() .. "  " .. sigil, effect = "You may look at the top 4 cards of the Hit Location deck and put them back in any order "}})
		end

			-- Amber Edge
		if obj.getName() == "Amber Edge" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			Global.call('addBroadcast', {"wound", {gear = "◈ " .. obj.getName() .. " ◈", effect = "Amber Edge ~ At the end of your Attack Triggered "}})
		end

			-- Prism Mace
		if obj.getName() == "Prism Mace" and obj.getGUID() == weaponGUID then
			for _, tok in ipairs(objectsInZone) do
				if tok.getName() == "Strength" and string.find(tok.getDescription(), "plus1str") then
					local clone = obj.clone({position = obj_pos})
					clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
					Global.call('addBroadcast', {"wound", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You may Discard a Mood in Play and Block 1 For Free"}})
				end
			end
		end

			-- Griswaldo
		if obj.getName() == "Griswaldo" and obj.getGUID() == weaponGUID then
			Global.call('addBroadcast', {"wound", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You may Block 2 for Free"}})
		end

			-- Beast Knuckle
		if obj.getName() == "Beast Knuckle" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			local obj = getObjectFromGUID(Global.getTable('tokSpawn').neg_tgh.guid)
			local var = "endOfattack"
			obj.getVar("phase")
			obj.setVar("phase", var)
			obj.call("spawn_token")
			Global.call('addBroadcast', {"wound", {gear = "◈ " .. obj.getName() .. " ◈", effect = "The Monster gained (-1) Toughness until the end of your attack"}})
		end

			-- Rawhide Whip
		if obj.getName() == "Rawhide Whip" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			hasLanternFrenzy = false
			for _, card in ipairs(zoneInjuryBoard.getObjects()) do
				if card.getName() == "Lantern Frenzy" then
					hasLanternFrenzy = true
				end
			end
			if not hasLanternFrenzy then
				hasPriority = false
				for _, tok in ipairs(zoneShowdown.getObjects()) do
					if tok.getName() == "Priority Target" then
						hasPriority = true
						priority_target = tok
					end
				end
				for _, surv in ipairs(zoneShowdown.getObjects()) do
					if surv.getName() == PlayerName then
						local pos = surv.getPosition()
						if hasPriority then
							surv.translate({0,2,0})
							priority_target.setPosition(pos)
						else
							local obj = getObjectFromGUID('3bc58d')
							local objPos = obj.getPosition()
							local priority_target = obj.clone({position = objPos})
							surv.translate({0,2,0})
							priority_target.setPosition(pos)
						end
						Global.call('addBroadcast', {"wound", {gear = "Provoke: You gained the Priority Target Token", effect = ""}})
						break
					end
				end
			end
			if hasLanternFrenzy then
				Global.call('addBroadcast', {"wound", {gear = " Lantern Frenzy ~ A Survivor already has the Priority Target", effect = "You cannot gain it"}})
			end
		end

			-- Whip Proficiency
		if hasWhipProf then
			if string.find(obj.getDescription(), "whip") and obj.getGUID() == weaponGUID then
				Global.call('addBroadcast', {"wound", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You may move the top AI Discard to Wound Stack"}})
			end
		end

	end -- end for loop
	startLuaCoroutine(self, "display_cards_triggered_coR")
end -- end function


function stack_beforeWound_effects()
	-- Variables
	grid.call("checkWeapon")
	weaponGUID = grid.getVar("weaponGUID")
	--PlayerName = grid.getVar("PlayerName")

	local pos = physics_wound_queue.getPosition()
	local clone_pos = {pos.x, pos.y + 0.27, pos.z - 0.15}
	local clone_rotation = {20, 180, 180}

	hasAxe_forProf = false
	hasBow_forProf = false
	hasDagger_forProf = false
	hasKatar_forProf = false
	hasSpear_forProf = false
	for _, obj in ipairs(zone.getObjects()) do
		if string.find(obj.getDescription(), "axe") and obj.getGUID() == weaponGUID then
			hasAxe_forProf = true
		end
		if string.find(obj.getDescription(), "bow") and obj.getGUID() == weaponGUID then
			hasBow_forProf = true
		end
		if string.find(obj.getDescription(), "dagger") and obj.getGUID() == weaponGUID then
			hasDagger_forProf = true
		end
		if string.find(obj.getDescription(), "katar") and obj.getGUID() == weaponGUID then
			hasKatar_forProf = true
		end
		if string.find(obj.getDescription(), "spear") and obj.getGUID() == weaponGUID then
			hasSpear_forProf = true
		end
	end

	for _, obj in ipairs(zone.getObjects()) do
		local obj_pos = obj.getPosition()
		local desc = obj.getDescription()

		-- Axe Proficiency
		if obj.getName() == "Axe" then
			if hasAxe_forProf then
				local clone = obj.clone({position = obj_pos})
				clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rotation) ; clone.setScale(clone_scale_standard)
			end
		end

		-- Dagger Proficiency
		if obj.getName() == "Dagger" then
			if hasDagger_forProf then
				local clone = obj.clone({position = obj_pos})
				clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rotation); clone.setScale(clone_scale_standard)
			end
		end

		if obj.getGUID() == weaponGUID and string.find(desc, "savage") then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
		elseif obj.getGUID() == weaponGUID and string.find(desc, "devastating1") then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
		elseif obj.getGUID() == weaponGUID and string.find(desc, "devastating2") then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
		end

	end

	-- Stack after roll to hit
	local pos = physics_hit_queue.getPosition()
	local clone_pos = {pos.x, pos.y + 0.27, pos.z - 0.15}
	for _, obj in ipairs(zone.getObjects()) do
		local obj_pos = obj.getPosition()
		local desc = obj.getDescription()

		-- Bow Proficiency
		if obj.getName() == "Bow" then
			if hasBow_forProf then
				local clone = obj.clone({position = obj_pos})
				clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rotation) ; clone.setScale(clone_scale_standard)
			end
		end

		-- Katar Proficiency
		if obj.getName() == "Katar" then
			if hasKatar_forProf then
				local clone = obj.clone({position = obj_pos})
				clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rotation) ; clone.setScale(clone_scale_standard)
			end
		end

		-- Spear Proficiency
		if obj.getName() == "Spear" then
			if hasSpear_forProf then
				local clone = obj.clone({position = obj_pos})
				clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rotation); clone.setScale(clone_scale_standard)
			end
		end
	end
end


function call_wound_results()
	if not hasParry then
		isWounded = true
		hasFailure_Reaction = false
		--die.setColorTint({0.856, 0.1, 0.094}) -- set color to wound color

		if cannotCrit then
			if unlucky then
				broadcastToAll("Unlucky ~ You cannot Critically Wound!", msg_color)
			end
			if needsAxe then
				broadcastToAll("The Lonely Tree can only be Critically Wounded by Axes!", msg_color)
			end
		end

		if hasWound_Reaction or hasReflex_Reaction then
			local bool = checkCancelled(hasCancelled)
			if not bool then
				hitTool.call('createButton_survival_Opportunity')
				hitTool.call('createButton_reactionTriggered')
				hitTool.call('createButton_resolve_attack')
			end
		end

		woundEffects()
		--checkReactions()
		when_monster_suffers_wound()
		startLuaCoroutine(Global, "printWound")

	else -- if hasParry then
		broadcastToAll("Parry ~ Wound Attempts on this location fail unless the wound roll result is Critical", {1,1,1})
		hasWound_Reaction = false
		isWounded = false
		--die.setColorTint({0.1, 0.1, 0.1}) -- set color to miss color

		if hasFailure_Reaction or hasReflex_Reaction then
			local bool = checkCancelled(hasCancelled)
			if not bool then
				hitTool.call('createButton_survival_Opportunity')
				hitTool.call('createButton_reactionTriggered')
				hitTool.call('createButton_resolve_attack')
			end
		end

		--[[if hasAxe and hasAxeProf then
			broadcastToAll("Axe Proficiency ~ You may attempt to wound this Location again (Limit Once)", msg_color)
		end]]
		reset_display_stack_queue()
		--checkReactions()
	end -- end if has parry / else if not has parry
end

function call_failure_results()
	hasWound_Reaction = false

	if hasFailure_Reaction or hasReflex_Reaction then
		local bool = checkCancelled(hasCancelled)
		if not bool then
			hitTool.call('createButton_survival_Opportunity')
			hitTool.call('createButton_reactionTriggered')
			hitTool.call('createButton_resolve_attack')
		end
	end
	--[[if hasAxe and hasAxeProf then
		broadcastToAll("Axe Proficiency ~ You may attempt to wound this Location again (Limit Once)", msg_color)
	end]]
	reset_display_stack_queue()
	--checkReactions()
end

function hitEffects()
	-- Variables
	grid.call("checkWeapon")
	weaponGUID = grid.getVar("weaponGUID")

	local pos = physics_hit_queue.getPosition()
	local clone_pos = {pos.x, pos.y + 0.27, pos.z - 0.15}
	--local clone_rot = {20, 180, 0.00} ;
	--clone_scale_gear = {0.47, 1.00, 0.47} ; clone_scale_standard = {0.67, 1.00, 0.67}

	for _, obj in ipairs(objectsInZone) do
		local obj_pos = obj.getPosition()

		if obj.getName() == "Claw Head Arrow" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			local obj = getObjectFromGUID(Global.getTable('tokSpawn').neg_eva.guid)
			local var = ""
			obj.getVar("phase")
			obj.setVar("phase", var)
			obj.call("spawn_token")
			Global.call('addBroadcast', {"hit", {gear = "       The Monster gained a (-1) Evasion Token        ", effect = ""}})
			break
		end

		if obj.getName() == "Hollowpoint Arrow" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			local obj = getObjectFromGUID(Global.getTable('tokSpawn').neg_mov.guid)
			local var = ""
			obj.getVar("phase")
			obj.setVar("phase", var)
			obj.call("spawn_token")
			Global.call('addBroadcast', {"hit", {gear = "       The Monster gained a (-1) Movement Token       ", effect = ""}})
			break
		end

		if obj.getName() == "Dragon Chakram" and obj.getGUID() == weaponGUID then
			if not string.find(obj.getDescription(), "once per round used") then
				local clone = obj.clone({position = obj_pos})
				clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
				local obj = getObjectFromGUID(Global.getTable('tokSpawn').neg_eva.guid)
				local var = "endOfround"
				obj.getVar("phase")
				obj.setVar("phase", var)
				obj.call("spawn_token")
				Global.call('addBroadcast', {"hit", {gear = "       The Monster gained a (-1) Evasion Token        ", effect = ""}})
				obj.setDescription(obj.getDescription() .. ", once per round used")
			end
		end

	end
end

function critEffects()
	-- Show Survival Window
	hitTool.call("createButton_survival_Opportunity")

	-- Variables
	grid.call("checkWeapon")
	weaponGUID = grid.getVar("weaponGUID")

	local pos = physics_wound_queue.getPosition()
	local clone_pos = {pos.x, pos.y + 0.27, pos.z - 0.15}

	--clone_scale_gear = {0.47, 1.00, 0.47} ; clone_scale_standard = {0.67, 1.00, 0.67}

	if hasAxe_vs_persistentInjury then
		Global.call('addBroadcast', {"crit", {gear = "     Axe Mastery ~ Critical vs Persistent Injury      ", effect = ""}})
	end

	for _, obj in ipairs(objectsInZone) do
		local obj_pos = obj.getPosition()

			-- Riot Mace
		if obj.getName() == "Riot Mace" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			obj.setScale({0.47, 1.00, 0.47})
			obj.clone({position = { - 3.68, 4.46, - 2.50}})
			obj.setScale({0.69, 1.00, 0.69})
			Global.call("addBroadcast", {"crit", {gear = "  Riot Mace ~ Monster Performs Basic Action Instead of AI   ", effect = "" }})
		end

			-- Muramasa
		if obj.getName() == "Muramasa" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			Global.call("addBroadcast", {"crit", {gear = "                 Gain 2 Bleeding Tokens               ", effect = "" }})
		end

			-- Grand Weapon Proficiency
		if obj.getName() == "Grand Weapon" and hasGrandWeapon then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_standard)
			Global.call('addBroadcast', {"crit", {gear = "              If it is your Act ~ The Monster is Knocked Down!           ", effect = ""}})
		end
	end
	startLuaCoroutine(self, "display_cards_triggered_coR")
end

-- Call Hit Location Wound, Critical Wound, Failure Reaction Effects
function hitLocationCriticalWoundEffects()

	if hasNoCrit then
		obj.setPositionSmooth({6.16, 5, - 2.46}, false, false)
	end

	if not hasNoCrit then
		--hitTool.call('removeButton_ReactionTriggered')
		hitTool.call('createButton_survival_Opportunity')

		local hitTable = hitTool.getTable('hitLocation')
		for k, v in ipairs(hitTable) do
			obj = getObjectFromGUID(v)
			obj.setLock(false)
			obj.setRotationSmooth({0, 180, 0})
			if not string.find(obj.getDescription(), "persistent injury") then
				obj.setPositionSmooth({6.16, 5, - 2.46}, false, false)
			end
			obj.call("criticalWoundEffect")
		end

		-- Segmented Abdomen
		for _, card in ipairs(zoneInjuryBoard.getObjects()) do
			if card.getName() == "Segmented Abdomen" then
				Global.call('addBroadcast', {"crit", {gear = "Segmented Abdomen ~ Spidicules gained a (-1) Toughness Token", effect = ""}})
				local obj = getObjectFromGUID(Global.getTable('tokSpawn').neg_tgh.guid)
				local var = ""
				obj.getVar("phase")
				obj.setVar("phase", var)
				obj.call("spawn_token")
			end
		end
	end
end

function perfectHit()
	-- Variables
	grid.call("checkWeapon")
	weaponGUID = grid.getVar("weaponGUID")
	hasSteelSword_PerfectHit = false


	local pos = physics_hit_queue.getPosition()
	local clone_pos = {pos.x, pos.y + 0.27, pos.z - 0.15}

	for _, obj in ipairs(objectsInZone) do
		local obj_pos = obj.getPosition()
		local rotZ = obj.getRotation().z

			-- Acid Tooth Dagger
		if obj.getName() == "Acid-Tooth Dagger" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "A Wound attempt in this attack automatically succeeds"}})

		-- Bone Dagger
		elseif obj.getName() == "Bone Dagger" then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			changeSurvivors("survival", 1, grid)
			Global.call('addBroadcast', {"perfecthit", {gear = sigil .. "  " .. obj.getName() .. "  " .. sigil, effect = "You gained (+1) Survival"}})

			-- Cat Fang Kinfe
		elseif obj.getName() == "Cat Fang Knife" and obj.getGUID() == weaponGUID then
			if rotZ > 165 and rotZ < 195 then
				local clone = obj.clone({position = obj_pos})
				clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
				table.insert(list, {color = color, stat = "str", modifier = "pos", num = 1, phase = nil})
				Global.setTable('temp', stats)
				Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You gained (+1) Strength Token"}})
			end

			-- Combo Master
		elseif obj.getName() == "Combo Master" then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_standard)
			Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "Make 1 Additional Attack Roll"}})

			-- Crazed
		elseif obj.getName() == "Crazed" then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_standard)
			changeSurvivors("insanity", 1, grid)
			Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You gained (+1) Insanity"}})
			--Global.call('addBroadcast', {"perfecthit", {gear = "                You gained (+1) Insanity              ", effect = ""}})

			-- Death Mehndi
		elseif obj.getName() == "Death Mehndi" then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			changeSurvivors("insanity", 10, grid)
			Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You gained (+10) Insanity"}})

			-- Katar Proficiency
		elseif string.find(obj.getDescription(), "katar") and obj.getGUID() == weaponGUID then
			for _, prof in pairs(objectsInZone) do
				if prof.getName() == "Katar" and (rotZ > 350 or rotZ < 10) then
					local clone = obj.clone({position = obj_pos})
					clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_standard)
					table.insert(list, {color = color, stat = "eva", modifier = "pos", num = 1, phase = nil})
					Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You gained a (+1) Evasion Token"}})
				end
			end

			-- Katana Proficiency
		elseif string.find(obj.getDescription(), "katana") and obj.getGUID() == weaponGUID then
			for _, prof in pairs(objectsInZone) do
				if prof.getName() "Katana" then
					local clone = obj.clone({position = obj_pos})
					clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_standard)
					Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "Do not draw Hit Locations ~ Monster Suffers a wound"}})
				end
			end

			-- Lion Knight's Right Claw
		elseif obj.getName() == "Lion Knight's Right Claw" and obj.getGUID() == weaponGUID then
			if rotZ > 165 and rotZ < 195 then
				local clone = obj.clone({position = obj_pos})
				clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
				changeSurvivors("survival", 1, grid)
				Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You gained (+1) Survival"}})
			end

			-- Mighty Strike
		elseif obj.getName() == "Mighty Strike" then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_standard)
			table.insert(list, {color = color, stat = "str", modifier = "pos", num = 2, phase = "endOfattack"})
			Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You gained (+2) Strength until the End of the Attack"}})

			-- Steel Sword
		elseif obj.getName() == "Steel Sword" and obj.getGUID() == weaponGUID then
			hasSteelSword_PerfectHit = true
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You gained (+1d10) Strength for the rest of the attack"}})

			-- Sunring Bow
		elseif obj.getName() == "Sunring Bow" and obj.getGUID() == weaponGUID then
			if rotZ > 165 and rotZ < 195 then
				local clone = obj.clone({position = obj_pos})
				clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
				Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "Do not draw a hit location ~ Monster Suffers a wound"}})
			end

			-- Suppressed Shadow
		elseif obj.getName() == "Suppressed Shadow" then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_standard)
			Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = ""}})

			-- Thunder Maul
		elseif obj.getName() == "Thunder Maul" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "Thunder Maul triggered"}})

			-- Black sword
		elseif obj.getName() == "Black Sword" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			changeSurvivors("survival", 1, grid)
			Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You gained (+1) Survival"}})

			-- Silk whip
		elseif obj.getName() == "Silk Whip" and obj.getGUID() == weaponGUID then
			if rotZ > 165 and rotZ < 195 then
				local clone = obj.clone({position = obj_pos})
				clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
				Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "Instead of drawing a hit location, you may archive a Mood in play"}})
			end

			-- Throwing Knife
		elseif obj.getName() == "Throwing Knife" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			table.insert(list, {color = color, stat = "acc", modifier = "pos", num = 1, phase = nil})
			Global.setTable('temp', stats)
			Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You gained a (+1) Accuracy Token"}})

			-- Hunter Whip
		elseif obj.getName() == "Hunter Whip" and obj.getGUID() == weaponGUID then
			if rotZ > 165 and rotZ < 195 then
				local clone = obj.clone({position = obj_pos})
				clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
				Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "Discard 1 Mood in play "}})
			end

			-- Hollow Sword
		elseif obj.getName() == "Hollow Sword" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ���", effect = "Make 1 Additional Attack Roll"}})

			-- Sonic Tomahawk
		elseif obj.getName() == "Sonic Tomahawk" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "Make 1 Additional Attack Roll "}})

			-- Counterweighted Axe
		elseif obj.getName() == "Counterweighted Axe" and obj.getGUID() == weaponGUID then
			if rotZ > 165 and rotZ < 195 then
				local clone = obj.clone({position = obj_pos})
				clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
				Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "Do Not Draw a Hit Location ~ Monster suffers a Wound"}})
			end

			-- Scrap Dagger
		elseif obj.getName() == "Scrap Dagger" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			table.insert(list, {color = color, stat = "str", modifier = "pos", num = 2, phase = "endOfattack"})
			Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You gained (+2) Strength until the end of your attack"}})

			-- Scrap Sword
		elseif obj.getName() == "Scrap Sword" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			table.insert(list, {color = color, stat = "str", modifier = "pos", num = 4, phase = "endOfattack"})
			Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You gained (+4) Strength until the end of your attack"}})

			-- Skullcap Hammer
		elseif obj.getName() == "Skullcap Hammer" and obj.getGUID() == weaponGUID then
			local isDazed = token_knockdown_monster.getVar("isDazed")
			if not isDazed then
				local clone = obj.clone({position = obj_pos})
				clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
				skullcap_hammer_daze()
				Global.call("addBroadcast", {"perfecthit", {gear = "◈  Skullcap Hammer  ◈", effect = "Monster gained a (-1) Speed Token until the end of its next turn" }})
			end

			-- Whistling Mace
		elseif obj.getName() == "Whistling Mace" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "Reveal the next AI Card ~ You may put it on the Bottom "}})

			-- Twelve Fingers
		elseif obj.getName() == "Twelve Fingers" then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_standard)
			table.insert(list, {color = color, stat = "lck", modifier = "pos", num = 1, phase = "endOfattack"})
			changeSurvivors("insanity", 5, grid)
			Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You gained (+5) Insanity and a (+1) Luck until the End of your Attack"}})

			-- Skleaver
		elseif obj.getName() == "Skleaver" and obj.getGUID() == weaponGUID then
			local clone = obj.clone({position = obj_pos})
			clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
			Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "This attack gains Devastating 1 until the end of your attack"}})

			-- Oxidized Lantern Glaive
		elseif obj.getName() == "Oxidized Lantern Glaive" and obj.getGUID() == weaponGUID then
			if rotZ > 165 and rotZ < 195 then
				local clone = obj.clone({position = obj_pos})
				clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_gear)
				table.insert(list, {color = color, stat = "str", modifier = "pos", num = 4, phase = "endOfattack"})
				Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " ◈", effect = "You gained (+4) Strength until the end of your attack"}})
			end

		elseif string.find(obj.getDescription(), "club") and obj.getGUID() == weaponGUID then
			if hasClubProf or hasClubMastery then
				Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " Proficiency ◈", effect = "Your wound attempt will be doubled on first selected Hit Location"}})
				hasDoubleWoundAttempt = true
			end

		end

		-- Grand Weapon Mastery
		if hasGrandMastery and hasGrandWeapon then
			if obj.getName() == "Grand Weapon" and obj.getRotation().z < 165 then
				local clone = obj.clone({position = obj_pos})
				clone.setLock(true) ; clone.setPosition(clone_pos) ; clone.setRotation(clone_rot) ; clone.setScale(clone_scale_standard)
				hitTool.call("reactionsCancelled")
				Global.call('addBroadcast', {"perfecthit", {gear = "◈ " .. obj.getName() .. " Proficiency ◈", effect = "Reactions Cancelled for the rest of your Attack"}})
			end
		end

	end -- end for loop
	--startLuaCoroutine(self, "spawn_tok_coR")
end

list = {}

function spawn_tok_coR()
	for k, v in ipairs(list) do
		local stats = v
		local wait_time = stats.num * 0.25 + 0.50
		Global.setTable('temp', stats)
		startLuaCoroutine(Global, "spwn_tok")
		wait(wait_time)
	end
	list = {}
	return 1
end

function skullcap_hammer_daze()
	for _, token in ipairs(zoneAIBoard.getObjects()) do
		if string.find(token.getDescription(), "skullcap hammer") then return end
	end
	local obj = getObjectFromGUID(Global.getTable('tokSpawn').neg_spd.guid)
	local var = "skullcapHammer"
	obj.getVar("phase")
	obj.setVar("phase", var)
	obj.call("spawn_token")
	local isDazed = token_knockdown_monster.getVar("isDazed")
	token_knockdown_monster.setVar("isDazed", true)
end


function display_cards_triggered_coR()
	wait(0.50)
	display_table_gear = {}
	display_table_standard = {}

	if hit then
		phys_obj_pos = physics_hit_queue.getPosition()
	else
		phys_obj_pos = physics_wound_queue.getPosition()
	end

	local hitList = Physics.cast({
		origin			= {phys_obj_pos.x, phys_obj_pos.y, phys_obj_pos.z},
		direction		= {0,1,0},
		type				= 2,
		size				= {2,2,2},
		max_distance 	= 0,
	})

	for _, entry in ipairs(hitList) do
		if string.find(entry.hit_object.getDescription(), "gear") then
			table.insert(display_table_gear, entry.hit_object.guid)
			local script = entry.hit_object.getLuaScript()
			if script ~= nil then
				if string.find(script, "createButtons") then
					entry.hit_object.call("createButtons")
				end
			end
		end

		if entry.hit_object.tag == "Card" and not string.find(entry.hit_object.getDescription(), "gear") then
			table.insert(display_table_standard, entry.hit_object.guid)
			local script = entry.hit_object.getLuaScript()
			if script ~= nil then
				if string.find(script, "createButtons") then
					entry.hit_object.call("createButtons")
				end
			end
		end
	end

	posX_gear = -9.02
	posX_standard = -9.77
	posY = 4.55
	posZ_gear = -5.51
	posZ_standard = -7.43

	for k, v in ipairs(display_table_gear) do
		local obj = getObjectFromGUID(v)
		wait(0.10)
		obj.setPositionSmooth({posX_gear, posY, posZ_gear})
		if hit then
			posX_gear = posX_gear - 0.77
		else
			posX_gear = posX_gear - 1.54
		end
	end

	for k, v in ipairs(display_table_standard) do
		local obj = getObjectFromGUID(v)
		wait(0.10)
		obj.setPositionSmooth({posX_standard, posY, posZ_standard})
		if hit then
			posX_standard = posX_standard - 0.77
		else
			posX_standard = posX_standard - 1.54
		end
	end

	display_table_gear = {}
	display_table_standard = {}

	return 1
end
-- RIGHT ROLLER ONLY
--[[function checkReactions()
	local bool = checkCancelled(hasCancelled)

	local hitTable = hitTool.getTable('hitLocation')
	for k, v in ipairs(hitTable) do
		obj = getObjectFromGUID(v)

		if not (hasWound_Reaction or hasFailure_Reaction or hasReflex_Reaction) then
			obj.setLock(false)
			obj.setRotationSmooth({0, 180, 0}, false, true)
			obj.setPositionSmooth({6.16, 5, - 2.46}, false, false)
		end

		if not bool then -- if reactions are NOT cancelled

			if (hasWound_Reaction or hasFailure_Reaction or hasReflex_Reaction) then
				obj.setLock(false)
				obj.setRotationSmooth({0, 180, 0}, false, true)
				for _, tok in ipairs(zoneAIBoard.getObjects()) do
					if string.find(tok.getDescription(), "endOfwoundattempt") then
						if tok ~= nil then
							tok.destroy()
						end
					end
				end
			end

			if isWounded and hasFailure_Reaction and not hasWound_Reaction then
				obj.setPositionSmooth({6.16, 5, - 2.46}, false, false)
			end

			-- Create Reaction Overlays
			-- Eye of the Storm
			if hasWound_Reaction and hasEyeOfTheStorm then
				for _, obj in ipairs(zoneShowdown.getObjects()) do
					if obj.getName() == "Phoenix" then
						obj.call("overlay_eyeOfTheStorm")
					end
				end
			end

			-- Retch
			if hasRetch and (hasWound_Reaction or hasFailure_Reaction) then
				for _, obj in ipairs(zoneShowdown.getObjects()) do
					if obj.getName() == "Gorm" then
						obj.call("overlay_retch")
					end
				end
			end

		else -- else if reactions are cancelled
			obj.setLock(false)
			obj.setRotationSmooth({0, 180, 0})
			obj.setPositionSmooth({6.16, 5, - 2.46}, false, false)
		end
	end
	resetHitLocationTable()
	local btns = hitTool.getButtons()
	for i, v in pairs(btns) do
		if v.click_function == "nextWoundAttempt" then
			hitTool.removeButton(v.index)
		end
	end
end ]]

-- Reset 'Hit Location' Table
function resetHitLocationTable()
	local btns = hitTool.getButtons()
	reset_table = true
	for i, v in pairs(btns) do
		if v.label == "Finish Reaction" then
			reset_table = false
		end
	end
	if reset_table then
		local hitTable = hitTool.getTable('hitLocation')
		hitTool.setTable("hitLocation", {})
	end
end

function checkCancelled(hasCancelled)
	local btns = hitTool.getButtons()
	hasCancelled = false
	for i, v in pairs(btns) do
		if v.label == "Reactions Cancelled" then
			hasCancelled = true
		end
	end
	if cannot_cancel_reaction then
		hasCancelled = false
	end
	return hasCancelled
end

-- Utility Functions
function wait(time)
	local start = os.time()
	repeat
		coroutine.yield(0)
	until os.time() > start + time
end

function createOffset_gear()
	local i = 0
	return function ()
		i = i + 1.54
		return i
	end
end

function createOffset_standard()
	local i = 0
	return function ()
		i = i + 1.54
		return i
	end
end

-- Count Tokens in Zone
function count_tokens(token_count)
	-- Counts tokens for Calcified Juggernaut blade
	token_count = 0
	for _, v in pairs(zone.getObjects()) do
		if string.find(v.getDescription(), "token") then
			token_count = token_count + 1
		end
	end
	return token_count
end

function get_weapon_prof_level(weapon_prof_level)
	FullCharSheet = getObjectFromGUID(grid.getVar("FullCharSheetGUID"))
	local objbtns = FullCharSheet.getTable("buttons")
	weapon_prof_level = 0
	for i, v in pairs(objbtns) do
		prefix = string.sub(i, 1, 12)
		if prefix == "proficiency_" then
			if v.label ~= '' then
				weapon_prof_level = weapon_prof_level + 1
			end
		end
	end
	return weapon_prof_level
end

function reset_display_stack_queue()
	local pos = physics_wound_queue.getPosition()
	local wound_queue_pos = {pos.x, pos.y + 0.27, pos.z - 0.15}

	for _, obj in ipairs(zone_drawnHit.getObjects()) do
		if obj.getName() == "Acid-Tooth Dagger" then
			obj.setPosition(wound_queue_pos)
		elseif obj.getName() == "Axe" then
			obj.setPosition(wound_queue_pos)
		elseif obj.getName() == "Skleaver" then
			obj.setPosition(wound_queue_pos)
		elseif string.find(obj.getDescription(), "savage") then
			obj.setPosition(wound_queue_pos)
		elseif obj.getName() == "Katar" then
			obj.setPosition(obj.getPosition())
		elseif obj.getName() == "Dagger" then
			obj.setPosition(wound_queue_pos)
		else
			if obj.tag == "Card" and not string.find(obj.getDescription(), "hit location") then
				if obj ~= nil then
					obj.destroy()
				end
			end
		end
	end
end


function changeMonster(stats)
	local monsterBoard = getObjectFromGUID(Global.getTable("boards").boardMonster.guid)
	local buttons = monsterBoard.getTable("buttons")
	for i, v in pairs(stats) do
		buttons.counts[i] = v
	end
	monsterBoard.setTable("buttons", buttons)
	monsterBoard.call("updateDisplay")
end

-- Change Survivors Survival and Insanity
function changeSurvivors(location, amount, grid)
	obj = getObjectFromGUID(grid.getVar("FullCharSheetGUID"))
	obj.call("add", {location, amount})
end

-- Buttons

function createButtons()
	self.createButton({label = "", click_function = "dud", function_owner = self, position = { - 7, 0.1, 1}, rotation = {20, 180, 0}, width = 2000, height = 0, font_size = 0, color = buttonColor, font_color = {1, 1, 1}})
end




function createButtons_BowProf_Reroll()
	self.createButton({click_function = "reRoll_Misses", function_owner = self, label = "Yes",
	position = {16.3, 0.7, - 27}, rotation = {20, 180, 0}, width = 2000, height = 900, font_size = 800,
	color = {0, 0, 0}, font_color = {1, 1, 1}})

	self.createButton({click_function = "removeButtons_BowProf_Reroll", function_owner = self, label = "No",
	position = { - 4.3, 0.7, - 27}, rotation = {20, 180, 0}, width = 2000, height = 900, font_size = 800,
	color = {0, 0, 0}, font_color = {1, 1, 1}})
end

function woundButton1()
	self.createButton({label = "Wound", click_function = "woundClicked", function_owner = self,
	position = {25.9, 0.4, - 22.2}, rotation = {20, 180, 0}, width = 3600, height = 500, font_size = 400,
	color = buttonColor, font_color = {1, 1, 1}})
	local func = function(_, color) clickToWound(color) rolledHitLocation = 1 end
	self.setVar("woundClicked", func)
end

function woundButton2()
	self.createButton({label = "Wound", click_function = "woundClicked", function_owner = self,
	position = {35.8, 0.4, - 22.2}, rotation = {20, 180, 0}, width = 3600, height = 500, font_size = 400,
	color = buttonColor, font_color = {1, 1, 1}})
	local func = function(_, color) clickToWound(color) rolledHitLocation = 2 end
	self.setVar("woundClicked", func)
end

function woundButton3()
	self.createButton({label = "Wound", click_function = "woundClicked", function_owner = self,
	position = {45.8, 0.4, - 22.2}, rotation = {20, 180, 0}, width = 3600, height = 500, font_size = 400,
	color = buttonColor, font_color = {1, 1, 1}})
	local func = function(_, color) clickToWound(color) rolledHitLocation = 3 end
	self.setVar("woundClicked", func)
end

function woundButton4()
	self.createButton({label = "Wound", click_function = "woundClicked", function_owner = self,
	position = {55.4, 0.4, - 22.2}, rotation = {20, 180, 0}, width = 3600, height = 500, font_size = 400,
	color = buttonColor, font_color = {1, 1, 1}})
	local func = function(_, color) clickToWound(color) rolledHitLocation = 4 end
	self.setVar("woundClicked", func)
end

function woundButton5()
	self.createButton({label = "Wound", click_function = "woundClicked", function_owner = self,
	position = {65.6, 0.4, -22.2}, rotation = {20, 180, 0}, width = 3600, height = 500, font_size = 400,
	color = buttonColor, font_color = {1, 1, 1}})
	local func = function(_, color) clickToWound(color) rolledHitLocation = 5 end
	self.setVar("woundClicked", func)
end

function woundButton6()
	self.createButton({label = "Wound", click_function = "woundClicked", function_owner = self,
	position = {75.6, 0.4, -22.2}, rotation = {20, 180, 0}, width = 3600, height = 500, font_size = 400,
	color = buttonColor, font_color = {1, 1, 1}})
	local func = function(_, color) clickToWound(color) rolledHitLocation = 6 end
	self.setVar("woundClicked", func)
end

function woundButton7()
	self.createButton({label = "Wound", click_function = "woundClicked", function_owner = self,
	position = {85.2, 0.4, -22.2}, rotation = {20, 180, 0}, width = 3600, height = 500, font_size = 400,
	color = buttonColor, font_color = {1, 1, 1}})
	local func = function(_, color) clickToWound(color) rolledHitLocation = 7 end
	self.setVar("woundClicked", func)
end

function removeWoundButtons()
	--Remove Wound Button after use
	local buttons = self.getButtons()
	for i, v in pairs(buttons) do
		if v.label == "Wound" then
			self.removeButton(v.index)
		end
	end
end

-- LEFT DICE ROLLER ONLY
function hitLocationWoundEffects()
	local btns = hitTool.getButtons()
	if not cannot_cancel_reaction then
		for i, v in pairs(btns) do
			if v.label == "Reactions Cancelled" then
				return
			end
		end
	end
	local hitTable = hitTool.getTable('hitLocation')
	for k, v in ipairs(hitTable) do
		obj = getObjectFromGUID(v)
		local desc = obj.getDescription()

		-- Eye of the Storm
		if string.find(desc, 'eye of the storm') and string.find(desc, 'wound reaction') then
			for _, obj in ipairs(zoneShowdown.getObjects()) do
				if obj.getName() == "Phoenix" then
					obj.call("overlay_eyeOfTheStorm")
				end
			end
		end

		-- Retch
		local desc = obj.getDescription()
		if string.find(desc, 'retch') and string.find(desc, 'wound reaction') then
			for _, obj in ipairs(zoneShowdown.getObjects()) do
				if obj.getName() == "Gorm" then
					obj.call("overlay_retch")
				end
			end
		end

		obj.call("woundEffect")
		obj.setLock(false)
		obj.setRotationSmooth({0, 180, 0})
		obj.setPositionSmooth({6.16, 5, - 2.46}, false, false)
		startLuaCoroutine(Global, "printWoundReaction")
		Global.call("clearBroadcast")
	end
end

function hitLocationFailureEffects()
	local btns = hitTool.getButtons()
	if not cannot_cancel_reaction then
		for i, v in pairs(btns) do
			if v.label == "Reactions Cancelled" then
				return
			end
		end
	end
	local hitTable = hitTool.getTable('hitLocation')
	for k, v in ipairs(hitTable) do
		obj = getObjectFromGUID(v)
		local desc = obj.getDescription()

		-- Retch
		if string.find(desc, 'retch') and string.find(desc, 'failure reaction') then
			for _, obj in ipairs(zoneShowdown.getObjects()) do
				if obj.getName() == "Gorm" then
					obj.call("overlay_retch")
				end
			end
		end

		obj.call("failureEffect")
		obj.setLock(false)
		obj.setRotationSmooth({0, 180, 0})
		obj.setPositionSmooth({6.16, 5, - 2.46}, false, false)
		startLuaCoroutine(Global, "printFailure")
		Global.call("clearBroadcast")
	end
end

function hitLocation_ReflexEffect()
	local btns = hitTool.getButtons()
	if not cannot_cancel_reaction then
		for i, v in pairs(btns) do
			if v.label == "Reactions Cancelled" then
				return
			end
		end
	end
	local hitTable = hitTool.getTable('hitLocation')
	for k, v in ipairs(hitTable) do
		obj = getObjectFromGUID(v)
		obj.call("reflexEffect")
		obj.setLock(false)
		obj.setRotationSmooth({0, 180, 0})
		obj.setPositionSmooth({6.16, 5, - 2.46}, false, false)
		startLuaCoroutine(Global, "printReflex")
		Global.call("clearBroadcast")
	end
end

function get_courage_level()
	FullCharSheet = getObjectFromGUID(grid.getVar("FullCharSheetGUID"))
	local objbtns = FullCharSheet.getTable("buttons")
	weapon_prof_level = 0
	for i, v in pairs(objbtns) do
		prefix = string.sub(i, 1, 8)
		if prefix == "courage_" then
			if v.label ~= '' then
				weapon_prof_level = weapon_prof_level + 1
			end
		end
	end
	return weapon_prof_level
end



-- OLD CODE BELOW
--[[function ClickedRoll(color)

	if hit then
		-- Gets the Equiped WeaponGUID
		grid.call("checkWeapon")
		weaponGUID = grid.getVar("weaponGUID")

		-- Checks for Weapon Key Words, Armor Sets, Weapon Proficiency, Mastery
		hasDevastating_1 = false
		hasDevastating_2 = false
		hasEarlyIron = false
		hasUnwiedly = false
		hasSlow = false

		hasLionArmor = false
		hasWarlord = false

		hasRegalEdge = false
		hasCelestialSpear = false

		hasAxe = false
		hasAxeProf = false
		hasAxeMastery = false
		hasBow = false
		hasBowProf = false
		hasClub = false
		hasClubProf = false
		hasClubMastery = false
		hasDagger = false
		hasKatar = false
		hasGrandProficiency = false
		hasGrandMastery = false
		hasGrandWeapon = false
		hasShield = false
		hasSwordMastery = false
		hasSword = false
		hasTwilight_prof4 = false
		hasWhip = false
		hasWhipProf = false
		hasWhipMastery = false

		plus1acc = 0

		for _, v in pairs(zone.getObjects()) do
			-------------------------- start body for loop ----------------------------
			local desc = v.getDescription()
			-------------------------------
			-- ARMOR SETS
			-------------------------------
			-- Warlord Armor
			if v.getName() == "Warlord Armor" then
				pos_warlord = v.getPosition()
				hasWarlord = true
			end
			-- White Lion Armor
			if v.getName() == "White Lion Armor" then
				pos_LionArmor = v.getPosition()
				hasLionArmor = true
			end

			-------------------------------
			-- Fighting Arts
			-------------------------------


			--------------------------------------------------------------------
			-- WEAPON KEYWORDS
			--------------------------------------------------------------------
			if string.find(desc, 'devastating1') and v.getGUID() == weaponGUID then
				hasDevastating_1 = true
			end
			if v.getName() == "Zanbato" and v.getRotation().z > 165 and v.getGUID() == weaponGUID then
				hasDevastating_1 = true
			end
			if string.find(desc, 'devastating2') and v.getGUID() == weaponGUID then
				hasDevastating_2 = true
			end -- end

			if string.find(desc, "earlyIron") and v.getGUID() == weaponGUID then
				hasEarlyIron = true
			end

			if not hasFrenzy and (string.find(desc, 'slow') and v.getGUID() == weaponGUID) then
				hasSlow = true
			end

			if string.find(desc, "unwiedly") and v.getGUID() == weaponGUID then
				hasUnwiedly = true
			end

			--if string.find(desc)

			--------------------------------------------------------------------
			-- UNIQUE WEAPON CONDITIONS
			--------------------------------------------------------------------

			if v.getName() == "Calcified Juggernaut Blade" and v.getGUID() == weaponGUID then
				local pos = v.getPosition()
				for i = 1, count_tokens(token_count) do
					local token = bag_str.takeObject({position = {pos.x, pos.y + i * 0.2, pos.z}, rotation = {0, 180, 0}})
					token.setDescription("token, endOfAttack")
				end
				broadcastToAll("You gained " .. count_tokens(token_count) .. " Strength for this Attack for each Token you have", msg_color)
			end

			if hasConstellation and (v.getName() == "Celestial Spear" and v.getGUID() == weaponGUID) then
				gear_Celestial_Spear_pos = v.getPosition()
				hasCelestialSpear = true
			end

			if hasConstellation and (v.getName() == "Regal Edge" and v.getGUID() == weaponGUID) then
				gear_Regal_Edge_pos = v.getPosition()
				hasRegalEdge = true
			end

			if v.getName() == "Twilight Sword" and v.getGUID() == weaponGUID then
				local pos = v.getPosition()
				for i = 1, get_weapon_prof_level(weapon_prof_level) do
					local token = bag_accuracy.takeObject({position = {pos.x, pos.y + i * 0.2, pos.z}, rotation = {0, 180, 0}})
					token.setDescription("token, endOfAttack")
				end
				if get_weapon_prof_level(weapon_prof_level) >= 4 then
					hasTwilight_prof4 = true
				end
				if get_weapon_prof_level(weapon_prof_level) >= 6 then
					v.setDescription(desc .. ", deadly")
				end
			end

			--------------------------------------------------------------------
			-- WEAPON PROFICIENCY / MASTERY
			--------------------------------------------------------------------
			-- AXE
			if v.getName() == "Axe" then
				hasAxeProf = true
			end
			if v.getName() == "Axe" and v.getRotation().z < 65 then
				hasAxeMastery = true
			end
			if string.find(desc, "axe") and v.getGUID() == weaponGUID then
				hasAxe = true
			end
			-- BOW
			if v.getName() == "Bow" then
				hasBowProf = true
			end
			if string.find(desc, "bow") and v.getGUID() == weaponGUID then
				hasBow = true
			end

			-- CLUB
			if v.getName() == "Club" then
				hasClubProf = true
			end
			if v.getName() == "Club" and v.getRotation().z < 65 then
				hasClubMastery = true
			end
			if string.find(desc, "club") and v.getGUID() == weaponGUID then
				hasClub = true
			end

			-- DAGGER
			if string.find(desc, "dagger") and v.getGUID() == weaponGUID then
				hasDagger = true
			end

			-- KATAR
			if string.find(desc, 'katar') and v.getGUID() == weaponGUID then
				hasKatar = true
			end

			-- Sword
			if v.getName() == "Sword" and v.getRotation().z < 65 then
				hasSwordMastery = true
			end
			if string.find(desc, "sword") and v.getGUID() == weaponGUID then
				hasSword = true
				sword_gear_pos = v.getPosition()
			end

			-- Grand Weapon
			if v.getName() == "Grand Weapon" and v.getRotation().z < 65 then
				hasGrandMastery = true
			end
			if v.getName() == "Grand Weapon" then
				hasGrandProficiency = true
			end
			if string.find(desc, "grand weapon") and v.getGUID() == weaponGUID then
				hasGrandWeapon = true
				pos_gear_grand = v.getPosition()
				if hasGrandProficiency then
					local token = bag_accuracy.takeObject({position = {pos_gear_grand.x, pos_gear_grand.y + 0.2, pos_gear_grand.z}, rotation = {0, 180, 0}})
					token.setDescription("token, endOfAttack")
					broadcastToAll("Grand Weapon Proficiency ~ You gained (+1) Accuracy", {1, 1, 1})
				end
			end

			-- Shield
			if v.getName() == "Shield" then
				hasGrandMastery = true
			end

			-- WHIP
			if v.getName() == "Whip" and v.getRotation().z < 65 then
				hasWhipMastery = true
			end
			if v.getName() == "Whip" then
				hasWhipProf = true
			end
			if string.find(desc, "whip") and v.getGUID() == weaponGUID then
				hasWhip = true
				whip_pos = v.getPosition()
				if hasWhipMastery then
					for i = 1, 5 do
						local token = bag_str.takeObject({position = {whip_pos.x, whip_pos.y + i * 0.1, whip_pos.z}, rotation = {0, 180, 0}})
						token.setDescription("token, endOfAttack")
					end
					broadcastToAll("Whip Mastery ~ You gained (+5) Strength for this Attack", {1, 1, 1})
				end
			end

			--------------------------------------------------------------------
			-- AMMUNITION
			--------------------------------------------------------------------

			if string.find(desc, 'ammunition') and v.getGUID() == weaponGUID then
				v.call('sub')
				local count = tonumber(v.call('getCount'))
				if count < 1 then
					broadcastToAll("Ammunition Count Depleted ~ Equip another Weapon", {1, 1, 1})
				end
			end

		end -------------------------- end body for loop ------------------------

		---------------------------------------------------------------------------
		-- CALCULATES HOW MANY DICE TO ROLL ON ATTACK
		---------------------------------------------------------------------------
		local gridButn = grid.getTable("buttons")
		params = {number = tonumber(gridButn['attack'].label), playerColor = color}

		if hasSlow or params.number < 1 then params.number = 1 end

		if hasRegalEdge then
			params = {number = tonumber(gridButn['attack'].label) + 1, playerColor = color}
			broadcastToAll("Regal Edge: You gained (+1) Speed ~ (+4) Strength ~ for Constellation", msg_color)
			for i = 1, 4 do
				local token = bag_str.takeObject({position = {gear_Regal_Edge_pos.x, gear_Regal_Edge_pos.y + i * 0.2, gear_Regal_Edge_pos.z}, rotation = {0, 180, 0}})
				token.setDescription("token, endOfAttack")
			end
		end

		if hasCelestialSpear then
			params = {number = tonumber(gridButn['attack'].label), playerColor = color}
			broadcastToAll("Celestial Spear: You gained (+5) Strength ~ for Constellation", msg_color)
			for i = 1, 5 do
				local token = bag_str.takeObject({position = {gear_Celestial_Spear_pos.x, gear_Celestial_Spear_pos.y + i * 0.2, gear_Celestial_Spear_pos.z}, rotation = {0, 180, 0}})
				token.setDescription("token, endOfAttack")
			end
		end

		if hasAxe and hasWarlord then
			params = {number = tonumber(gridButn['attack'].label) + 1, playerColor = color}
			broadcastToAll("Warlord Armor: You gained (+1) Speed ~ (+1) Luck when attacking with Axes", msg_color)
			local token_luck = bag_luck.takeObject({position = pos_warlord, rotation = {0, 180, 0}})
			token_luck.setDescription(token_luck.getDescription() .. ", endOfAttack")
		end

		if hasLionArmor and hasDagger then
			params = {number = tonumber(gridButn['attack'].label) + 1, playerColor = color}
			broadcastToAll("White Lion Armor: You gained (+1) Speed ~ (+2) Strength when attacking with Daggers", msg_color)
			for i = 1, 2 do
				local token_strength = bag_str.takeObject({position = {pos_LionArmor.x, pos_LionArmor.y + i * 0.5, pos_LionArmor.z}, rotation = {0, 180, 0}})
				token_strength.setDescription(token_strength.getDescription() .. ", endOfAttack")
			end
		end

		if hasLionArmor and hasKatar then
			params = {number = tonumber(gridButn['attack'].label) + 1, playerColor = color}
			broadcastToAll("White Lion Armor: You gained (+1) Speed ~ (+2) Strength when attacking with Katars", msg_color)
			local str1 = bag_str.takeObject({position = {pos_LionArmor.x, pos_LionArmor.y + 0.3, pos_LionArmor.z}, rotation = {0, 180, 0}})
			local str2 = bag_str.takeObject({position = {pos_LionArmor.x, pos_LionArmor.y + 0.5, pos_LionArmor.z}, rotation = {0, 180, 0}})
			str1.setDescription(str1.getDescription() .. ", endOfAttack")
			str2.setDescription(str2.getDescription() .. ", endOfAttack")
		end

		if hasSwordMastery and hasSword then
			params = {number = tonumber(gridButn['attack'].label) + 1, playerColor = color}
			local str_token = bag_str.takeObject({position = {sword_gear_pos.x, sword_gear_pos.y + 0.2, sword_gear_pos.z}, rotation = {0, 180, 0}})
			local acc_token = bag_accuracy.takeObject({position = {sword_gear_pos.x, sword_gear_pos.y + 0.4, sword_gear_pos.z}, rotation = {0, 180, 0}})
			str_token.setDescription("token, endOfAttack")
			acc_token.setDescription("token, endOfAttack")
			broadcastToAll("Sword Mastery ~ You gained (+1) Speed ~ (+1) Strength ~ (+1) Accuracy", msg_color)
		end

		if hasBowProf_reRoll then
			params = {number = tonumber(count_missed), playerColor = color}
			hasBowProf_reRoll = false
		end

		if hasTwilight_prof4 then
			params = {number = tonumber(gridButn['attack'].label) + 2, playerColor = color}
		end
		-------- END ~ CALCULATES HOW MANY DICE TO ROLL ON ATTACK ~ END -----------
else -- if not hit then (else wound)

		params = {number = 1, playerColor = color}
		local desc = ""
		local sharps = 0

		-------- END ~ CALCULATES HOW MANY DICE TO ROLL ON WOUND ~ END -----------

		---------------------------------------------------------------------------
		-- GETS HIT LOCATION KEY WORDS
		---------------------------------------------------------------------------
		-- Checks if Hit Location is selected or not
		local hitTable = hitTool.getTable('hitLocation')
		if next(hitTable) == nil then
			broadcastToAll("Select a Hit Location First", {1, 1, 1})
			return
		end -- end

		cannot_cancel_reaction = false
		has_SuperDense = false
		hasFrail = false
		needsAxe = false
		cannotCrit = false
		hasDagger_bonus = false
		hasSpear_bonus = false
		hasAxe_vs_persistentInjury = false

		hasReflex_Reaction = false
		hasWound_Reaction = false
		hasFailure_Reaction = false
		hasEyeOfTheStorm = false
		hasRetch = false
		hasFailure_hasWound = false
		hasNoCrit = false
		hasParry = false

		clubBonus = 0
		plusTgh = 0
		hasPlusTgh = false

		local hitTable = hitTool.getTable('hitLocation')
		for k, v in ipairs(hitTable) do
			-------------------------- start body for loop ---------------------------

			obj = getObjectFromGUID(v)

			if string.find(desc, 'axe only') then
				cannotCrit = true
				needsAxe = true
			end

			if string.find(desc, 'bonus_club')  and string.find(desc, 'screaming antelope') then
				if hasClub then
					hasClub_bonus = true
					clubBonus = 2
					broadcastToAll("This Wound Attempt gained (+2) Luck with a Club", msg_color)
				end
			elseif string.find(desc, 'bonus_club')  and string.find(desc, 'dung beetle knight') then
				if hasClub then
					hasClub_bonus = true
					clubBonus = 4
					print(clubBonus)
					broadcastToAll("This Wound Attempt gained (+4) Luck with a Club", msg_color)
				end
			end

			if string.find(desc, 'bonus_dagger') then
				if hasDagger then
					hasDagger_bonus = true
					broadcastToAll("You gained (+3) Strength with a Dagger vs this Hit Location", msg_color)
				end
			end

			if string.find(desc, 'bonus_spear') then
				if hasSpear then
					hasSpear_bonus = true
					broadcastToAll("You gained (+3) Strength with a Spear vs this Hit Location", msg_color)
				end
			end

			if string.find(desc, 'bonus_shield')  and string.find(desc, 'screaming antelope') then
				if hasShield then
					hasShield_bonus = true
					shieldBonus = 2
					broadcastToAll("This Wound Attempt gained (+2) Luck with a Shield", msg_color)
				end
			elseif string.find(desc, 'bonus_shield')  and string.find(desc, 'dung beetle knight') then
				if hasShield then
					hasShield_bonus = true
					shieldBonus = 4
					broadcastToAll("This Wound Attempt gained (+4) Luck with a Shield", msg_color)
				end
			end

			if obj.getName() == "Century Carapace" then
				centuryCarapace = true
				cannot_cancel_reaction = true
				hasPlusTgh = true
				plusTgh = 6
				broadcastToAll("(+6) Toughness to Wound this Location Calculated", {1,1,1})
			end

			if string.find(desc, 'persistent injury') then
				if hasAxe and hasAxeMastery then
					hasAxe_vs_persistentInjury = true
				end
			end

			if string.find(desc, 'super_dense') then
				has_SuperDense = true
			end

			if string.find(desc, 'reflex reaction') then
				hasReflex_Reaction = true
			end

			if string.find(desc, 'wound reaction') then
				hasWound_Reaction = true
			end

			if string.find(desc, 'eye of the storm') then
				hasEyeOfTheStorm = true
			end

			if string.find(desc, 'retch') then
				hasRetch = true
			end

			if string.find(desc, 'failure reaction') then
				hasFailure_Reaction = true
			end

			if string.find(desc, 'failure reaction') and string.find(desc, 'wound reaction') then
				hasFailure_hasWound = true
			end

			if string.find(desc, 'no critical') then
				hasNoCrit = true
			end

			if string.find(desc, 'parry') then
				hasParry = true
			end

		end ------------------------- end body for loop ------------------------

		--------------------------------------------------------------------
		-- GETS EQUIPPED WEAPON
		--------------------------------------------------------------------
		local equipedWeapon = ""
		unlucky = false
		for _, v in pairs(zone.getObjects()) do
			if string.find(v.getDescription(), 'weapon') and grid.getTable("weapon").name == v.getName() then
				equipedWeapon = v
			end
			if v.getName() == "Unlucky" then
				cannotCrit = true
				unlucky = true
			end
		end

		-- Fist and Tooth
		local descWeapon = ""
		local nameWeapon = "FistAndTooth"

		if equipedWeapon ~= "" then
			descWeapon = equipedWeapon.getDescription()
			nameWeapon = equipedWeapon.getName()

			--------------------------------------------------------------------
			-- CHECKS FOR SHARPS
			--------------------------------------------------------------------
			hasDevastating_1 = false
			hasDevastating_2 = false
			for _, v in pairs(zone.getObjects()) do
				-------------------------- start body for loop ------------------------
				local desc = v.getDescription()

				if string.find(descWeapon, 'axe') then
					cannotCrit = false
					needsAxe = false
				end

				if has_SuperDense == true and string.find(descWeapon, 'frail') then
					hasFrail = true
				end

				if (centuryCarapace) and (string.find(descWeapon, 'club') or string.find(descWeapon, 'shield') or string.find(descWeapon, 'pickaxe')) then
					sharps = sharps + 2
					centuryCarapace = false
				end

				if v.getName() == "Lantern Armor" and string.find(descWeapon, 'club') then
					sharps = sharps + 1
				end

				if hasSteelSword_PerfectHit then
					sharps = sharps + 1
					hasSteelSword_PerfectHit = false
				end

				if string.find(desc, 'sharp') then
					if v.getName() == nameWeapon then
						sharps = sharps + 1
					end
				end
			end ----------------------- end body for loop -------------------------

		else -- if equipedWeapon ~= "" then
			if nameWeapon == "FistAndTooth" then
				for _, v in pairs(zone.getObjects()) do
					local desc = v.getDescription()
					if (v.getName() == "Metal Maw" or v.getName() == "Acid Palms") and v.getRotation().z < 90 then
						sharps = sharps + 1
					end
				end
			end
		end -- end if equipedWeapon ~= "" / else

		if hasFrail then
			broadcastToAll("Your " .. equipedWeapon.getName() .. " has 'Frail' and is archived after this Wound Attempt", msg_color)
		end

		if hasDevastating_1 then
			broadcastToAll(equipedWeapon.getName() .. ": Devastating 1", msg_color)
		elseif hasDevastating_2 then
			broadcastToAll(equipedWeapon.getName() .. ": Devastating 2", msg_color)
		end

		if sharps > 0 then
			sharp = true
			clearDice()
			params = {number = sharps, playerColor = color}
			playerClicked = color
		end

	end -- end if hit then / else wound

	-- Remove Overlays
	--remove_overlays()

	clearDice()
	Timer.create({
	identifier = "roller"..self.guid,
	delay = 0.1,
	function_name = "spawnDice",
	parameters = params
	})
end

function remove_overlays()

	-- Bored
	-- Eye of the Storm Effects
	foundBored = false
	for _, obj in ipairs(zoneInjuryBoard.getObjects()) do
		if obj.getName() == "Bored" then
			foundBored = true
		end
	end
	if not foundBored then
		for _, obj in ipairs(zoneShowdown.getObjects()) do
			if obj.getName() == "Phoenix" then
				obj.call("remove_overlay_eyeOfTheStorm")
			end
		end
	end

	-- Retch
	for _, obj in ipairs(zoneShowdown.getObjects()) do
		if obj.getName() == "Gorm" then
			obj.call("remove_overlay_retch")
		end
	end

end

function cleanUp()
	-- Cleanup List , Cleanup Hit Location
	for k, v in ipairs(cleanUpList) do
		v.destroy()
	end
	cleanUpList = {}

local table = Global.getTable('cleanUpHitLocation2')
	for k, v in ipairs(table) do
		v.destruct()
	end
	Global.setTable("cleanUpHitLocation2", {})
end

-- Cleans up dice left after save/load
function onClickCleanUp()
	local zoneAttackDice = getObjectFromGUID('d2f7eb')
	local objectsInZone = zoneAttackDice.getObjects()
	for _, object in ipairs(objectsInZone) do
		local desc = object.getDescription()
		if string.find(desc, "survivor dice") then
			object.destroy()
		end
	end
end

-- Coroutine Timer
function wait(time)
	local start = os.time()
	repeat
	coroutine.yield(0)
	until os.time() > start + time
end

-- Clear 'End of Attack' Tokens on AI Board
function clearEndofAttackTokens()
	zonesDestructTable = Global.getTable('zonesDestruct')
	local zone = getObjectFromGUID(zonesDestructTable.zoneAIBoard.guid)
	local objectsInZone = zone.getObjects()
	for k, object in pairs(objectsInZone) do
		local desc = object.getDescription()
		if string.find(desc, 'end of attack') then
			object.destruct()
		end
	end
	Global.getTable('tghEndofAttack')
	Global.setTable('tghEndofAttack', {})
	Global.call("clearBroadcast")
end


-- Reset 'Hit Location' Table
function resetHitLocationTable()
local hitTable = hitTool.getTable('hitLocation')
hitTool.setTable("hitLocation", {})
end



-------------------------------------------------------------------------------
-- Call Hit Location Wound, Critical Wound, Failure Reaction Effects
-------------------------------------------------------------------------------
function hitLocationCriticalWoundEffects()
	hitTool.call('removeButton_ReactionTriggered')
	hitTool.call('createButton_survival_Opportunity')

	local hitTable = hitTool.getTable('hitLocation')
	for k, v in ipairs(hitTable) do
		obj = getObjectFromGUID(v)
		obj.setLock(false)
		obj.setRotationSmooth({0, 180, 0})
		if not string.find(obj.getDescription(), "persistent injury") then
			obj.setPositionSmooth({6.16, 5, - 2.46}, false, false)
		end
		obj.call("criticalWoundEffect")
	end
end ]]

-- LEFT ATTACK ROLLER