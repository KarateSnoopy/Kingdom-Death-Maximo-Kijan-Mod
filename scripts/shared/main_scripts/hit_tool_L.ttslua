#include ../util
-- hit location tool

hitLocation = {}
cleanUpList = {}

function onLoad()
	createButtons()
	roller_SurvAttack = getObjectFromGUID('c160b7')
	roller_SurvAttack_right = getObjectFromGUID('ff240b')
	createButton_move_camera_home(object, player)
end

function createButton_survival_Opportunity()
	self.createButton({click_function = "dud", function_owner = self, label = "↧ Survival Opportunity ↧", position = {-23, 2, -15.2},
	rotation = { - 10, 0, 0}, width = 0, height = 0, font_size = 500, color = {0, 0, 0}, font_color = {1, 1, 1}})
end

function removeButton_survival_opportunity()
	local btns = self.getButtons()
	for i, v in pairs(btns) do
		if v.label == "↧ Survival Opportunity ↧" then
			self.removeButton(v.index)
		end
	end
end

function reactionsCancelled()
	self.createButton({click_function = "dud", function_owner = self, label = "Reactions Cancelled", position = { - 24, 1.9, - 19.8}, rotation = { - 10, 0, 0},
	width = 0, height = 0, font_size = 800, color = {0, 0, 0}, font_color = {1, 1, 1}})
end

function reactionsCancelled_endOfAttack()
	self.createButton({click_function = "endOfAttack", function_owner = self, label = "Reactions Cancelled", position = { - 24, 1.9, - 19.8}, rotation = { - 10, 0, 0},
	width = 0, height = 0, font_size = 800, color = {0, 0, 0}, font_color = {1, 1, 1}})
end

function reactionsCancelled_nextWoundAttempt()
	self.createButton({click_function = "nextWoundAttempt", function_owner = self, label = "Reactions Cancelled", position = { - 24, 1.9, - 19.8}, rotation = { - 10, 0, 0}, width = 0, height = 0, font_size = 800, color = {0, 0, 0}, font_color = {1, 1, 1}})
end

function endOfAttack() end
function nextWoundAttempt() end

function remove_reactionsCancelled()
	local btns = self.getButtons()
	for i, v in pairs(btns) do
		if v.label == "Reactions Cancelled" then
			self.removeButton(v.index)
		end
	end
end

function callCritical()
	local zonesTable = Global.getTable('zones')
	local zone = getObjectFromGUID(zonesTable.zoneHitLoc1b.guid)
	for _, v in pairs(zone.getObjects()) do
		if v.tag == "Card" then
			v.call("criticalWoundEffect")
			startLuaCoroutine(Global, "printWound")
		end
	end
end

function dud()
end

function end_wound_attempt()
	-- check_Reactions_Cancelled()
	removeButton_survival_opportunity()
	get_hitLocations_toDiscard()
end

function get_hitLocations_toDiscard()
	local zone = getObjectFromGUID(Global.getTable('zones').zoneLeft_drawnHit.guid)
	table_discard = {}
	for _, card in ipairs(zone.getObjects()) do
		if string.find(card.getDescription(), "hit location") then
			local guid = card.getGUID()
			table.insert(table_discard, card.guid)
		end
	end
	startLuaCoroutine(self, "discard_hitLocations")
end

function discard_hitLocations()
	for k, v in ipairs(table_discard) do
		obj = getObjectFromGUID(v)
		wait(0.1)
		obj.setRotationSmooth({0,180,0})
		obj.setPositionSmooth({6.16, 6, -2.45})
		obj.setLock(false)
	end
	return 1
end

function check_HitLocation_Modifiers()
	local persistent = getObjectFromGUID('6d1dae')
	for k, v in ipairs(hitLocation) do
		obj = getObjectFromGUID(v)
		local desc = obj.getDescription()

		if string.find(desc, "flank bonus") then
			persistent.call("checkFlank")

		elseif string.find(desc, "light penalty") then
			persistent.call("checkLightPenalty")
		end
	end
end

--//TODO: update left reactions cancelled token rotation get value
--[[function check_Reactions_Cancelled()
	-- Sets Reactions Cancelled to either 'end of attack' or 'end of round'
	cancelReactions_endOfAttack = false
	cancelReactions_endOfRound = false
	local setting_knockdown = getObjectFromGUID('859b4f')
	if setting_knockdown.getRotation().z < 65 then
		cancelReactions_endOfAttack = true
	elseif setting_knockdown.getRotation().z > 165 then
		cancelReactions_endOfRound = true
	end

	local isKnockedDown = roller_SurvAttack_right.getVar("monster_knocked_down")
	if isKnockedDown or cancelReactions_endOfRound then return end

	-- Enables reactions at end of wound IF monster NOT knocked down
	if not isKnockedDown or cancelReactions_endOfAttack then
		remove_reactionsCancelled()
	end
end--]]

function removeButton_Wound()
	-- Removes Wound Buttons when another Hit Location is selected
	local buttons = roller_SurvAttack.getButtons()
	for i, v in pairs(buttons) do
		if v.label == "Wound" then
			roller_SurvAttack.removeButton(v.index)
		end
	end
end

-- DRAW HIT LOCATIONS SECTION -------------------------------------------------
function drawOrhighlight1()
	cleanUp()
	removeButton_Wound()
	local zone = getObjectFromGUID(Global.getTable('zones').zoneHitLoc1b.guid)
	foundCard = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), 'hit location') then
			roller_SurvAttack.call("woundButton1")
			object.highlightOn({0.856, 0.1, 0.094}, 6)
			local guid = object.guid
			hitLocation = {}
			table.insert(hitLocation, object.guid)
			object.call("addStatModifier")
			foundCard = true
		end
	end
	if foundCard then
		check_HitLocation_Modifiers()
	end
	if not foundCard then
		drawHitLocations1()
	end
end

function drawOrhighlight2()
	cleanUp()
	removeButton_Wound()
	local zone = getObjectFromGUID(Global.getTable('zones').zoneHitLoc2b.guid)
	foundCard = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), 'hit location') then
			roller_SurvAttack.call("woundButton2")
			object.highlightOn({0.856, 0.1, 0.094}, 6)
			local guid = object.guid
			hitLocation = {}
			table.insert(hitLocation, object.guid)
			object.call("addStatModifier")
			foundCard = true
		end
	end
	if foundCard then
		check_HitLocation_Modifiers()
	end
	if not foundCard then
		drawHitLocations2()
	end
end

function drawOrhighlight3()
	cleanUp()
	removeButton_Wound()
	local zone = getObjectFromGUID(Global.getTable('zones').zoneHitLoc3b.guid)
	foundCard = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), 'hit location') then
			roller_SurvAttack.call("woundButton3")
			object.highlightOn({0.856, 0.1, 0.094}, 6)
			local guid = object.guid
			hitLocation = {}
			table.insert(hitLocation, object.guid)
			object.call("addStatModifier")
			foundCard = true
		end
	end
	if foundCard then
		check_HitLocation_Modifiers()
	end
	if not foundCard then
		drawHitLocations3()
	end
end

function drawOrhighlight4()
	cleanUp()
	removeButton_Wound()
	local zone = getObjectFromGUID(Global.getTable('zones').zoneHitLoc4b.guid)
	foundCard = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), 'hit location') then
			roller_SurvAttack.call("woundButton4")
			object.highlightOn({0.856, 0.1, 0.094}, 6)
			local guid = object.guid
			hitLocation = {}
			table.insert(hitLocation, object.guid)
			object.call("addStatModifier")
			foundCard = true
		end
	end
	if foundCard then
		check_HitLocation_Modifiers()
	endheck_HitLocation_Modifiers()
	end
	if not foundCard then
		drawHitLocations4()
	end
end

function drawOrhighlight5()
	cleanUp()
	removeButton_Wound()
	local zone = getObjectFromGUID(Global.getTable('zones').zoneHitLoc5b.guid)
	foundCard = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), 'hit location') then
			roller_SurvAttack.call("woundButton5")
			object.highlightOn({0.856, 0.1, 0.094}, 6)
			local guid = object.guid
			hitLocation = {}
			table.insert(hitLocation, object.guid)
			object.call("addStatModifier")
			foundCard = true
		end
	end
	if foundCard then
		check_HitLocation_Modifiers()
	end
	if not foundCard then
		drawHitLocations5()
	end
end

function drawOrhighlight6()
	cleanUp()
	removeButton_Wound()
	local zone = getObjectFromGUID(Global.getTable('zones').zoneHitLoc6b.guid)
	foundCard = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), 'hit location') then
			roller_SurvAttack.call("woundButton6")
			object.highlightOn({0.856, 0.1, 0.094}, 6)
			local guid = object.guid
			hitLocation = {}
			table.insert(hitLocation, object.guid)
			object.call("addStatModifier")
			foundCard = true
		end
	end
	if foundCard then
		check_HitLocation_Modifiers()
	end
	if not foundCard then
		drawHitLocations6()
	end
end

function drawOrhighlight7()
	cleanUp()
	removeButton_Wound()
	local zone = getObjectFromGUID(Global.getTable('zones').zoneHitLoc7b.guid)
	foundCard = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), 'hit location') then
			roller_SurvAttack.call("woundButton7")
			object.highlightOn({0.856, 0.1, 0.094}, 6)
			local guid = object.guid
			hitLocation = {}
			table.insert(hitLocation, object.guid)
			object.call("addStatModifier")
			foundCard = true
		end
	end
	if foundCard then
		check_HitLocation_Modifiers()
	end
	if not foundCard then
		drawHitLocations7()
	end
end

function drawHitLocations1()
	zonesTable = Global.getTable('zones')
	local zone = getObjectFromGUID(zonesTable.deckHitLocations.guid)
	local objectsInZone = zone.getObjects()
	--drawn_hitLocations = {}
	for _, object in ipairs(objectsInZone) do
		if object.tag == "Deck" then
			object.takeObject({position = {-8.95, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		elseif object.tag == "Card" then
			object.setLock(true)
			object.setPositionSmooth({-8.95, 5.14, - 2.45}, false, false)
			object.setRotationSmooth({35, 180, 0}, false, false)
		end
	end
end

function drawHitLocations2()
	zonesTable = Global.getTable('zones')
	local zone = getObjectFromGUID(zonesTable.deckHitLocations.guid)
	local objectsInZone = zone.getObjects()
	for _, obj in ipairs(objectsInZone) do
		obj.takeObject({position = { - 8.95, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 11.41, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
	end
end

function drawHitLocations3()
	zonesTable = Global.getTable('zones')
	local zone = getObjectFromGUID(zonesTable.deckHitLocations.guid)
	local objectsInZone = zone.getObjects()
	for _, obj in ipairs(objectsInZone) do
		obj.takeObject({position = { - 8.95, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 11.41, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 13.90, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
	end
end

function drawHitLocations4()
	zonesTable = Global.getTable('zones')
	local zone = getObjectFromGUID(zonesTable.deckHitLocations.guid)
	local objectsInZone = zone.getObjects()
	for _, obj in ipairs(objectsInZone) do
		obj.takeObject({position = { - 8.95, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 11.41, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 13.90, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 16.35, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
	end
end

function drawHitLocations5()
	zonesTable = Global.getTable('zones')
	local zone = getObjectFromGUID(zonesTable.deckHitLocations.guid)
	local objectsInZone = zone.getObjects()
	for _, obj in ipairs(objectsInZone) do
		obj.takeObject({position = { - 8.95, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 11.41, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 13.90, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 16.35, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 11.41, 5.14, - 6.98}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
	end
end

function drawHitLocations6()
	zonesTable = Global.getTable('zones')
	local zone = getObjectFromGUID(zonesTable.deckHitLocations.guid)
	local objectsInZone = zone.getObjects()
	for _, obj in ipairs(objectsInZone) do
		obj.takeObject({position = { - 8.95, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 11.41, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 13.90, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 16.35, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 11.41, 5.14, - 6.98}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 13.90, 5.14, - 6.95}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
	end
end

function drawHitLocations7()
	zonesTable = Global.getTable('zones')
	local zone = getObjectFromGUID(zonesTable.deckHitLocations.guid)
	local objectsInZone = zone.getObjects()
	for _, obj in ipairs(objectsInZone) do
		obj.takeObject({position = { - 8.95, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 11.41, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 13.90, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 16.35, 5.14, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 11.41, 5.14, - 6.98}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 13.90, 5.14, - 6.95}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		obj.takeObject({position = { - 16.35, 5.14, - 6.95}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
	end
end

------------------------------------------------
--Utility Functions
------------------------------------------------
function move_camera_toHome(object, player)
	playerLookAt(player, {-1.34, 4.54, -4.04})
end

function cleanUp()
	local cleanUpList = Global.getTable('cleanUpHitLocation2')
	if next(cleanUpList) == nil then return end
	for k, v in ipairs(cleanUpList) do
		if v ~= nil then
			v.destruct()
		end
	end
	Global.setTable('cleanUpHitLocation2', {})
end

function wait(time)
	local start = os.time()
	--each frame the coroutine is given control back, but we immediately call coroutine.yield() again until we exceed the time limit
	repeat
		coroutine.yield(0)
	until os.time() > start + time
end

function createButtons()
	self.createButton({index = 0, click_function = 'end_wound_attempt', function_owner = self,
		label = 'End Wound Attempts', position = {0, 0.2, 0.4}, rotation = { - 5, 0, 0},
		scale = {x = 0.5, y = 1, z = 0.5}, width = 6800, height = 1000, font_size = 1200,
	color = {0, 0, 0, 0}, font_color = {1, 1, 1, 100}})

	self.createButton({index = 10, click_function = "callCritical", function_owner = self, label = "Auto Crit Position 1",
	position = { - 10.5, 0.2, 0.9}, rotation = { - 5, 0, 0}, width = 3400, height = 600, font_size = 300, color = {0, 0, 0, 0}, font_color = {1, 1, 1, 100}})

	self.createButton({index = 1, click_function = 'drawOrhighlight1', function_owner = self,
		label = '1', position = { - 10.6, 0.1, - 1}, rotation = { - 5, 0, 0},
		scale = {1, 1, 1}, width = 3600, height = 500, font_size = 400,
	color = {0, 0, 0, 0}, font_color = {1, 1, 1, 100}})

	self.createButton({index = 2, click_function = 'drawOrhighlight2', function_owner = self,
		label = '2', position = { - 19.9, 0.1, - 1}, rotation = { - 5, 0, 0},
		scale = {1, 1, 1}, width = 3600, height = 500, font_size = 400,
	color = {0, 0, 0, 0}, font_color = {1, 1, 1, 100}})

	self.createButton({index = 3, click_function = 'drawOrhighlight3', function_owner = self,
		label = '3', position = { - 29.4, 0.1, - 1}, rotation = { - 5, 0, 0},
		scale = {1, 1, 1}, width = 3600, height = 500, font_size = 400,
	color = {0, 0, 0, 0}, font_color = {1, 1, 1, 100}})

	self.createButton({index = 4, click_function = 'drawOrhighlight4', function_owner = self,
		label = '4', position = { - 38.7, 0.1, - 1}, rotation = { - 5, 0, 0},
		scale = {1, 1, 1}, width = 3600, height = 500, font_size = 400,
	color = {0, 0, 0, 0}, font_color = {1, 1, 1, 100}})

	self.createButton({index = 5, click_function = 'drawOrhighlight5', function_owner = self,
		label = '5', position = {-47.5, 0.1, -1}, rotation = { - 5, 0, 0},
		scale = {1, 1, 1}, width = 3600, height = 500, font_size = 400,
	color = {0, 0, 0, 0}, font_color = {1, 1, 1, 100}})

	self.createButton({index = 6, click_function = 'drawOrhighlight6', function_owner = self,
		label = '6', position = {-57, 0.1, -1}, rotation = { - 5, 0, 0},
		scale = {1, 1, 1}, width = 3600, height = 500, font_size = 400,
	color = {0, 0, 0, 0}, font_color = {1, 1, 1, 100}})

	self.createButton({index = 7, click_function = 'drawOrhighlight7', function_owner = self,
		label = '7', position = {-66.3, 0.1, -1}, rotation = { - 5, 0, 0},
		scale = {1, 1, 1}, width = 3600, height = 500, font_size = 400,
	color = {0, 0, 0, 0}, font_color = {1, 1, 1, 100}})
end

------------------------------------------
function createButton_move_camera_home(object, player)
	self.createButton({click_function = "move_camera_toHome", function_owner = self, label = "Home",
	position = {-19.9, 0.1, 1}, rotation = { - 10, 0, 0}, scale = {1, 1, 1}, width = 3400, height = 400, font_size = 300, color = {0, 0, 0, 0}, font_color = {1, 1, 1, 100}})
end
------------------------------------------



-- LEFT HIT TOOL
