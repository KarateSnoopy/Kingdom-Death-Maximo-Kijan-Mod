--------------------------------------------------------------------------------
--                           TABLE OF CONTENTS                                --
--                   Scripts created by Maximo and Kijan                      --
--------------------------------------------------------------------------------

-- Reshuffle Hit Location Deck -------------------------------------------------
	-- function createButton_reshuffleHitLocations
	-- function createButton_reshuffleHitLocations_butcher
	-- function reshuffle_hitLocations
	-- function deck_hitLocation_shuffle_coR
	-- function return_battle_pressure

-- Buttons ---------------------------------------------------------------------
	-- function createButtons
	-- function createButton_reactionTriggered
	-- function removeButton_ReactionTriggered
	-- function createButton_survival_Opportunity
	-- function removeButton_survival_opportunity
	-- function createButton_resolve_attack
	-- function removeButton_FinishReaction
	-- function reactionsCancelled
	-- function reactionsCancelled_endOfAttack
	-- function reactionsCancelled_nextWoundAttempt
	-- function removeButton_Wound

-- Utility Functions -----------------------------------------------------------
	-- function cleanUp
	-- function wait
	-- function callCritical
	-- function end_wound_attempt
	-- function get_hitLocations_toDiscard
	-- function discard_hitLocations
	-- function check_HitLocation_Modifiers
	-- function resolve_attack
	-- function return_hasDaggerProf(hasDaggerProf) [ NOT DONE ]

-------------------------- End Table of Contents -------------------------------
#include ../util

hitLocation = {}
cleanUpList = {}

first_HL_pos = {x = 6.17, y = 5.14, z = -2.35}

function onLoad()
	createButtons()
	roller_SurvAttack_Right = getObjectFromGUID('ff240b')
	zone_die = getObjectFromGUID('d2f7eb')
	drawn_hitLocations = {}
	zoneRight_drawnHit = getObjectFromGUID(Global.getTable('zones').zoneRight_drawnHit.guid)
	zone_toDraw = getObjectFromGUID(Global.getTable('zones').deckHitLocations.guid)
	createButton_reshuffleHitLocations()
	createButton_move_camera_home(object, player)
end


-- Reshuffle Hit Location Deck -------------------------------------------------

function createButton_reshuffleHitLocations()
	self.createButton({click_function = "reshuffle_hitLocations", function_owner = self, label = "Reshuffle", position = {-9.2, 0.2, -1.4}, rotation = {-5, 0, 0}, width = 3000, height = 500,
	font_size = 400, color = {0, 0, 0, 0}, font_color = {1, 0.14, 0, 100}})
end

function createButton_reshuffleHitLocations_butcher()
	self.createButton({click_function = "reshuffle_hitLocations_butcher", function_owner = self, label = "Reshuffle Hit Locations", position = {-9, 0.2, 0.4}, rotation = {-5, 0, 0}, width = 4000, height = 800,
	font_size = 400, color = {0, 0, 0}, font_color = {1, 0.14, 0}})
end

function reshuffle_hitLocations()
	hitTool_pos = self.getPosition()

	-- Gets the Battle Pressure Hit Location Deck
	local zoneRight_drawnHit = getObjectFromGUID(Global.getTable('zones').zoneRight_drawnHit.guid)
	found_battlePressure = false
	for _, object in ipairs(zoneRight_drawnHit.getObjects()) do
		if object.tag == "Deck" then
			if (object.getPosition().z > 0 and object.getPosition().z < 1) then
				found_battlePressure = true
				deck_battle_pressure = object
				break
			end
		end
	end

	found_deck_hitLocations = false
	local hitList = Physics.cast({origin={hitTool_pos.x - 2.5, hitTool_pos.y, hitTool_pos.z + 2.5}, direction={0,1,0}, type=2, size={1,1,1},max_distance = 0})
	for _, entry in ipairs(hitList) do
		if entry.hit_object.tag == "Deck" then
			found_deck_hitLocations = true
			deck_hitLocations = entry.hit_object
		end
	end
	if found_deck_hitLocations then
		--deck_hitLocations.reset()
		deck_hitLocations.shuffle()
		--startLuaCoroutine(self, "deck_hitLocation_shuffle_coR")
	--else
		hitLocation_Zones = {
			zone1 = getObjectFromGUID(Global.getTable('zonesDestruct').zoneAIBoard.guid),
			zone2 = getObjectFromGUID(Global.getTable('zones').zoneRight_drawnHit.guid),
			zone3 = getObjectFromGUID(Global.getTable('zones').zoneLeft_drawnHit.guid),
		}

		for zoneKey, zoneGUIDtable in pairs(hitLocation_Zones) do
			local zoneGUID = zoneGUIDtable.guid
			local zone = getObjectFromGUID(zoneGUID)
			for _, card in ipairs(zone.getObjects()) do
				if string.find(card.getDescription(), "hit location") then
					card.setRotationSmooth({0, 180, 180}, false, false)
					card.setPositionSmooth({3.73, 6, -2.47}, false, false)
					card.setLock(false)
					startLuaCoroutine(self, "deck_hitLocation_shuffle_coR")
				end
			end
		end
	end
end


function deck_hitLocation_shuffle_coR()
	wait(1)
	-- Shuffles the Hit Location Discard Pile into the Hit Location Deck
	local hitList = Physics.cast({origin={hitTool_pos.x, hitTool_pos.y, hitTool_pos.z + 2.5}, direction={0,1,0}, type=2, size={1,1,1},max_distance = 0})
	for _, entry in ipairs(hitList) do
		if entry.hit_object.tag == "Deck" then
			entry.hit_object.setRotationSmooth({0, 180, 180}, false, false)
			entry.hit_object.setPositionSmooth({3.73, 6, -2.47}, false, false)
		end
	end

	wait(1)
	if found_deck_hitLocations then
		wait(0.5)
		deck_hitLocations.shuffle()
		return_battle_pressure()

	else -- if not found_deck_hitLocations
		local hitList = Physics.cast({origin={hitTool_pos.x - 2.5, hitTool_pos.y, hitTool_pos.z + 2.5}, direction={0,1,0}, type=2, size={1,1,1},max_distance = 0})
		for _, entry in ipairs(hitList) do
			if entry.hit_object.tag == "Deck" then
				deck_hitLocations = entry.hit_object
			end
		end

		wait(0.5)
		deck_hitLocations.shuffle()
		return_battle_pressure()

	end
	return 1
end


function return_battle_pressure()
	local pos = self.getPosition()

	local hitList = Physics.cast({
		origin			= {pos.x + 2.45, pos.y, pos.z + 4.94},
		direction		= {0,1,0},
		type				= 2,
		size				= {1,1,1},
		max_distance 	= 0,
	})
	found_battlePressure = false
	for _, entry in ipairs(hitList) do
		if entry.hit_object.tag == "Deck" then
			found_battlePressure = true
			deck_battle_pressure = entry.hit_object
			break
		end
	end
	if found_battlePressure then
		local cardsInDeck = deck_battle_pressure.getObjects()
		for _, card in ipairs(cardsInDeck) do
			if card.nickname == "Battle Pressure" then
				deck_battle_pressure.takeObject({guid = card.guid, position = {3.73, 6, -2.47}, smooth = true, rotation = {0,180,180}})
			end
		end
		broadcastToAll("Battle Pressure Returned to top of Hit Location Deck", {1,1,1})
	end
end










-- Buttons ---------------------------------------------------------------------
function createButtons(object, player)

	local btn_params = {
		click_function 	= '',
		function_owner 	= self,
		label 				= '',
		position 			= {},
		rotation 			= { - 5, 0, 0},
		scale 				= {1,1,1},
		width 				= 3600,
		height 				= 500,
		font_size 			= 400,
		color 				= {0, 0, 0, 0},
		font_color 			= {1, 1, 1, 100}
	}

	btn_params.click_function 	= "drawOrhighlight1"
	btn_params.position 			= {9.7, 0.1, -1}
	btn_params.label 				= "1"
	self.createButton(btn_params)

	btn_params.click_function 	= "drawOrhighlight2"
	btn_params.position 			= {18.8, 0.1, -1}
	btn_params.label 				= "2"
	self.createButton(btn_params)

	btn_params.click_function 	= "drawOrhighlight3"
	btn_params.position 			= {28.2, 0.1, -1}
	btn_params.label 				= "3"
	self.createButton(btn_params)

	btn_params.click_function 	= "drawOrhighlight4"
	btn_params.position 			= {37.9, 0.1, -1}
	btn_params.label 				= "4"
	self.createButton(btn_params)

	btn_params.click_function 	= "drawOrhighlight5"
	btn_params.position 			= {46.8, 0.1, -1}
	btn_params.label 				= "5"
	self.createButton(btn_params)

	btn_params.click_function 	= "drawOrhighlight6"
	btn_params.position 			= {56.2, 0.1, -1}
	btn_params.label 				= "6"
	self.createButton(btn_params)

	btn_params.click_function 	= "drawOrhighlight7"
	btn_params.position 			= {65.22, 0.1, -1}
	btn_params.label 				= "7"
	self.createButton(btn_params)

	btn_params.click_function 	= "end_wound_attempt"
	btn_params.position 			= {0, 0.2, 0.4}
	btn_params.label 				= "End Wound Attempts"
	btn_params.width 				= 6800
	btn_params.height				= 1000
	btn_params.font_size			= 1200
	btn_params.scale 				= {0.5, 1, 0.5}
	self.createButton(btn_params)

	btn_params.click_function 	= "callCritical"
	btn_params.position 			= {9.7, 0.1, 1}
	btn_params.label 				= "Auto Crit Position 1"
	btn_params.width 				= 3400
	btn_params.height				= 400
	btn_params.font_size			= 300
	btn_params.scale 				= {1,1,1}
	self.createButton(btn_params)
end
------------------------------------------
function createButton_move_camera_home(object, player)
	self.createButton({click_function = "move_camera_toHome", function_owner = self, label = "Home",
	position = {18.7, 0.1, 1}, rotation = { - 10, 0, 0}, scale = {1, 1, 1}, width = 3400, height = 400, font_size = 300, color = {0, 0, 0, 0}, font_color = {1, 1, 1, 100}})
end
------------------------------------------
function createButton_reactionTriggered()
	self.createButton({click_function = "dud", function_owner = self, label = "↧ Reaction Triggered ↧", position = {23, 2.2, -16.2},
	rotation = { - 10, 0, 0}, scale = {1.1, 1.1, 1.1}, width = 0, height = 0, font_size = 500, color = {0, 0, 0}, font_color = {1, 1, 1}})
end

function removeButton_ReactionTriggered()
	local btns = self.getButtons()
	for i, v in pairs(btns) do
		if v.label == "↧ Reaction Triggered ↧" then
			self.removeButton(v.index)
		end
	end
end
------------------------------------------
function createButton_survival_Opportunity()
	self.createButton({click_function = "dud", function_owner = self, label = "↧ Survival Opportunity ↧", position = {23, 2, -15.2},
	rotation = { - 10, 0, 0}, width = 0, height = 0, font_size = 500, color = {0, 0, 0}, font_color = {1, 1, 1}})
end

function removeButton_survival_opportunity()
	local btns = self.getButtons()
	for i, v in pairs(btns) do
		if v.label == "↧ Survival Opportunity ↧" then
			self.removeButton(v.index)
		end
	end
end
------------------------------------------
function createButton_resolve_attack()
	self.createButton({click_function = "resolve_attack", function_owner = self, label = "Finish Reaction", position = {23, 1.9, -13.9},
	rotation = { - 10, 0, 0}, width = 4000, height = 400, font_size = 500, color = {0, 0, 0}, font_color = {1, 1, 1}})
end

function removeButton_FinishReaction()
	local persistent = getObjectFromGUID('6d1dae')
	local btns = self.getButtons()
	for i, v in pairs(btns) do
		if v.label == "Finish Reaction" then
			self.removeButton(v.index)
		end
	end
end
------------------------------------------
function reactionsCancelled()
	self.createButton({click_function = "dud", function_owner = self, label = "Reactions Cancelled", position = {23, 1.9, - 19.8}, rotation = { - 10, 0, 0},
	width = 0, height = 0, font_size = 800, color = {0, 0, 0}, font_color = {1, 1, 1}})
end

function reactionsCancelled_endOfAttack()
	self.createButton({click_function = "endOfAttack", function_owner = self, label = "Reactions Cancelled", position = {23, 1.9, - 19.8}, rotation = { - 10, 0, 0}, width = 0, height = 0, font_size = 800, color = {0, 0, 0}, font_color = {1, 1, 1}})
end

function reactionsCancelled_nextWoundAttempt()
	self.createButton({click_function = "nextWoundAttempt", function_owner = self, label = "Reactions Cancelled", position = {23, 1.9, - 19.8}, rotation = { - 10, 0, 0}, width = 0, height = 0, font_size = 800, color = {0, 0, 0}, font_color = {1, 1, 1}})
end
------------------------------------------
function removeButton_Wound()
	-- Removes Wound Buttons when another Hit Location is selected
	local buttons = roller_SurvAttack_Right.getButtons()
	for i, v in pairs(buttons) do
		if v.label == "Wound" then
			roller_SurvAttack_Right.removeButton(v.index)
		end
	end
end
------------------------------------------














-- Draw or Hightlight Hit Location ---------------------------------------------
function drawOrhighlight1()
	cleanUp()
	removeButton_Wound()
	local zone = getObjectFromGUID(Global.getTable('zones').zoneHitLoc1.guid)
	foundCard = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), 'hit location') then
			object.highlightOn({0.856, 0.1, 0.094}, 6)
			local guid = object.guid
			hitLocation = {}
			table.insert(hitLocation, object.guid)
			object.call("addStatModifier")
			foundCard = true
			roller_SurvAttack_Right.call("woundButton1")
		end
	end
	if foundCard then
		check_HitLocation_Modifiers()
	end
	if not foundCard then
		drawHitLocations1()
	end
end

function drawHitLocations1()
	local objectsInZone = zone_toDraw.getObjects()
	for _, obj in ipairs(objectsInZone) do
		if obj.tag == "Deck" then
			obj.takeObject({position = {8.61, 5.14, - 2.35}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		elseif obj.tag == "Card" then
			obj.setLock(true)
			obj.setPositionSmooth({8.61, 5.14, -2.35}, false, false)
			obj.setRotationSmooth({35, 180, 0}, false, false)
		end
	end
end
----------------------------------
function drawOrhighlight2()
	cleanUp()
	removeButton_Wound()
	local zone = getObjectFromGUID(Global.getTable('zones').zoneHitLoc2.guid)
	foundCard = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), 'hit location') then
			roller_SurvAttack_Right.call("woundButton2")
			object.highlightOn({0.856, 0.1, 0.094}, 6)
			local guid = object.guid
			hitLocation = {}
			table.insert(hitLocation, object.guid)
			object.call("addStatModifier")
			foundCard = true
		end
	end
	if foundCard then
		check_HitLocation_Modifiers()
	end
	if not foundCard then
		drawHitLocations2()
	end
end

function drawHitLocations2()
	local objectsInZone = zone_toDraw.getObjects()
	local pos = first_HL_pos
	for _, obj in ipairs(objectsInZone) do
		for i=1, 2 do
			obj.takeObject({position = {pos.x + i * 2.44, pos.y, pos.z}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		end
		--obj.takeObject({position = {8.61, 5.13, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		--obj.takeObject({position = {11.07, 5.13, - 2.45}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
	end
end
----------------------------------
function drawOrhighlight3()
	cleanUp()
	removeButton_Wound()
	local zone = getObjectFromGUID(Global.getTable('zones').zoneHitLoc3.guid)
	foundCard = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), 'hit location') then
			roller_SurvAttack_Right.call("woundButton3")
			object.highlightOn({0.856, 0.1, 0.094}, 6)
			local guid = object.guid
			hitLocation = {}
			table.insert(hitLocation, object.guid)
			object.call("addStatModifier")
			foundCard = true
		end
	end
	if foundCard then
		check_HitLocation_Modifiers()
	end

	if not foundCard then
		drawHitLocations3()
	end
end

function drawHitLocations3()
	local objectsInZone = zone_toDraw.getObjects()
	local pos = first_HL_pos
	for _, obj in ipairs(objectsInZone) do
		for i=1, 3 do
			obj.takeObject({position = {pos.x + i * 2.44, pos.y, pos.z}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		end
	end
end
----------------------------------
function drawOrhighlight4()
	cleanUp()
	removeButton_Wound()
	local zone = getObjectFromGUID(Global.getTable('zones').zoneHitLoc4.guid)
	foundCard = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), 'hit location') then
			roller_SurvAttack_Right.call("woundButton4")
			object.highlightOn({0.856, 0.1, 0.094}, 6)
			local guid = object.guid
			hitLocation = {}
			table.insert(hitLocation, object.guid)
			object.call("addStatModifier")
			foundCard = true
		end
	end
	if foundCard then
		check_HitLocation_Modifiers()
	end

	if not foundCard then
		drawHitLocations4()
	end
end

function drawHitLocations4()
	local objectsInZone = zone_toDraw.getObjects()
	local pos = first_HL_pos
	for _, obj in ipairs(objectsInZone) do
		for i=1, 4 do
			obj.takeObject({position = {pos.x + i * 2.44, pos.y, pos.z}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		end
	end
end
----------------------------------
function drawOrhighlight5()
	cleanUp()
	removeButton_Wound()
	local zone = getObjectFromGUID(Global.getTable('zones').zoneHitLoc5.guid)
	foundCard = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), 'hit location') then
			roller_SurvAttack_Right.call("woundButton5")
			object.highlightOn({0.856, 0.1, 0.094}, 6)
			local guid = object.guid
			hitLocation = {}
			table.insert(hitLocation, object.guid)
			object.call("addStatModifier")
			foundCard = true
		end
	end
	if foundCard then
		check_HitLocation_Modifiers()
	end

	if not foundCard then
		drawHitLocations5()
	end
end

function drawHitLocations5()
	local objectsInZone = zone_toDraw.getObjects()
	local pos = first_HL_pos
	for _, obj in ipairs(objectsInZone) do
		for i=1, 5 do
			obj.takeObject({position = {pos.x + i * 2.44, pos.y, pos.z}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		end
	end
end
----------------------------------
function drawOrhighlight6()
	cleanUp()
	removeButton_Wound()
	local zone = getObjectFromGUID(Global.getTable('zones').zoneHitLoc6.guid)
	foundCard = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), 'hit location') then
			roller_SurvAttack_Right.call("woundButton6")
			object.highlightOn({0.856, 0.1, 0.094}, 6)
			local guid = object.guid
			hitLocation = {}
			table.insert(hitLocation, object.guid)
			object.call("addStatModifier")
			foundCard = true
		end
	end
	if foundCard then
		check_HitLocation_Modifiers()
	end
	if not foundCard then
		drawHitLocations6()
	end
end

function drawHitLocations6()
	local objectsInZone = zone_toDraw.getObjects()
	local pos = first_HL_pos
	for _, obj in ipairs(objectsInZone) do
		for i=1, 6 do
			obj.takeObject({position = {pos.x + i * 2.44, pos.y, pos.z}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		end
	end
end
----------------------------------
function drawOrhighlight7()
	cleanUp()
	removeButton_Wound()
	local zone = getObjectFromGUID(Global.getTable('zones').zoneHitLoc7.guid)
	foundCard = false
	for _, object in ipairs(zone.getObjects()) do
		if string.find(object.getDescription(), 'hit location') then
			roller_SurvAttack_Right.call("woundButton7")
			object.highlightOn({0.856, 0.1, 0.094}, 6)
			local guid = object.guid
			hitLocation = {}
			table.insert(hitLocation, object.guid)
			object.call("addStatModifier")
			foundCard = true
		end
	end
	if foundCard then
		check_HitLocation_Modifiers()
	end

	if not foundCard then
		drawHitLocations7()
	end
end

function drawHitLocations7()
	local objectsInZone = zone_toDraw.getObjects()
	local pos = first_HL_pos
	for _, obj in ipairs(objectsInZone) do
		for i=1, 7 do
			obj.takeObject({position = {pos.x + i * 2.44, pos.y, pos.z}, top = true, callback = "set_locked_hitlocation", callback_owner = Global})
		end
	end
end
----------------------------------









-- Utility Functions -----------------------------------------------------------

function cleanUp()
	local zone = getObjectFromGUID(Global.getTable('zones').zoneAIBoard.guid)
	for _, tok in ipairs(zone.getObjects()) do
		if string.find(tok.getDescription(), "end of wound attempt") then
			tok.destroy()
		end
	end

	local cleanUpList = Global.getTable('cleanUpHitLocation')
	if next(cleanUpList) == nil then return end
	for k, v in ipairs(cleanUpList) do
		if v ~= nil then
			v.destruct()
		end
	end
	Global.setTable('cleanUpHitLocation', {})
end

function wait(time)
	local start = os.time()
	--each frame the coroutine is given control back, but we immediately call coroutine.yield() again until we exceed the time limit
	repeat
		coroutine.yield(0)
	until os.time() > start + time
end

function callCritical(object, player_color)
	local zonesTable = Global.getTable('zones')
	local zone = getObjectFromGUID(zonesTable.zoneHitLoc1.guid)
	for _, v in pairs(zone.getObjects()) do
		if v.tag == "Card" then
			v.call("criticalWoundEffect")
			startLuaCoroutine(Global, "printWound")
		end
	end
end

function end_wound_attempt()
	--check_Reactions_Cancelled()
	removeButton_ReactionTriggered()
	removeButton_FinishReaction()
	removeButton_survival_opportunity()
	get_hitLocations_toDiscard()
end

function get_hitLocations_toDiscard()
	table_discard = {}
	for _, card in ipairs(zoneRight_drawnHit.getObjects()) do
		if string.find(card.getDescription(), "hit location") then
			local guid = card.getGUID()
			table.insert(table_discard, card.guid)
		end
	end
	startLuaCoroutine(self, "discard_hitLocations")
end

function discard_hitLocations()
	for k, v in ipairs(table_discard) do
		obj = getObjectFromGUID(v)
		wait(0.2)
		obj.setRotationSmooth({0,180,0})
		obj.setPositionSmooth({6.16, 6, -2.45})
		obj.setLock(false)
	end
	return 1
end

function check_HitLocation_Modifiers()
	local persistent = getObjectFromGUID('6d1dae')
	for k, v in ipairs(hitLocation) do
		obj = getObjectFromGUID(v)
		local desc = obj.getDescription()

		if string.find(desc, "flank bonus") then
			persistent.call("checkFlank")

		elseif string.find(desc, "light penalty") then
			persistent.call("checkLightPenalty")
		end
	end
end

function resolve_attack()

	removeButton_ReactionTriggered()
	removeButton_FinishReaction()
	removeButton_survival_opportunity()

	-- Function Call > Hit Location Card
	for k, v in pairs(hitLocation) do
		obj = getObjectFromGUID(v)
		obj.call('reflexEffect')

		local bool = roller_SurvAttack_Right.getVar("isWounded")
		if bool then
			obj.call('woundEffect')
		else
			obj.call('failureEffect')
		end
		obj.setPositionSmooth({6.16, 5, - 2.46}, false, false)
	end

	hitLocation = {}

	for _, die in ipairs(zoneRight_drawnHit.getObjects()) do
		if die.tag == "Dice" then
			die.destroy()
		end
	end

	grid = roller_SurvAttack_Right.getVar("grid")
	msg_color = grid.getTable("msg_color")
	--color = grid.getVar("color")
	local msg_color = {color = msg_color}
	Global.setTable("broadcast_msg_color", msg_color)

	startLuaCoroutine(Global, "printWoundReaction")
	startLuaCoroutine(Global, "printReflex")
	startLuaCoroutine(Global, "printFailure")
	Global.call("clearBroadcast")
end

function move_camera_toHome(object, player)
	playerLookAt(player, {-1.34, 4.54, -4.04})
end

-- not done yet
--[[function return_hasDaggerProf(hasDaggerProf)
	hasDaggerProf = false
	for _, obj in ipairs(zoneRight_drawnHit.getObjects()) do
		if obj.getName() == "Dagger" and obj.getRotation().z > 165 and obj.getRotation().z < 195 then
			hasDaggerProf = true
		end
	end
	return hasDaggerProf
end]]

function endOfAttack() end
function nextWoundAttempt() end
function dud() end

--TODO; deprecate if unused
--[[function check_Reactions_Cancelled()
	-- Sets Reactions Cancelled to either 'end of attack' or 'end of round'
	cancelReactions_endOfAttack = false
	cancelReactions_endOfRound = false
	local setting_knockdown = getObjectFromGUID('8b5860')
	if setting_knockdown.getRotation().z < 65 then
		cancelReactions_endOfAttack = true
	elseif setting_knockdown.getRotation().z > 165 then
		cancelReactions_endOfRound = true
	end

	local isKnockedDown = roller_SurvAttack_Right.getVar("monster_knocked_down")
	if isKnockedDown or cancelReactions_endOfRound then return end

	-- Enables reactions at end of wound IF monster NOT knocked down
	--if not isKnockedDown or cancelReactions_endOfAttack then
	--remove_reactionsCancelled()
	--end
end]]

-- deprecate
--[[function reshuffle_hitLocations_butcher()
	hitTool_pos = self.getPosition()

	-- Checks for if any cards Left in Hit Location Deck
	found_deck_hitLocations = false
	local hitList = Physics.cast({origin={hitTool_pos.x - 2.5, hitTool_pos.y, hitTool_pos.z + 2.5}, direction={0,1,0}, type=2, size={1,1,1},max_distance = 0})
	for _, entry in ipairs(hitList) do
		if entry.hit_object.tag == "Deck" then
			found_deck_hitLocations = true
			deck_hitLocations = entry.hit_object
		end
	end
	-- If there are, resets the deck
	if found_deck_hitLocations then
		--deck_hitLocations.reset()
		deck_hitLocations.shuffle()
		--startLuaCoroutine(self, "deck_hitLocation_shuffle_coR")
	--else
		hitLocation_Zones = {
			zone1 = getObjectFromGUID(Global.getTable('zonesDestruct').zoneAIBoard.guid),
			zone2 = getObjectFromGUID(Global.getTable('zones').zoneRight_drawnHit.guid),
			zone3 = getObjectFromGUID(Global.getTable('zones').zoneLeft_drawnHit.guid),
		}

		for zoneKey, zoneGUIDtable in pairs(hitLocation_Zones) do
			local zoneGUID = zoneGUIDtable.guid
			local zone = getObjectFromGUID(zoneGUID)
			for _, card in ipairs(zone.getObjects()) do
				if string.find(card.getDescription(), "hit location") then
					card.setRotationSmooth({0, 180, 180}, false, false)
					card.setPositionSmooth({3.73, 6, -2.47}, false, false)
					card.setLock(false)
					startLuaCoroutine(self, "deck_hitLocation_shuffle_coR")
				end
			end
		end
	end
end--]]

-- deprecate
--[[function removeButton_reshuffledHitLocations()
local btns = self.getButtons()
for i, v in pairs(btns) do
if v.label == "Reshuffle Hit Locations" then
self.removeButton(v.index)
end
end
end--]]

-- end right hit tool ----------------------------------------------------------
