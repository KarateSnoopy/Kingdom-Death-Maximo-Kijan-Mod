--Clicker Roller Universal      by: MrStump
setting = {print={}} --Don't edit this line

--To change the die that this tool rolls, right click it and hit reset
--Then drop the die you want onto the tool (it is an infinite bag)
--Die must have rotation values! (from the Gizmo Tool)

--Edit the below variables to modify the functionality of this device

--Disables the button, places indicator of roll locations (true or false)
setting.setup = false

--How far from the center of the device the dice are spawned
setting.radius = 12
--How wide of an arch the dice are placed on, in degrees (1-360)
setting.arc = 120
--Where center of the arc is around the tool is placed (0=bottom, 180=top)
setting.rotation = 0
--Height above tool die is spawned
setting.height = 2
--Scaling factor for die being spawned (1 is normal, 0.5 is 1/2 size, 2 is 2x)
setting.scale = 0.5

--Maximum dice that can be spawned by this tool (-1 is infinite)
setting.maxCount = 10
--Delay (seconds) after a click that the roll is done (0.5 or more)
setting.rollDelay = 1.2
--Time before dice are cleaned up (0 is instant, -1 won't clean them)
setting.cleanupDelay = 30

--If it dyes the die the color of the player clicking (true or false)
setting.colorDie = false

--Turn on/off printing of the player who rolled (true or false)
setting.print.player = true
--Turn on/off printing of individual results
setting.print.individual = true
--Turn on/off printing of "total" results (adding them together)
setting.print.total = false
--Use player color when printing roll results:
setting.print.playerColor = true

--If this tool will work with other copies of itself (true or false)
--Any roller clicked by the same color player will be treated as the same
setting.coop = false

cleanUpOnly = false

--[[Save function (triggered when adding a die or clearing the dice)
function onSave()
    local tableToSave = {}
    for _, die in ipairs(spawnedDice) do
        if die ~= nil then
            table.insert(tableToSave, die.getGUID())
        end
    end
    saved_data = JSON.encode(tableToSave)
    return saved_data
end ]]--

die_pos = {x = 9.00, y = 4.32, z = -39.85}

function onload(saved_data)
	deckINJ = getObjectFromGUID(Global.getTable('decks_toSearch').deckINJ.guid)
	pos_toSpawn_Injury = Global.getTable('pos_toSpawn_Injury')
	initButtonsTable()
	createButtons()
	if saved_data ~= "" then
		--Remove any old dice from the table
		local loaded_data = JSON.decode(saved_data)
		for _, dieGUID in ipairs(loaded_data) do
			local die = getObjectFromGUID(dieGUID)
			if die ~= nil then
				destroyObject(die)
			end
		end
		spawnedDice = {}
	else
		spawnedDice = {}
	end
	math.randomseed(os.time())
end

--Button Formatting Variables
function initButtonsTable()
	scaleButtons = {1, 1, 1}
	buttons = {}
	buttons.counter = {
		width = 0, height = 0, font = 800,
		ox = 1, oz = 0, ow = 200, oh = 200
	}
	buttons.button = {
		width = 2500, height = 700, font = 800
	}
	buttons.label = {
		width = 0, height = 0, font = 600
	}
end

--Creates First Button - when clicked creates color buttons
function createButtons()
	--if setting.setup ~= true then
	self.createButton({
		click_function="setupButton", function_owner=self,
		position={0,0.05,0}, height=650, width=650, color={1,1,1,0}})
end

function redClicked()
	grid = getObjectFromGUID(Global.getTable("grids").red.guid)
	zone = getObjectFromGUID(Global.getTable('zones').zoneP1.guid)
	settings_token = getObjectFromGUID(Global.getTable('user_settings').settings_P1_token.guid)
	msg_color = settings_token.getColorTint()
	zone_check()
	self.setName("P1")
end

function yellowClicked()
	grid = getObjectFromGUID(Global.getTable("grids").yellow.guid)
	zone = getObjectFromGUID(Global.getTable('zones').zoneP2.guid)
	settings_token = getObjectFromGUID(Global.getTable('user_settings').settings_P2_token.guid)
	msg_color = settings_token.getColorTint()
	zone_check()
	self.setName("P2")
end

function greenClicked()
	grid = getObjectFromGUID(Global.getTable("grids").green.guid)
	zone = getObjectFromGUID(Global.getTable('zones').zoneP3.guid)
	settings_token = getObjectFromGUID(Global.getTable('user_settings').settings_P3_token.guid)
	msg_color = settings_token.getColorTint()
	zone_check()
	self.setName("P3")
end

function blueClicked()
	grid = getObjectFromGUID(Global.getTable("grids").blue.guid)
	zone = getObjectFromGUID(Global.getTable('zones').zoneP4.guid)
	settings_token = getObjectFromGUID(Global.getTable('user_settings').settings_P4_token.guid)
	msg_color = settings_token.getColorTint()
	zone_check()
	self.setName("P4")
end

function check_for_manhunterHitlocations()
	ripplingAbs = false
	local pos = self.getPosition()
	local hitList = Physics.cast({origin={pos.x, 4.96, pos.z - 3}, direction={0,1,0}, type=2, size={1,1,1},max_distance = 0})
	for _, entry in ipairs(hitList) do
		if entry.hit_object.getName() == "Rippling Abs" then
			entry.hit_object.destroy()
			ripplingAbs = true
		end
	end
	if not cleanUpOnly then
		if ripplingAbs then
			broadcastToAll("Rippling Abs: You gained (+1) to this Severe Injury Roll", {1,1,1})
		end
	end
end

function zone_check()
	clearButtons()
	check_for_manhunterHitlocations()

	local zoneInjuryBoard = getObjectFromGUID(Global.getTable('zones').zoneInjuryBoard.guid)
	for _, object in ipairs(zoneInjuryBoard.getObjects()) do
		if object.getName() == "Top of the Food Chain" then
			broadcastToAll("Top of the Food Chain: You gained (-3) to this Severe Injury Roll", msg_color)
			topFoodChain = true
		end
		if object.getName() == "You've Already Lost" then
			broadcastToAll("You've Already Lost: You gained (-1) to this Severe Injury Roll", msg_color)
			alreadyLost = true
		end
	end

	for _, object in ipairs(zone.getObjects()) do
		-- Tough
		if object.getName() == "Tough" and object.getRotation().z < 165 then
			broadcastToAll("Tough: (+1) added to this roll ~ If you roll a 1 ~ You Die Anyway", msg_color)
			tough = true

		-- Dried Acanthus
		elseif object.getName() == "Dried Acanthus" then
			Global.call('addBroadcast', {"injury", {effect = "_________ Ignore this Injury and Archive Dried Acanthus _________", effect2 = ""}})

		-- Crystal Skin
		elseif object.getName() == "Crystal Skin" and object.getRotation().z < 165 then
			broadcastToAll("Crystal Skin: You suffered (-2) to this Severe Injury Roll", msg_color)
			crystalSkin = true

		-- Leprosy
		elseif object.getName() == "Leprosy" then
			broadcastToAll("Leprosy: You suffered (-2) to this Severe Injury Roll", msg_color)
			leprosy = true

		-- Rageholic
		elseif object.getName() == "Rageholic" then
			Global.call('addBroadcast', {"injury", {effect = "_________ Rageholic ~ Suffer Frenzy _________", effect2 = ""}})

		-- Wardrobe Expert
		elseif object.getName() == "Wardrobe Expert" and object.getRotation().z < 165 then
			Global.call('addBroadcast', {"injury", {effect = "_________ Wardrobe Expert Triggered _________", effect2 = ""}})

		-- Life Elixir
		elseif object.getName() == "Life Elixer" then
			Global.call('addBroadcast', {"injury", {effect = "_________ Life Elixer Triggered _________", effect2 = ""}})

		-- Unbreakable
		elseif object.getName() == "Unbreakable" and object.getRotation().z < 165 then
			Global.call('addBroadcast', {"injury", {effect = "_________ Unbreakable Triggered _________", effect2 = ""}})

		----------- Location Specific --------------
		-- Pristine
		elseif object.getName() == "Pristine" and object.getRotation().z < 165 then
			hasPristine = true
		end
	end
	Timer.create({identifier = "roller"..self.guid,delay = 0.5, function_name = "click_roll", parameters = {playerColor = playerColorClicked}})
end

function setupButton()
	local btn_params = {
		click_function = "",
		function_owner = self,
		label = "",
		position = {},
		scale = {0.5, 1, 0.5},
		width = 2000,
		height = 600,
		font_size = 500,
		color = {0, 0, 0},
		font_color = {},
	}
	-- Player 1 -----------------------------------------------------------------
	label_P1 = ""
	local zoneP1 = getObjectFromGUID(Global.getTable('zones').zoneP1.guid)
	for _, obj in ipairs(zoneP1.getObjects()) do
		if string.find(obj.getDescription(), "SurvivorSheet") then
			label_P1 = obj.getName()
		end
	end
	settings_P1_token = getObjectFromGUID(Global.getTable('user_settings').settings_P1_token.guid)
	sigil = settings_P1_token.getName()
	font_color_P1 = settings_P1_token.getColorTint()
	btn_params.label = tostring(" " .. sigil .. "  " .. label_P1 .. "  " .. sigil .. " ")
	btn_params.click_function = "redClicked"
	btn_params.position = {0, 0.1, -3.85}
	btn_params.font_color = font_color_P1
	self.createButton(btn_params)

	-- Player 2 -----------------------------------------------------------------
	label_P2 = ""
	local zoneP2 = getObjectFromGUID(Global.getTable('zones').zoneP2.guid)
	for _, obj in ipairs(zoneP2.getObjects()) do
		if string.find(obj.getDescription(), "SurvivorSheet") then
			label_P2 = obj.getName()
		end
	end
	settings_P2_token = getObjectFromGUID(Global.getTable('user_settings').settings_P2_token.guid)
	sigil = settings_P2_token.getName()
	font_color_P2 = settings_P2_token.getColorTint()
	btn_params.label = tostring(" " .. sigil .. "  " .. label_P2 .. "  " .. sigil .. " ")
	btn_params.click_function = "yellowClicked"
	btn_params.position = {0, 0.1, -3.1}
	btn_params.font_color = font_color_P2
	self.createButton(btn_params)

	-- Player 3 -----------------------------------------------------------------
	label_P3 = ""
	local zoneP3 = getObjectFromGUID(Global.getTable('zones').zoneP3.guid)
	for _, obj in ipairs(zoneP3.getObjects()) do
		if string.find(obj.getDescription(), "SurvivorSheet") then
			label_P3 = obj.getName()
		end
	end
	settings_P3_token = getObjectFromGUID(Global.getTable('user_settings').settings_P3_token.guid)
	sigil = settings_P3_token.getName()
	font_color_P3 = settings_P3_token.getColorTint()
	btn_params.label = tostring(" " .. sigil .. "  " .. label_P3 .. "  " .. sigil .. " ")
	btn_params.click_function = "greenClicked"
	btn_params.position = {0, 0.1, -2.35}
	btn_params.font_color = font_color_P3
	self.createButton(btn_params)

	-- Player 4 -----------------------------------------------------------------
	label_P4 = ""
	local zoneP4 = getObjectFromGUID(Global.getTable('zones').zoneP4.guid)
	for _, obj in ipairs(zoneP4.getObjects()) do
		if string.find(obj.getDescription(), "SurvivorSheet") then
			label_P4 = obj.getName()
		end
	end
	settings_P4_token = getObjectFromGUID(Global.getTable('user_settings').settings_P4_token.guid)
	sigil = settings_P4_token.getName()
	font_color_P4 = settings_P4_token.getColorTint()
	btn_params.label = tostring(" " .. sigil .. "  " .. label_P4 .. "  " .. sigil .. " ")
	btn_params.click_function = "blueClicked"
	btn_params.position = {0, 0.1, -1.5}
	btn_params.font_color = font_color_P4
	self.createButton(btn_params)
end

function get_effects()
	local set_Visual = getObjectFromGUID(Global.getTable('user_settings').set_Visual.guid)
	local rotZ = set_Visual.getRotation().z
	if rotZ < 10 or rotZ > 350 then
		--local pos = self.getPosition()
		local bag_effect_orb = getObjectFromGUID('679eee')
		effect_orb = bag_effect_orb.takeObject({
			position				= {9.00, 6.65, -33.26},
			smooth				= false,
			callback				= "lock_callback",
			callback_owner		= Global
		})
		effect_orb.AssetBundle.playLoopingEffect(2)
		pos_orb = effect_orb.getPosition()
		effect_orb.setPositionSmooth({9.00, 6.65, -38.75})
		local orb_rot = effect_orb.getRotation()
	end
end

function destroy_effect_coR()
	wait(3)
	if effect_orb ~= nil then
		effect_orb.destroy()
	end
	return 1
end

function clearButtons()
	self.clearButtons()
	createButtons()
end

--Spawn dice for rolling
function click_roll(_, color)
	--Dice spam protection check
	local denyRoll = false
	if setting.maxCount > 0 and #spawnedDice >= setting.maxCount then
		denyRoll = true
	end
	if rollInProgress==nil and denyRoll==false and anyRollInProgress(color)==false then
		--Find dice positions, moving previously spawned dice if needed
		--local angleStep = arcTotalLength / (#currentDice+1)
		for i, die in ipairs(spawnedDice) do
			local pos_local = getLocalPointOnArc(i, #spawnedDice+1)
			local pos = self.positionToWorld(pos_local)
			die.setPositionSmooth(pos)
		end

		--Spawns dice
		get_effects()
		local pos_local = getLocalPointOnArc(#spawnedDice+1, #spawnedDice+1)
		local spawnedDie = self.takeObject({
			position = self.positionToWorld(pos_local),
			rotation = randomRotation(),
		})


		--Setup die that was just spawned
		spawnedDie.setScale({setting.scale,setting.scale,setting.scale})
		spawnedDie.setLock(true)
		if setting.colorDie == true then
			spawnedDie.setColorTint(stringColorToRGB(color))
		end
		--This line stops the die from re-entering the bag
		spawnedDie.script_state = " "

		rollTimerUpdate({color=color})

		--Update data
		table.insert(spawnedDice, spawnedDie)
		updateGlobalTable(color)
		updateRollTimers(color)

	elseif rollInProgress == false then
		--If after roll but before cleanup
		cleanupDice()
		click_roll(_, color)
		--else
		--If button click is denied due to roll (or 2 many dice)
		--Player[color].broadcast("Roll in progress.", {0.8, 0.2, 0.2})
	end
end

function rollTimerUpdate(param)
	--Timer starting
	Timer.destroy("clickRoller_"..self.getGUID())
	Timer.create({
		identifier="clickRoller_"..self.getGUID(), delay=setting.rollDelay,
		function_name="timer_rollDice", function_owner=self,
		parameters = param
	})
end

--Rolls all the dice and then launches monitoring
function timer_rollDice(p)

	rollInProgress = true
	function coroutine_rollDice()
		for _, die in ipairs(spawnedDice) do
			die.setLock(false)
			die.randomize()
			wait(0.1)
		end

		monitorDice(p.color)

		return 1
	end
	startLuaCoroutine(self, "coroutine_rollDice")
end

--Monitors dice to come to rest
function monitorDice(color)
	function coroutine_monitorDice()
		repeat
			local allRest = true
			for _, die in ipairs(spawnedDice) do
				if die ~= nil and die.resting == false then
					allRest = false
				end
			end
			coroutine.yield(0)
		until allRest == true

		if areOtherRollersRolling(color)==true and setting.coop==true then
			--If other coop rollers are rolling
			rollingHasStopped = true
			return 1
		else
			--If roll is complete and no further waiting is required
			if setting.print.individual==true or setting.print.total==true then
				displayResults(color)
			end
			finalizeRoll({color=color})
			if setting.coop == true then finalizeCoopRolls(color) end
		end

		return 1
	end
	startLuaCoroutine(self, "coroutine_monitorDice")
end

function finalizeRoll(p)
	local color = p.color
	rollingHasStopped = nil --Used for coop communication
	rollInProgress = false --Used for button lockout
	updateGlobalTable(nil)

	--Auto die removal
	if setting.cleanupDelay > -1 then
		--Timer starting
		Timer.destroy("clickRoller_cleanup_"..self.getGUID())
		Timer.create({
			identifier="clickRoller_cleanup_"..self.getGUID(),
			function_name="cleanupDice", function_owner=self,
			delay=setting.cleanupDelay,
		})
	end
end

--Removes the dice
function cleanupDice()
	for _, die in ipairs(spawnedDice) do
		if die ~= nil then
			destroyObject(die)
		end
	end
	rollInProgress = nil
	spawnedDice = {}
	Timer.destroy("clickRoller_cleanup_"..self.getGUID())
end

function displayResults(color)
	local s, valueTable = "", {}

	addAllSpawnedDice(color)
	--Get values in table
	for _, die in ipairs(spawnedDice) do
		if die ~= nil then
			table.insert(valueTable, tostring(die.getRotationValue()))
			local value = die.getValue()
			value = die.getValue()

			local rotY = die.getRotation().y - die.getRotation().y
			local rotX = die.getRotation().x
			local rotZ = die.getRotation().z
			die.setRotationSmooth({rotX, rotY, rotZ}, false, true)
			if value == 2 or value == 4 or value == 6 or value == 8 or value == 10 then
				die.setRotationSmooth({die.getRotation().x, 180, die.getRotation().z}, false, true)
			end

			local set_Visual = getObjectFromGUID(Global.getTable('user_settings').set_Visual.guid)
			local rotZ = set_Visual.getRotation().z
			if rotZ < 10 or rotZ > 350 then
				effect_orb.setPositionSmooth({die_pos.x, die_pos.y - 5.35, die_pos.z})
				startLuaCoroutine(self, "destroy_effect_coR")
			end
			die.setPositionSmooth(die_pos, false, false)
			die.setLock(true)

			if (tough) then
				value = value + 1
			end
			if (ripplingAbs) then
				value = value + 1
			end
			if (topFoodChain) then
				value = value - 3
			end
			if (alreadyLost) then
				value = value -1
			end
			if (crystalSkin) then
				value = value - 2
			end
			if (leprosy) then
				value = value - 2
			end

			if value <= 1 then
				broadcastToAll("☠ Blood Geyser _____ You die in seconds ☠", msg_color)

			elseif value == 2 or value == 3 then
				broadcastToAll("☠  _____ Gain 2 Bleeding Tokens _____ ☠", msg_color)

			elseif value == 4 then
				broadcastToAll("☠ Dismembered Leg _____ (-2) Permanent Movement _____ Gain 1 Bleeding Token ☠", msg_color)
				getLeg4()
				-- When a Survivor Dies - Monster AI Card effects
				local zoneInjuryBoard = getObjectFromGUID(Global.getTable('zones').zoneInjuryBoard.guid)
				-- Enraged
				for _, card in ipairs(zoneInjuryBoard.getObjects()) do
					if card.getName() == "Enraged" then
						broadcastToAll("Enraged ~ was Discarded for Survivor Dismemberment", {1,1,1})
						local pos = Global.getTable("AI_discard_pos")
						card.setPosition({position = pos})
					end
				end -- end

			elseif value == 5 then
				broadcastToAll("☠ Hamstrung  _____ Gain 1 Bleeding Token ☠", msg_color)
				getLeg5()

			elseif value == 6 then
				broadcastToAll("☠ Torn Achilles Tendon  _____ Gain 1 Bleeding Token ☠", msg_color)
				getLeg6()

			elseif value == 7 then
				broadcastToAll("☠ Torn Muscle _____ You cannot Dash until the Showdown Ends _____ Gain 1 Bleeding Token ☠", msg_color)
				getLeg7()

			elseif value == 8 then
				broadcastToAll("☠ Broken Leg _____ (-1) Permanent Movement _____ Gain 1 Bleeding Token ☠", msg_color)
				getLeg8()

			elseif value == 9 then
				broadcastToAll("☠ Hamstrung  _____ Gain 2 Bleeding Tokens ☠", msg_color)

			elseif value >= 10 then
				broadcastToAll("☠  _____ You are knocked down _____ ☠", msg_color)
			end
		end
	   topFoodChain = false
	   tough = false
	   ripplingAbs = false
	   crystalSkin = false
	   leprosy = false
		alreadyLost = false
	end

	--Individual values
	if setting.print.individual == true then
		--Add values to string
		for i, value in ipairs(valueTable) do
			s = s .. value
			if i < #valueTable then
				s = s .. ", "
			end
		end
		if setting.print.total==true then
			s = s .. "    " .. string.char(9679) .. "    "
		end
	end

	--Total (will be void if there are no numbers)
	if setting.print.total == true then
		local total, hadNumber = 0, false
		for _, value in ipairs(valueTable) do
			if tonumber(value) ~= nil then
				total = total + tonumber(value)
				hadNumber = true
			end
		end
		if hadNumber == true then
			s = s .. tostring(total)
		else
			s = s .. "---"
		end
	end

	--Establish color
	local stringColor = {1,1,1}
	if setting.print.playerColor == true then
		stringColor = stringColorToRGB(color)
	end
end

--Updates global rolling table with its information
function updateGlobalTable(color)
	if setting.coop==true then
		local currentTable = Global.getTable("UCR_communication")
		if currentTable == nil then
			Global.setTable("UCR_communication", {[self]=color})
		else
			currentTable[self] = color
			Global.setTable("UCR_communication", currentTable)
		end
	end
end

--Updates roll timers for all devices currently rolling
function updateRollTimers(color)
	if setting.coop==true then
		local currentTable = Global.getTable("UCR_communication")
		if currentTable != nil then
			for who, c in pairs(currentTable) do
				if who~=self and c==color then
					who.call("rollTimerUpdate", {color=color})
				end
			end
		end
	end
end

--Check if any other roller is rolling
function areOtherRollersRolling(color)
	if setting.coop==true then
		local currentTable = Global.getTable("UCR_communication")
		if currentTable == nil then
			--If there is no table in global
			return false
		else
			--If there is, check the contents
			for who, c in pairs(currentTable) do
				--Check if the entry is for this color (and not self)
				if who~=self and c==color then
					--Check for if the other object is still rolling
					if who.getVar("rollingHasStopped") ~= true then
						return true
					end
				end
			end
		end
		return false
	else
		return false
	end
end

--Check if any other roller is rolling
function anyRollInProgress(color)
	if setting.coop==true then
		local currentTable = Global.getTable("UCR_communication")
		if currentTable == nil then
			--If there is no table in global
			return false
		else
			--If there is, check the contents
			for who, c in pairs(currentTable) do
				--Check if the entry is for this color (and not self)
				if who~=self and c==color then
					--Check for if the other object is still rolling
					if who.getVar("rollInProgress") ~= nil then
						return true
					end
				end
			end
		end
		return false
	else
		return false
	end
end

--Activate the finalize step on all dice of this color
function finalizeCoopRolls(color)
	if setting.coop==true then
		local currentTable = Global.getTable("UCR_communication")
		if currentTable != nil then
			for who, c in pairs(currentTable) do
				if c==color then
					who.call("finalizeRoll", {color=color})
				end
			end
		end
	end
end

--Combines all spawnedDice tables from all coop rollers
function addAllSpawnedDice(color)
	if setting.coop==true then
		local currentTable = Global.getTable("UCR_communication")
		if currentTable != nil then
			for who, c in pairs(currentTable) do
				if who~=self and c==color then
					theirSpawnedDice = who.getTable("spawnedDice")
					if theirSpawnedDice ~= nil then
						for _, die in ipairs(theirSpawnedDice) do
							table.insert(spawnedDice, die)
						end
					end
				end
			end
		end
	end
end

--Finds a local point an an arc, given which point and the total # of points
function getLocalPointOnArc(i, points)
    --This evens it out
    i = i - 0.5
    --What the length of arc this points at (how far along an arc)
    local angle = setting.arc/(points)
    --How much to rotate the angle around the tool
    local offset = -setting.arc/2 + setting.rotation
    --Converting those 2 elements into a local position
    local x = math.sin( math.rad(angle*i+offset) ) * setting.radius
    local y = setting.height
    local z = math.cos( math.rad(angle*i+offset) ) * setting.radius
    return {x=x,y=y,z=z}
end

--Gets a random rotation vector
function randomRotation()
    --Credit for this function goes to Revinor (forums)
    --Get 3 random numbers
    local u1 = math.random();
    local u2 = math.random();
    local u3 = math.random();
    --Convert them into quats to avoid gimbal lock
    local u1sqrt = math.sqrt(u1);
    local u1m1sqrt = math.sqrt(1-u1);
    local qx = u1m1sqrt *math.sin(2*math.pi*u2);
    local qy = u1m1sqrt *math.cos(2*math.pi*u2);
    local qz = u1sqrt *math.sin(2*math.pi*u3);
    local qw = u1sqrt *math.cos(2*math.pi*u3);
    --Apply rotation
    local ysqr = qy * qy;
    local t0 = -2.0 * (ysqr + qz * qz) + 1.0;
    local t1 = 2.0 * (qx * qy - qw * qz);
    local t2 = -2.0 * (qx * qz + qw * qy);
    local t3 = 2.0 * (qy * qz - qw * qx);
    local t4 = -2.0 * (qx * qx + ysqr) + 1.0;
    --Correct
    if t2 > 1.0 then t2 = 1.0 end
    if t2 < -1.0 then ts = -1.0 end
    --Convert back to X/Y/Z
    local xr = math.asin(t2);
    local yr = math.atan2(t3, t4);
    local zr = math.atan2(t1, t0);

    return {math.deg(xr),math.deg(yr),math.deg(zr)}
end

--Coroutine delay, in seconds
function wait(time)
    local start = os.time()
    repeat coroutine.yield(0)
	 until os.time() > start + time
end

--Sorts numbers/strings alphabeticall (does not handle decimals or leading 0s)
function alphanumsort(o)
    local function padnum(d) return ("%03d%s"):format(#d, d) end
    table.sort(o, function(a,b)
    return tostring(a):gsub("%d+",padnum) < tostring(b):gsub("%d+",padnum) end)
    return o
end

function getLeg4()
	local tbl = {cardName = "Dismembered Leg", zone = "", deck = deckInjuries}
	Global.setTable("card", tbl)
	Global.setTable("pos_toSpawn", pos)
	Global.call("get_Card")
end

function getLeg5()
	local tbl = {cardName = "Hamstrung", zone = "", deck = deckInjuries}
	Global.setTable("card", tbl)
	Global.setTable("pos_toSpawn", pos)
	Global.call("get_Card")
end

function getLeg6()
	local tbl = {cardName = "Torn Achilles Tendon", zone = "", deck = deckInjuries}
	Global.setTable("card", tbl)
	Global.setTable("pos_toSpawn", pos)
	Global.call("get_Card")
end

function getLeg7()
	local tbl = {cardName = "Torn Muscle", zone = "", deck = deckInjuries}
	Global.setTable("card", tbl)
	Global.setTable("pos_toSpawn", pos)
	Global.call("get_Card")
end

function getLeg8()
	local tbl = {cardName = "Broken Leg", zone = "", deck = deckInjuries}
	Global.setTable("card", tbl)
	Global.setTable("pos_toSpawn", pos)
	Global.call("get_Card")
end

-- legs injury roller
