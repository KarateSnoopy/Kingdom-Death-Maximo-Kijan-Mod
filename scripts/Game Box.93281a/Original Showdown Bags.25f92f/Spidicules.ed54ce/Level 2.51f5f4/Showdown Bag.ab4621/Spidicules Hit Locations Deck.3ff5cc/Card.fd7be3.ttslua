function criticalWoundEffect()
    getStatToken()
end

function getStatToken()
	local object = getObjectFromGUID('846081')
	local desc = object.getDescription()
	object.setDescription('start of monster turn')
    	object.setScale({0.43, 1.00, 0.43})
			local spdStat = Global.getTable('spdStat')
        		table.insert(spdStat, object.clone({
				position = {-15.47, 4.42, 0.51 + #spdStat * -1}}))
			Global.call('addBroadcast', {"crit", {gear = "Spidicules gained a (-1) Speed Token until its next turn", effect = ""}})
    	object.setScale({0.32, 1.00, 0.32})
	Global.setTable('spdStat', spdStat)
end

function woundEffect()
end

function failureEffect()
    broadcastToAll('____________________ \u{2620} !!! Failure Reaction Triggered !!! \u{2620} ____________________', {1,1,1})
    startLuaCoroutine(self, "broadcastDelay1")
end

function broadcastDelay1()
    wait(2)
    broadcastToAll("Spidicules performs its Basic Action ~ Targeting furthest Survivor in range", {1,1,1})
    return 1
end

function wait(time)
	local start = os.time()
	--each frame the coroutine is given control back, but we immediately call coroutine.yield() again until we exceed the time limit
	repeat
		coroutine.yield(0)
	until os.time() > start + time
end

function reflexEffect()
end

function addStatModifier()
    broadcastToAll("Are you attacking with a Spear?", {1,1,1})
    createButton()
end

function createButton()
    self.createButton{index = 0, click_function = 'getWeaponModifier', function_owner = self,
label = 'Attack with a Spear', position = {x = 0, y = 2, z = -1.2}, rotation = {x = 0, y = 0, z = 0},
scale = {x = 0.5, y = 1, z = 0.5}, width = 2000, height = 400, font_size = 200,
color = {r = 1, g = 1, b = 1, a = 1}, font_color = {r = 0, g = 0, b = 0, a = 1}}
end

function getWeaponModifier()
    	local object = getObjectFromGUID('87ed9c')
        local cleanUpList = Global.getTable('cleanUpHitLocation')
        table.insert(cleanUpList, object.clone({position = {-5.39, 4.32, 0.24}}))
            broadcastToAll("(+3) Strength to Wound this location Calculated.", {1,1,1})
    	Global.setTable('cleanUpHitLocation', cleanUpList)
    end
