-- TABLE OF Contents
  -- Main Menu
  -- Armor Location Functions
  -- Material Functions
  -- Properties Functions
  -- Settlement Location Functions
  -- Rare Gear
  -- Weapon Type Functions
  -- Weapon Ability Functions
  -- Affinity Functions
  -- Utility Functions

-- Variables

  offsetZ_from_origin = 9.48
  offsetX_from_origin = 12.64
  cloned_location = {59.25, 4.19, -16.80}

  -- Gear spawn positions
  armor_Table_pos = {x = 52.93, y = 4.19, z = -25.28}
  weapon_Table_pos = {x = 52.93, y = 4.19, z = -27.83}
  other_Table_pos = {x = 52.93, y = 4.19, z = -30.28}


  resource_offsetX = 2.42

  gear_Table = {}
  bone_pos_Table = {}
  hide_pos_Table = {}
  organ_pos_Table = {}

gear_Table = {}
resource = {}

function onLoad()
  createButtons()

  pos = self.getPosition()
  gearDeck = getObjectFromGUID('ac89bf')
  zone = getObjectFromGUID(Global.getTable('zones').zoneGearStation.guid)
  zone_gearDeck = getObjectFromGUID('b1ed8f')
  zoneCrafting = getObjectFromGUID(Global.getTable('zones').zoneCrafting.guid)

	-- Resource zones
	resource = {
	  {zone = getObjectFromGUID('5d45a3'), pos = {x = 54.25, y = 4.19, z = -11.15, offset = -1.61}},
	  {zone = getObjectFromGUID('a53c83'), pos = {x = 64.32, y = 4.19, z = -11.15, offset = 1.61}},
	  {zone = getObjectFromGUID('92493d'), pos = {x = 54.25, y = 4.19, z = -14.82, offset = -1.61}},
	  {zone = getObjectFromGUID('9a2cd2'), pos = {x = 64.32, y = 4.19, z = -14.82, offset = 1.61}},
	  {zone = getObjectFromGUID('dfcc12'), pos = {x = 54.25, y = 4.19, z = -18.52, offset = -1.61}},
	  {zone = getObjectFromGUID('a7fe4d'), pos = {x = 64.32, y = 4.19, z = -18.52, offset = 1.61}},
	  {zone = getObjectFromGUID('093b86'), pos = {x = 54.23, y = 4.19, z = -22.11, offset = -1.61}},
	  {zone = getObjectFromGUID('2d1f97'), pos = {x = 64.35, y = 4.19, z = -22.14, offset = 1.61}}
	}

  zoneBone = getObjectFromGUID('ff4209')
  zoneHide = getObjectFromGUID('ed37f6')
  zoneOrgan = getObjectFromGUID('98b9a3')
  zoneBoneHide = getObjectFromGUID('5bcc63')
  zoneBoneOrgan = getObjectFromGUID('5a1432')
  zoneHideOrgan = getObjectFromGUID('e2f17b')
  zoneBoneHideOrgan = getObjectFromGUID('cc3836')
  zoneOther = getObjectFromGUID('c3a253')

end

function createButtons()
  self.createButton({click_function = "dud", function_owner = self, label = "______________________________  Gear Builder  ______________________________", position = {0, 0.3, 3.7},
  scale = {0.5, 0.5, 0.5}, width = 0, height = 0, font_size = 400, color={0,0,0}, font_color={1,1,1}})

  self.createButton({click_function = "main_menuButtons", function_owner = self, label = "Open Menu", position = {0, 0.3, 2.5},
  scale = {0.5, 0.5, 0.5}, width = 2000, height = 500, font_size = 300, color={0,0,0,0}, font_color={1,1,1,100}})
end

function resetButtons()
	self.clearButtons()
	createButtons()
end

--[[function setName(name)
local buttons = self.getButtons()
for i, v in pairs(buttons) do
  if v.index == 0 then
    name = tostring(v.label)
  end
    return name
   end
  end
end

function indexFromLabel(label)
  for i, button in ipairs(self.getButtons()) do
      if button.label == label then
          return i
      end
  end
  return nil
end --]]

-------------------------------------------------------------------------------
-- Main Menu
-------------------------------------------------------------------------------

function main_menuButtons()

	local btn_params = {
		click_function = "",
		function_owner = self,
		label          = "",
		position       = {},
		rotation       = {0,0,0},
		scale          = {0.5, 0.5, 0.5},
		width          = 3000,
		height         = 500,
		font_size      = 400,
		color          = {0,0,0},
		font_color     = {1,1,1},
	}

	btn_params.position = {-4.5, 0.1, -1.4}
	btn_params.label = "[u]Armor Location[/u]"
	btn_params.click_function = "armor_location_buttons"
	self.createButton(btn_params)

	btn_params.position = {-9, 0.1, -1.4}
	btn_params.label = "Tools"
	btn_params.click_function = "display_tools"
	self.createButton(btn_params)

	btn_params.position = {4.5, 0.1, -1.4}
	btn_params.label = "[u]Material[/u]"
	btn_params.click_function = "material_buttons"
	self.createButton(btn_params)

	btn_params.position = {9, 0.1, -1.4}
	btn_params.label = "[u]Properties[/u]"
	btn_params.click_function = "property_buttons"
	self.createButton(btn_params)

	btn_params.position = {4.5, 0.1, -2.2}
	btn_params.label = "Rare Gear"
	btn_params.click_function = "rare_gear_display"
	self.createButton(btn_params)

	btn_params.position = {-9, 0.1, -2.2}
	btn_params.label = "Weapon Type"
	btn_params.click_function = "wpn_type_buttons"
	self.createButton(btn_params)

	btn_params.position = {-4.5, 0.1, -2.2}
	btn_params.label = "Weapon Ability"
	btn_params.click_function = "wpn_ability_buttons"
	self.createButton(btn_params)

	btn_params.width = 4000
	btn_params.position = {9, 0.1, -2.2}
	btn_params.label = "Settlement Locations"
	btn_params.click_function = "settlement_location_buttons"
	self.createButton(btn_params)

	btn_params.width = 2000
	btn_params.font_size = 300
	btn_params.position = {0, 0.3, 2.5}
	btn_params.label = "Close Menu"
	btn_params.click_function = "close_main_menu"
	self.createButton(btn_params)

	local btns = self.getButtons()
	for i, v in pairs(btns) do
		if v.label == "Open Menu" then
			self.removeButton(v.index)
		end
	end

  --self.createButton({click_function = "view_gear_storage", function_owner = self, label = "View Gear Storage", position = {0, 0.5, 1.6}, scale = {0.5, 0.5, 0.5}, width = 2000, height = 500, font_size = 300, color = {0, 0, 0, 0}, font_color = {1, 1, 1, 100}})

end

function close_main_menu()
  storeResources()
  destroy_copy()
  gear_Table = {}
    self.clearButtons()
	 createButtons()
  end

-------------------------------------------------------------------------------
-- Armor Location Functions
-------------------------------------------------------------------------------

function armor_location_buttons()

	local btn_params = {
		click_function = "",
		function_owner = self,
		label          = "",
		position       = {},
		rotation       = {0,0,0},
		scale          = {0.5, 0.5, 0.5},
		width          = 2000,
		height         = 400,
		font_size      = 400,
		color          = {0,0,0},
		font_color     = {1,1,1},
	}

	btn_params.position = {-4.5, 0.1, -0.7}
	btn_params.label = "Head"
	btn_params.click_function = "display_head"
	self.createButton(btn_params)

	btn_params.position = {-4.5, 0.1, -0.2}
	btn_params.label = "Arms"
	btn_params.click_function = "display_arms"
	self.createButton(btn_params)

	btn_params.position = {-4.5, 0.1, 0.3}
	btn_params.label = "Body"
	btn_params.click_function = "display_body"
	self.createButton(btn_params)

	btn_params.position = {-4.5, 0.1, 0.8}
	btn_params.label = "Waist"
	btn_params.click_function = "display_waist"
	self.createButton(btn_params)

	btn_params.position = {-4.5, 0.1, 1.3}
	btn_params.label = "Legs"
	btn_params.click_function = "display_legs"
	self.createButton(btn_params)

	btn_params.position = {-4.5, 0.1, 1.8}
	btn_params.label = "Accessories"
	btn_params.click_function = "display_accessory"
	self.createButton(btn_params)

	btn_params.position = {-4.5, 0.1, 2.3}
	btn_params.label = "Jewelry"
	btn_params.click_function = "display_jewelry"
	self.createButton(btn_params)

	btn_params.position = {-4.5, 0.1, 3.3}
	btn_params.label = "[u]Close Armor[/u]"
	btn_params.click_function = "close_armor_locations"
	self.createButton(btn_params)

end

function close_armor_locations()
  local buttons = self.getButtons()
  for i, v in pairs(buttons) do
    if v.label == "Head" or v.label == "Jewelry" or v.label == "Body" or v.label == "Arms" or v.label == "Waist" or v.label == "Legs" or v.label == "Accessories" or v.label == "[u]Close Armor[/u]" then
        self.removeButton(v.index)
    end
  end
end

function display_head()
	storeResources()
	destroy_copy()
	search_string_add_1 = "head"
	search_string_omit_1 = "body"
	display_chat_msg = "Head Armor"
	get_cards()
end

function display_arms()
	storeResources()
	destroy_copy()
	search_string_add_1 = "arms"
	search_string_omit_1 = "head"
	display_chat_msg = "Arm Armor"
	get_cards()
end

function display_body()
	storeResources()
	destroy_copy()
	search_string_add_1 = "body"
	search_string_omit_1 = "head"
	display_chat_msg = "Body Armor"
	get_cards()
end

function display_waist()
	storeResources()
	destroy_copy()
	search_string_add_1 = "waist"
	search_string_omit_1 = "head"
	display_chat_msg = "Waist Armor"
	get_cards()
end

function display_legs()
	storeResources()
	destroy_copy()
	search_string_add_1 = "legs"
	search_string_omit_1 = "head"
	display_chat_msg = "Leg Armor"
	get_cards()
end

function display_accessory()
	storeResources()
	destroy_copy()
	search_string_add_1 = "accessory"
	search_string_omit_1 = "nil"
	display_chat_msg = "Accessories Found"
	get_cards()
end

function display_jewelry()
	storeResources()
	destroy_copy()
	search_string_add_1 = "jewelry"
	search_string_omit_1 = "nil"
	display_chat_msg = "Jewelry Found"
	get_cards()
end

-------------------------------------------------------------------------------
-- Material Functions
-------------------------------------------------------------------------------

function material_buttons()
	local btn_params = {
		click_function = "",
		function_owner = self,
		label          = "",
		position       = {},
		rotation       = {0,0,0},
		scale          = {0.5, 0.5, 0.5},
		width          = 2000,
		height         = 400,
		font_size      = 400,
		color          = {0,0,0},
		font_color     = {1,1,1},
	}

	btn_params.position = {4.5, 0.1, -0.7}
	btn_params.label = "Amber"
	btn_params.click_function = "display_amber"
	self.createButton(btn_params)

	btn_params.position = {4.5, 0.1, -0.2}
	btn_params.label = "Bone"
	btn_params.click_function = "display_bone"
	self.createButton(btn_params)

	btn_params.position = {4.5, 0.1, 0.3}
	btn_params.label = "Fur"
	btn_params.click_function = "display_fur"
	self.createButton(btn_params)

	btn_params.position = {4.5, 0.1, 0.8}
	btn_params.label = "Leather"
	btn_params.click_function = "display_leather"
	self.createButton(btn_params)

	btn_params.position = {4.5, 0.1, 1.3}
	btn_params.label = "Metal"
	btn_params.click_function = "display_metal"
	self.createButton(btn_params)

	btn_params.position = {4.5, 0.1, 1.8}
	btn_params.label = "Scale"
	btn_params.click_function = "display_scale"
	self.createButton(btn_params)

	btn_params.position = {4.5, 0.1, 2.3}
	btn_params.label = "Silk"
	btn_params.click_function = "display_silk"
	self.createButton(btn_params)

	btn_params.position = {4.5, 0.1, 3.3}
	btn_params.label = "[u]Close Materials[/u]"
	btn_params.click_function = "close_material_menu"
	self.createButton(btn_params)
end

function close_material_menu()
  local buttons = self.getButtons()
  for i, v in pairs(buttons) do
    if v.label == "Bone" or v.label == "Amber" or v.label == "Leather" or v.label == "Metal" or v.label == "Scale" or v.label == "Fur" or v.label == "Silk" or v.label == "[u]Close Materials[/u]" then
        self.removeButton(v.index)
    end
  end
end

function display_tools()
	storeResources()
	destroy_copy()
	search_string_add_1 = "tool"
	search_string_omit_1 = "nil"
	display_chat_msg = "Tools Found"
	get_cards()
end

function display_tools()
	storeResources()
	destroy_copy()
	search_string_add_1 = "tool"
	search_string_omit_1 = "nil"
	display_chat_msg = "Tools Found"
	get_cards()
end

function display_bone()
	storeResources()
	destroy_copy()
	search_string_add_1 = "bone"
	search_string_omit_1 = "nil"
	display_chat_msg = "Bone"
	get_cards()
end

function display_amber()
	storeResources()
	destroy_copy()
	search_string_add_1 = "amber"
	search_string_omit_1 = "nil"
	display_chat_msg = "Amber"
	get_cards()
end

function display_leather()
	storeResources()
	destroy_copy()
	search_string_add_1 = "leather"
	search_string_omit_1 = "nil"
	display_chat_msg = "Leather"
	get_cards()
end

function display_metal()
	storeResources()
	destroy_copy()
	search_string_add_1 = "metal"
	search_string_omit_1 = "nil"
	display_chat_msg = "Metal"
	get_cards()
end

function display_scale()
	storeResources()
	destroy_copy()
	search_string_add_1 = "scale"
	search_string_omit_1 = "nil"
	display_chat_msg = "Scale"
	get_cards()
end

function display_fur()
	storeResources()
	destroy_copy()
	search_string_add_1 = "fur"
	search_string_omit_1 = "nil"
	display_chat_msg = "Fur"
	get_cards()
end

function display_silk()
	storeResources()
	destroy_copy()
	search_string_add_1 = "silk"
	search_string_omit_1 = "nil"
	display_chat_msg = "Silk"
	get_cards()
end

-------------------------------------------------------------------------------
-- Properties Functions
-------------------------------------------------------------------------------
function property_buttons()

	local btn_params = {
		click_function = "",
		function_owner = self,
		label          = "",
		position       = {},
		rotation       = {0,0,0},
		scale          = {0.5, 0.5, 0.5},
		width          = 2000,
		height         = 400,
		font_size      = 400,
		color          = {0,0,0},
		font_color     = {1,1,1},
	}

	btn_params.position = {9, 0.1, -0.7}
	btn_params.label = "Consumable"
	btn_params.click_function = "display_consumable"
	self.createButton(btn_params)

	btn_params.position = {9, 0.1, -0.2}
	btn_params.label = "Finesse"
	btn_params.click_function = "display_finesse"
	self.createButton(btn_params)

	btn_params.position = {9, 0.1, 0.3}
	btn_params.label = "Flammable"
	btn_params.click_function = "display_flammable"
	self.createButton(btn_params)

	btn_params.position = {9, 0.1, 0.8}
	btn_params.label = "Fragile"
	btn_params.click_function = "display_fragile"
	self.createButton(btn_params)

	btn_params.position = {9, 0.1, 1.3}
	btn_params.label = "Lantern"
	btn_params.click_function = "display_lantern"
	self.createButton(btn_params)

	btn_params.position = {9, 0.1, 1.8}
	btn_params.label = "Soluble"
	btn_params.click_function = "display_soluble"
	self.createButton(btn_params)

	btn_params.position = {9, 0.1, 2.3}
	btn_params.label = "Stinky"
	btn_params.click_function = "display_stinky"
	self.createButton(btn_params)

	btn_params.position = {9, 0.1, 2.8}
	btn_params.label = "Other"
	btn_params.click_function = "display_other"
	self.createButton(btn_params)

	btn_params.position = {9, 0.1, 3.3}
	btn_params.label = "Oxidized"
	btn_params.click_function = "display_oxidized"
	self.createButton(btn_params)

	btn_params.position = {9, 0.1, 4.3}
	btn_params.label = "[u]Close Properties[/u]"
	btn_params.click_function = "close_property_menu"
	self.createButton(btn_params)
end

function close_property_menu()

  local buttons = self.getButtons()
  for i, v in pairs(buttons) do
    if v.label == "Consumable" or v.label == "Finesse" or v.label == "Fragile" or v.label == "Flammable" or v.label == "Lantern" or v.label == "Soluble" or v.label == "Stinky" or v.label == "Other" or v.label == "[u]Close Properties[/u]" then
        self.removeButton(v.index)
    end
  end
end

function display_consumable()
	storeResources()
	destroy_copy()
	search_string_add_1 = "consumable"
	search_string_omit_1 = "nil"
	display_chat_msg = "Consumable"
	get_cards()
end

function display_finesse()
	storeResources()
	destroy_copy()
	search_string_add_1 = "finesse"
	search_string_omit_1 = "nil"
	display_chat_msg = "Finesse"
	get_cards()
end

function display_fragile()
	storeResources()
	destroy_copy()
	search_string_add_1 = "fragile"
	search_string_omit_1 = "nil"
	display_chat_msg = "Fragile"
	get_cards()
end

function display_flammable()
	storeResources()
	destroy_copy()
	search_string_add_1 = "flammable"
	search_string_omit_1 = "nil"
	display_chat_msg = "Flammable"
	get_cards()
end

function display_lantern()
	storeResources()
	destroy_copy()
	search_string_add_1 = "lantern"
	search_string_omit_1 = "nil"
	display_chat_msg = "Lantern"
	get_cards()
end

function display_soluble()
	storeResources()
	destroy_copy()
	search_string_add_1 = "soluble"
	search_string_omit_1 = "nil"
	display_chat_msg = "Soluble"
	get_cards()
end

function display_stinky()
	storeResources()
	destroy_copy()
	search_string_add_1 = "stinky"
	search_string_omit_1 = "nil"
	display_chat_msg = "Stinky"
	get_cards()
end

function display_other()
	storeResources()
	destroy_copy()
	search_string_add_1 = "other"
	search_string_omit_1 = "nil"
	display_chat_msg = "Other"
	get_cards()
end

function display_oxidized()
	storeResources()
	destroy_copy()
	search_string_add_1 = "oxidized"
	search_string_omit_1 = "nil"
	display_chat_msg = "Oxidized"
	get_cards()

  location_armor_Table = {}
  oxidized_pos = {x = 53.00, y = 4.19, z = -26.44}

	for _, card in ipairs(gearDeck.getObjects()) do
		local desc = card.description
		if string.find(desc, "oxidized")  then
		table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={oxidized_pos.x + #location_armor_Table  * 2.45, oxidized_pos.y, oxidized_pos.z} }))
		end
	end
end

-------------------------------------------------------------------------------
-- Settlement Location Functions
-------------------------------------------------------------------------------

function settlement_location_buttons()

  local buttons = self.getButtons()
  for i, v in pairs(buttons) do
    if v.index >= 11 then
        self.removeButton(v.index)
    end
  end

  settlement_Table = {}
  settlement_Table_row2 = {}
  for _, location in ipairs(zoneCrafting.getObjects()) do

    -- Make Row 1 Buttons
    if location.getName() == "Organ Grinder" and location.getRotation().z < 165 then
      table.insert(settlement_Table, self.createButton({click_function = "display_organ_grinder", function_owner = self, label = location.getName(),
      position = {-12.9 + #settlement_Table * 3.2, 0.1, -4.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    elseif location.getName() == "Bone Smith" and location.getRotation().z < 165 then
      table.insert(settlement_Table, self.createButton({click_function = "display_bone_smith", function_owner = self, label = location.getName(),
      position = {-12.9 + #settlement_Table * 3.2, 0.1, -4.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    elseif location.getName() == "Stone Circle" and location.getRotation().z < 165 then
      table.insert(settlement_Table, self.createButton({click_function = "display_stone_circle", function_owner = self, label = location.getName(),
      position = {-12.9 + #settlement_Table * 3.2, 0.1, -4.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    elseif location.getName() == "Skinnery" and location.getRotation().z < 165 then
      table.insert(settlement_Table, self.createButton({click_function = "display_skinnery", function_owner = self, label = location.getName(),
      position = {-12.9 + #settlement_Table * 3.2, 0.1, -4.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    elseif location.getName() == "Catarium" and location.getRotation().z < 165 then
      table.insert(settlement_Table, self.createButton({click_function = "display_catarium", function_owner = self, label = location.getName(),
      position = {-12.9 + #settlement_Table * 3.2, 0.1, -4.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

	elseif location.getName() == "Dark Catarium" and location.getRotation().z < 165 then
	  table.insert(settlement_Table, self.createButton({click_function = "display_dark_catarium", function_owner = self, label = location.getName(),
	  position = {-12.9 + #settlement_Table * 3.2, 0.1, -4.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    elseif location.getName() == "Plumery" and location.getRotation().z < 165 then
      table.insert(settlement_Table, self.createButton({click_function = "display_plumery", function_owner = self, label = location.getName(),
      position = {-12.9 + #settlement_Table * 3.2, 0.1, -4.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    elseif location.getName() == "Weapon Crafter" and location.getRotation().z < 165 then
      table.insert(settlement_Table, self.createButton({click_function = "display_weapon_crafter", function_owner = self, label = location.getName(),
      position = {-12.9 + #settlement_Table * 3.2, 0.1, -4.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    elseif location.getName() == "Blacksmith" and location.getRotation().z < 165 then
      table.insert(settlement_Table, self.createButton({click_function = "display_blacksmith", function_owner = self, label = location.getName(),
      position = {-12.9 + #settlement_Table * 3.2, 0.1, -4.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    elseif location.getName() == "Leather Worker" and location.getRotation().z < 165 then
      table.insert(settlement_Table, self.createButton({click_function = "display_leather_worker", function_owner = self, label = location.getName(),
      position = {-12.9 + #settlement_Table * 3.2, 0.1, -4.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    -- Make Row 2 buttons
    elseif location.getName() == "Dragon Armory" and location.getRotation().z < 165 then
        table.insert(settlement_Table_row2, self.createButton({click_function = "display_dragon_armory", function_owner = self, label = location.getName(),
        position = {-12.9 + #settlement_Table_row2 * 3.2, 0.1, -3.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    elseif location.getName() == "Skyreef Sanctuary" and location.getRotation().z < 165 then
      table.insert(settlement_Table_row2, self.createButton({click_function = "display_skyreef", function_owner = self, label = location.getName(),
      position = {-12.9 + #settlement_Table_row2 * 3.2, 0.1, -3.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    elseif location.getName() == "Wet Resin Crafter" and location.getRotation().z < 165 then
      table.insert(settlement_Table_row2, self.createButton({click_function = "display_wet_resin", function_owner = self, label = location.getName(),
      position = {-12.9 + #settlement_Table_row2 * 3.2, 0.1, -3.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    elseif location.getName() == "Gormery" and location.getRotation().z < 165 then
      table.insert(settlement_Table_row2, self.createButton({click_function = "display_gormery", function_owner = self, label = location.getName(),
      position = {-12.9 + #settlement_Table_row2 * 3.2, 0.1, -3.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    elseif location.getName() == "Gormchymist" and location.getRotation().z < 165 then
      table.insert(settlement_Table_row2, self.createButton({click_function = "display_gormchymist", function_owner = self, label = location.getName(),
      position = {-12.9 + #settlement_Table_row2 * 3.2, 0.1, -3.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    elseif location.getName() == "Silk Mill" and location.getRotation().z < 165 then
      table.insert(settlement_Table_row2, self.createButton({click_function = "display_silk_mill", function_owner = self, label = location.getName(),
      position = {-12.9 + #settlement_Table_row2 * 3.2, 0.1, -3.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    elseif location.getName() == "Green Knight" and location.getRotation().z < 165 then
      table.insert(settlement_Table_row2, self.createButton({click_function = "display_green_knight", function_owner = self, label = location.getName(),
      position = {-12.9 + #settlement_Table_row2 * 3.2, 0.1, -3.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    elseif location.getName() == "Barber Surgeon" and location.getRotation().z < 165 then
      table.insert(settlement_Table_row2, self.createButton({click_function = "display_barber_surgeon", function_owner = self, label = location.getName(),
      position = {-12.9 + #settlement_Table_row2 * 3.2, 0.1, -3.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    elseif location.getName() == "Mask Maker" and location.getRotation().z < 165 then
      table.insert(settlement_Table_row2, self.createButton({click_function = "display_mask_maker", function_owner = self, label = location.getName(),
      position = {-12.9 + #settlement_Table_row2 * 3.2, 0.1, -3.2}, scale = {0.5, 0.5, 0.5}, width = 2900, height = 400, font_size = 400, color={0,0,0}, font_color={1,1,1}}))

    end
  end
end

function display_organ_grinder()
	destroy_copy()
	settlement_location = "Organ Grinder"
	set_settlement_location_variables()
	set_master_gear_deck()
	organ_grinder_pos = {x = 54.44, y = 4.19, z = -25.72}

	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	for _, card in ipairs(gearDeck.getObjects()) do
		local desc = card.description
		if string.find(desc, "organ grinder") and not string.find(desc, "weapon") and not string.find(desc, "armor") then
			table.insert(location_other_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={organ_grinder_pos.x + #location_other_Table  * 2.45, organ_grinder_pos.y, organ_grinder_pos.z} }))
		end
	end

	broadcastToAll("Organ Grinder", {1,1,1})
	getResources()
end

function display_bone_smith()
	destroy_copy()
	settlement_location = "Bone Smith"
	set_settlement_location_variables()
	set_master_gear_deck()
	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	bonesmth_arm_pos = {x = 59.09, y = 4.19, z = -25.32}
	bonesmth_wpn_pos = {x = 52.93, y = 4.19, z = -27.83}

	for _, card in ipairs(gearDeck.getObjects()) do
	  local desc = card.description
	    if string.find(desc, "bonesmith") and string.find(desc, "armor") then
	      table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={bonesmth_arm_pos.x + #location_armor_Table  * 2.45, bonesmth_arm_pos.y, bonesmth_arm_pos.z } }))

	    elseif string.find(desc, "bonesmith") and string.find(desc, "weapon") then
	      table.insert(location_weapon_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={bonesmth_wpn_pos.x + #location_weapon_Table  * 2.45, bonesmth_wpn_pos.y, bonesmth_wpn_pos.z} }))

		end
	end

  broadcastToAll("BoneSmith", {1,1,1})
  getResources()
end

function display_stone_circle()
	destroy_copy()
   settlement_location = "Stone Circle"
   set_settlement_location_variables()
   set_master_gear_deck()
	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	stonecirc_armor_pos = {x =54.56, y = 4.19, z = -25.32}
	stonecirc_weapon_pos = {x = 58.32, y = 4.19, z = -27.73}
	stonecirc_other_pos = {x = 53.51, y = 4.19, z = -30.16}

	for _, card in ipairs(gearDeck.getObjects()) do
	  local desc = card.description
	    if string.find(desc, "stone circle") and string.find(desc, "armor") then
	      table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={stonecirc_armor_pos.x + #location_armor_Table  * 2.45, stonecirc_armor_pos.y, stonecirc_armor_pos.z } }))

	    elseif string.find(desc, "stone circle") and string.find(desc, "weapon") then
	      table.insert(location_weapon_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={stonecirc_weapon_pos.x + #location_weapon_Table  * 2.45, stonecirc_weapon_pos.y, stonecirc_weapon_pos.z} }))

	    elseif string.find(desc, "stone circle") and not string.find(desc, "weapon") and not string.find(desc, "armor") then
	      table.insert(location_other_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={stonecirc_other_pos.x + #location_other_Table  * 2.45, stonecirc_other_pos.y, stonecirc_other_pos.z} }))
	    end
	 end
  broadcastToAll("Stone Circle", {1,1,1})
  getResources()
end

function display_skinnery()
	destroy_copy()
   settlement_location = "Skinnery"
   set_settlement_location_variables()
   set_master_gear_deck()
	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	skinnery_armor_pos = {x = 54.46, y = 4.19, z = -25.35}
	skinnery_other_pos = {x = 55.80, y = 4.19, z = -27.90}

	for _, card in ipairs(gearDeck.getObjects()) do
	  local desc = card.description
	    if string.find(desc, "skinnery") and string.find(desc, "armor") then
	      table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={skinnery_armor_pos.x + #location_armor_Table  * 2.45, skinnery_armor_pos.y, skinnery_armor_pos.z } }))

	    elseif string.find(desc, "skinnery") then
	      table.insert(location_weapon_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={skinnery_other_pos.x + #location_weapon_Table  * 2.45, skinnery_other_pos.y, skinnery_other_pos.z} }))
	    end
	end
  broadcastToAll("Skinnery", {1,1,1})
  getResources()
end

function display_catarium()
	destroy_copy()
   settlement_location = "Catarium"
   set_settlement_location_variables()
   set_master_gear_deck()
	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	catarium_armor_pos = {x = 51.97, y = 4.19, z = -25.30}
	catarium_weapon_pos = {x = 53.29, y = 4.19, z = -27.85}
	catarium_other_pos = {x = 56.87, y = 4.19, z = -30.30}

	for _, card in ipairs(gearDeck.getObjects()) do
	  local desc = card.description
	    if string.find(desc, "catarium") and string.find(desc, "armor") and not string.find(desc, "dark") then
	      table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={catarium_armor_pos.x + #location_armor_Table  * 2.45, catarium_armor_pos.y, catarium_armor_pos.z } }))

	    elseif string.find(desc, "catarium") and string.find(desc, "weapon") and not string.find(desc, "dark") then
	      table.insert(location_weapon_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={catarium_weapon_pos.x + #location_weapon_Table  * 2.45, catarium_weapon_pos.y, catarium_weapon_pos.z} }))

	    elseif string.find(desc, "catarium")
			 and not string.find(desc, "weapon")
			 and not string.find(desc, "armor")
			 and not string.find(desc, "dark") then
	      table.insert(location_other_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={catarium_other_pos.x + #location_other_Table  * 2.45, catarium_other_pos.y, catarium_other_pos.z} }))
	    end
	end
	broadcastToAll("Catarium", {1,1,1})
	getResources()
end

function display_dark_catarium()
	destroy_copy()
   settlement_location = "Dark Catarium"
   set_settlement_location_variables()
   set_master_gear_deck()
   local cloned_location = location.clone({position = cloned_location})
   cloned_location.setScale({7, 1.00, 7})
   cloned_location.setDescription("copy")

   catarium_armor_pos = {x = 51.97, y = 4.19, z = -25.30}
   catarium_weapon_pos = {x = 53.29, y = 4.19, z = -27.85}
   catarium_other_pos = {x = 56.87, y = 4.19, z = -30.30}

	for _, card in ipairs(gearDeck.getObjects()) do
	local desc = card.description
		if string.find(desc, "dark catarium") and string.find(desc, "armor") then
		table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={catarium_armor_pos.x + #location_armor_Table  * 2.45, catarium_armor_pos.y, catarium_armor_pos.z } }))

		elseif string.find(desc, "dark catarium") and string.find(desc, "weapon") then
		table.insert(location_weapon_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={catarium_weapon_pos.x + #location_weapon_Table  * 2.45, catarium_weapon_pos.y, catarium_weapon_pos.z} }))

		elseif string.find(desc, "dark catarium") and not string.find(desc, "weapon") and not string.find(desc, "armor") then
		table.insert(location_other_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={catarium_other_pos.x + #location_other_Table  * 2.45, catarium_other_pos.y, catarium_other_pos.z} }))
		end
	end
   broadcastToAll("Dark Catarium", {1,1,1})
   getResources()
end

function display_plumery()
	destroy_copy()
   settlement_location = "Plumery"
   set_settlement_location_variables()
   set_master_gear_deck()
	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	plumery_armor_pos = {x = 54.39, y = 4.19, z = -25.36}
	plumery_weapon_pos = {x = 54.39, y = 4.19, z = -27.91}
	plumery_other_pos = {x = 54.39, y = 4.19, z = -30.36}

	for _, card in ipairs(gearDeck.getObjects()) do
		local desc = card.description
		if string.find(desc, "plumery") and string.find(desc, "armor") then
		table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={plumery_armor_pos.x + #location_armor_Table  * 2.45, plumery_armor_pos.y, plumery_armor_pos.z } }))

		elseif string.find(desc, "plumery") and string.find(desc, "weapon") then
		table.insert(location_weapon_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={plumery_weapon_pos.x + #location_weapon_Table  * 2.45, plumery_weapon_pos.y, plumery_weapon_pos.z} }))

		elseif string.find(desc, "plumery") and not string.find(desc, "weapon") and not string.find(desc, "armor") then
		table.insert(location_other_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={plumery_other_pos.x + #location_other_Table  * 2.45, plumery_other_pos.y, plumery_other_pos.z} }))
		end
	end
  broadcastToAll("Plumery", {1,1,1})
  getResources()
end

function display_weapon_crafter()
	destroy_copy()
   settlement_location = "Weapon Crafter"
   set_settlement_location_variables()
   set_master_gear_deck()
	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	weaponcraf_weapon_pos = {x = 49.35, y = 4.19, z = -25.59}

	for _, card in ipairs(gearDeck.getObjects()) do
		local desc = card.description
		if string.find(desc, "weapon crafter") then
			table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={weaponcraf_weapon_pos.x + #location_armor_Table  * 2.45, weaponcraf_weapon_pos.y, weaponcraf_weapon_pos.z } }))
		end
	end
	broadcastToAll("Weapon Crafter", {1,1,1})
	getResources()
end

function display_leather_worker()
	destroy_copy()
   settlement_location = "Leather Worker"
   set_settlement_location_variables()
   set_master_gear_deck()
	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	lther_arm_pos = {x = 54.47, y = 4.19, z = -25.33}
	lther_wpn_pos = {x = 58.10, y = 4.19, z = -27.90}

	for _, card in ipairs(gearDeck.getObjects()) do
		local desc = card.description
		if string.find(desc, "leather worker") and string.find(desc, "armor") then
		table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={lther_arm_pos.x + #location_armor_Table  * 2.45, lther_arm_pos.y, lther_arm_pos.z } }))

		elseif string.find(desc, "leather worker") and string.find(desc, "weapon") then
		table.insert(location_weapon_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={lther_wpn_pos.x + #location_weapon_Table  * 2.45, lther_wpn_pos.y, lther_wpn_pos.z} }))

		elseif string.find(desc, "leather worker") and not string.find(desc, "weapon") and not string.find(desc, "armor") then
		table.insert(location_other_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={other_Table_pos.x + #location_other_Table  * 2.45, other_Table_pos.y, other_Table_pos.z} }))
		end
	end
	broadcastToAll("Leather Worker", {1,1,1})
	getResources()
end

function display_blacksmith()
	destroy_copy()
   settlement_location = "Blacksmith"
   set_settlement_location_variables()
   set_master_gear_deck()
	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	blacksmth_wpn_pos = {x= 50.69, y = 4.19, z = -27.76}
	blacksmth_arm_pos = {x = 54.37, y = 4.19, z = -25.32}

	for _, card in ipairs(gearDeck.getObjects()) do
		local desc = card.description
		if string.find(desc, "blacksmith") and string.find(desc, "armor") then
		table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={blacksmth_arm_pos.x + #location_armor_Table  * 2.45, blacksmth_arm_pos.y, blacksmth_arm_pos.z } }))

		elseif string.find(desc, "blacksmith") and string.find(desc, "weapon") then
		table.insert(location_weapon_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={blacksmth_wpn_pos.x + #location_weapon_Table  * 2.45, blacksmth_wpn_pos.y, blacksmth_wpn_pos.z} }))

		elseif string.find(desc, "blacksmith") and not string.find(desc, "weapon") and not string.find(desc, "armor") then
		table.insert(location_other_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={other_Table_pos.x + #location_other_Table  * 2.45, other_Table_pos.y, other_Table_pos.z} }))
		end
	end
	broadcastToAll("Blacksmith", {1,1,1})
	getResources()
end

function display_dragon_armory()
	destroy_copy()
   settlement_location = "Dragon Armory"
   set_settlement_location_variables()
   set_master_gear_deck()
	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	drgn_arm_pos = {x = 54.37, y = 4.19, z = -25.32}
	drgn_wpn_pos = {x = 51.91, y = 4.19, z = -27.73}
	drgn_other_pos = {x = 56.77, y = 4.19, z = -30.10}

	for _, card in ipairs(gearDeck.getObjects()) do
		local desc = card.description
		if string.find(desc, "dragon armory") and string.find(desc, "set") then
		table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={drgn_arm_pos.x + #location_armor_Table  * 2.45, drgn_arm_pos.y, drgn_arm_pos.z } }))

		elseif string.find(desc, "dragon armory") and string.find(desc, "weapon") then
		table.insert(location_weapon_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={drgn_wpn_pos.x + #location_weapon_Table  * 2.45, drgn_wpn_pos.y, drgn_wpn_pos.z} }))

		elseif string.find(desc, "dragon armory") and not string.find(desc, "weapon") and not string.find(desc, "set") then
		table.insert(location_other_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={drgn_other_pos.x + #location_other_Table  * 2.45, drgn_other_pos.y, drgn_other_pos.z} }))
		end
	end
	broadcastToAll("Dragon Armory", {1,1,1})
	getResources()
end

function display_skyreef()
	destroy_copy()
   settlement_location = "Skyreef Sanctuary"
   set_settlement_location_variables()
   set_master_gear_deck()
	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	sky_arm_pos = {x = 54.37, y = 4.19, z = -25.32}
	sky_wpn_pos = {x = 50.85, y = 4.19, z = -27.69}
	sky_other_pos = {x = 55.79, y = 4.19, z = -30.10}

	for _, card in ipairs(gearDeck.getObjects()) do
		local desc = card.description
		if string.find(desc, "skyreef sanctuary") and string.find(desc, "armor") then
		table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={sky_arm_pos.x + #location_armor_Table  * 2.45, sky_arm_pos.y, sky_arm_pos.z } }))

		elseif string.find(desc, "skyreef sanctuary") and string.find(desc, "weapon") then
		table.insert(location_weapon_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={sky_wpn_pos.x + #location_weapon_Table  * 2.45, sky_wpn_pos.y, sky_wpn_pos.z} }))

		elseif string.find(desc, "skyreef sanctuary") and not string.find(desc, "weapon") and not string.find(desc, "armor") then
		table.insert(location_other_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={sky_other_pos.x + #location_other_Table  * 2.45, sky_other_pos.y, sky_other_pos.z} }))
		end
	end
	broadcastToAll("Skyreef Sanctuary", {1,1,1})
	getResources()
end

function display_wet_resin()
	destroy_copy()
   settlement_location = "Wet Resin Crafter"
   set_settlement_location_variables()
   set_master_gear_deck()
	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	wet_arm_pos = {x= 58.41, y = 4.19, z = -25.26}
	wet_wpn_pos = {x = 57.25, y = 4.19, z = -27.63}
	wet_other_pos = {x = 54.94, y = 4.19, z = -30.04}

	for _, card in ipairs(gearDeck.getObjects()) do
		local desc = card.description
		if string.find(desc, "wet resin crafter") and string.find(desc, "armor") then
		table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={wet_arm_pos.x + #location_armor_Table  * 2.45, wet_arm_pos.y, wet_arm_pos.z } }))

		elseif string.find(desc, "wet resin crafter") and string.find(desc, "weapon") then
		table.insert(location_weapon_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={wet_wpn_pos.x + #location_weapon_Table  * 2.45, wet_wpn_pos.y, wet_wpn_pos.z} }))

		elseif string.find(desc, "wet resin crafter") and not string.find(desc, "weapon") and not string.find(desc, "armor") then
		table.insert(location_other_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={wet_other_pos.x + #location_other_Table  * 2.45, wet_other_pos.y, wet_other_pos.z} }))
		end
	end
	broadcastToAll("Wet Resin Crafter", {1,1,1})
	getResources()
end

function display_gormery()
	destroy_copy()
   settlement_location = "Gormery"
   set_settlement_location_variables()
   set_master_gear_deck()
	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	gorm_arm_pos = {x = 54.37, y = 4.19, z = -25.32}
	gorm_wpn_pos = {x = 51.95, y = 4.19, z = -27.67}
	gorm_other_pos = {x = 56.82, y = 4.19, z = -30.09}

	for _, card in ipairs(gearDeck.getObjects()) do
		local desc = card.description
		if string.find(desc, "gormery") and string.find(desc, "armor") then
		table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={gorm_arm_pos.x + #location_armor_Table  * 2.45, gorm_arm_pos.y, gorm_arm_pos.z } }))

		elseif string.find(desc, "gormery") and string.find(desc, "weapon") then
		table.insert(location_weapon_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={gorm_wpn_pos.x + #location_weapon_Table  * 2.45, gorm_wpn_pos.y, gorm_wpn_pos.z} }))

		elseif string.find(desc, "gormery") and not string.find(desc, "weapon") and not string.find(desc, "armor") then
		table.insert(location_other_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={gorm_other_pos.x + #location_other_Table  * 2.45, gorm_other_pos.y, gorm_other_pos.z} }))
		end
	end
	broadcastToAll("Gormery", {1,1,1})
	getResources()
end

function display_gormchymist()
	destroy_copy()
   settlement_location = "Gormchymist"
   set_settlement_location_variables()
   set_master_gear_deck()
	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	gormchym_pos = {x = 54.45, y = 4.19, z = -25.66}

	for _, card in ipairs(gearDeck.getObjects()) do
		local desc = card.description
		if string.find(desc, "gormchymist") then
		table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={gormchym_pos.x + #location_armor_Table  * 2.45, gormchym_pos.y, gormchym_pos.z } }))
		end
	end
	broadcastToAll("Gormchymist", {1,1,1})
	getResources()
end

function display_silk_mill()
	destroy_copy()
   settlement_location = "Silk Mill"
   set_settlement_location_variables()
   set_master_gear_deck()
	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	silk_arm_pos = {x = 50.93, y = 4.19, z = -25.26}
	silk_wpn_pos = {x = 54.55, y = 4.19, z = -27.67}
	silk_other_pos = {x = 58.34, y = 4.19, z = -30.08}

	for _, card in ipairs(gearDeck.getObjects()) do
		local desc = card.description
		if string.find(desc, "silk mill") and string.find(desc, "armor") then
		table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={silk_arm_pos.x + #location_armor_Table  * 2.45, silk_arm_pos.y, silk_arm_pos.z } }))

		elseif string.find(desc, "silk mill") and string.find(desc, "weapon") then
		table.insert(location_weapon_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={silk_wpn_pos.x + #location_weapon_Table  * 2.45, silk_wpn_pos.y, silk_wpn_pos.z} }))

		elseif string.find(desc, "silk mill") and not string.find(desc, "weapon") and not string.find(desc, "armor") then
		table.insert(location_other_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={silk_other_pos.x + #location_other_Table  * 2.45, silk_other_pos.y, silk_other_pos.z} }))
		end
	end
	broadcastToAll("Silk Mill", {1,1,1})
	getResources()
end

function display_green_knight()
	destroy_copy()
   settlement_location = "Green Knight"
   set_settlement_location_variables()
   set_master_gear_deck()
	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	green_arm_pos = {x = 54.56, y = 4.19, z = -25.88}
	green_wpn_pos = {x = 59.46, y = 4.19, z = -28.29}

	for _, card in ipairs(gearDeck.getObjects()) do
		local desc = card.description
		if string.find(desc, "green knight") and string.find(desc, "armor") and not string.find(desc, "shield") then
		table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={green_arm_pos.x + #location_armor_Table  * 2.45, green_arm_pos.y, green_arm_pos.z } }))

		elseif string.find(desc, "green knight") and string.find(desc, "shield") then
		table.insert(location_weapon_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={green_wpn_pos.x + #location_weapon_Table  * 2.45, green_wpn_pos.y, green_wpn_pos.z} }))
		end
	end
	broadcastToAll("Song of the Green Knight", {1,1,1})
	getResources()
end

function display_barber_surgeon()
	destroy_copy()
   settlement_location = "Barber Surgeon"
   set_settlement_location_variables()
   set_master_gear_deck()
	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	barb_pos = {x = 50.59, y = 4.19, z = -25.49}

	for _, card in ipairs(gearDeck.getObjects()) do
		local desc = card.description
		if string.find(desc, "barber surgeon") then
		table.insert(location_armor_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={barb_pos.x + #location_armor_Table  * 2.45, barb_pos.y, barb_pos.z } }))
		end
	end
	broadcastToAll("Barber Surgeon", {1,1,1})
	getResources()
end

function display_mask_maker()
	destroy_copy()
   settlement_location = "Mask Maker"
   set_settlement_location_variables()
   set_master_gear_deck()
	local cloned_location = location.clone({position = cloned_location})
	cloned_location.setScale({4.51, 1.00, 4.51})
	cloned_location.setDescription("copy")

	mask_pos_Table = {}
	mask_pos = {x = 53.41, y = 4.19, z = -25.41}

	for _, card in ipairs(gearDeck.getObjects()) do
		local desc = card.description
		if string.find(desc, "mask maker") then
		table.insert(mask_pos_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position={mask_pos.x + #mask_pos_Table  * 2.45, mask_pos.y, mask_pos.z } }))
		end
	end
	broadcastToAll("Mask Maker", {1,1,1})
	getResources()
end

-------------------------------------------------------------------------------
-- Rare Gear
-------------------------------------------------------------------------------

function rare_gear_display()
	storeResources()
	destroy_copy()
	search_string_add_1 = "rare"
	search_string_omit_1 = "nil"
	display_chat_msg = "Rare"
	get_cards()
end

-------------------------------------------------------------------------------
-- Weapon Type Functions
-------------------------------------------------------------------------------

function wpn_type_buttons()

  local buttons = self.getButtons()
  for i, v in pairs(buttons) do
    if v.index >= 10 then
        self.removeButton(v.index)
    end
  end

  local btn_params = {
	  click_function = "",
	  function_owner = self,
	  label          = "",
	  position       = {},
	  rotation       = {0,0,0},
	  scale          = {0.5, 0.5, 0.5},
	  width          = 2900,
	  height         = 500,
	  font_size      = 400,
	  color          = {0,0,0},
	  font_color     = {1,1,1},
  }

  btn_params.position = {-7.5, 0.1, -4.2}
  btn_params.label = "Axe"
  btn_params.click_function = "display_axe"
  self.createButton(btn_params)

  btn_params.position = {-4.5, 0.1, -4.2}
  btn_params.label = "Bow"
  btn_params.click_function = "display_bow"
  self.createButton(btn_params)

  btn_params.position = {-1.5, 0.1, -4.2}
  btn_params.label = "Club"
  btn_params.click_function = "display_club"
  self.createButton(btn_params)

  btn_params.position = {1.5, 0.1, -4.2}
  btn_params.label = "Dagger"
  btn_params.click_function = "display_dagger"
  self.createButton(btn_params)

  btn_params.position = {4.5, 0.1, -4.2}
  btn_params.label = "Grand Weapon"
  btn_params.click_function = "display_grandweapon"
  self.createButton(btn_params)

  btn_params.position = {7.5, 0.1, -4.2}
  btn_params.label = "Katana"
  btn_params.click_function = "display_katana"
  self.createButton(btn_params)

  btn_params.position = {-7.5, 0.1, -3.6}
  btn_params.label = "Katar"
  btn_params.click_function = "display_katar"
  self.createButton(btn_params)

  btn_params.position = {-4.5, 0.1, -3.6}
  btn_params.label = "Scythe"
  btn_params.click_function = "display_scythe"
  self.createButton(btn_params)

  btn_params.position = {-1.5, 0.1, -3.6}
  btn_params.label = "Shield"
  btn_params.click_function = "display_shield"
  self.createButton(btn_params)

  btn_params.position = {1.5, 0.1, -3.6}
  btn_params.label = "Spear"
  btn_params.click_function = "display_spear"
  self.createButton(btn_params)

  btn_params.position = {4.5, 0.1, -3.6}
  btn_params.label = "Sword"
  btn_params.click_function = "display_sword"
  self.createButton(btn_params)

  btn_params.position = {7.5, 0.1, -3.6}
  btn_params.label = "Whip"
  btn_params.click_function = "display_whip"
  self.createButton(btn_params)
end

function display_axe()
	storeResources()
	destroy_copy()
	search_string_add_1 = "axe"
	search_string_omit_1 = "nil"
	display_chat_msg = "Axe"
	get_cards()
end

function display_bow()
	storeResources()
	destroy_copy()
	search_string_add_1 = "bow"
	search_string_add_2 = "arrow"
	search_string_add_3 = "quiver"
	search_string_omit_1 = "nil"
	display_chat_msg = "Bows, Arrows and Quivers"
	get_cards()
end

function display_club()
	storeResources()
	destroy_copy()
	search_string_add_1 = "club"
	search_string_omit_1 = "nil"
	display_chat_msg = "Club"
	get_cards()
end

function display_dagger()
	storeResources()
	destroy_copy()
	search_string_add_1 = "dagger"
	search_string_omit_1 = "nil"
	display_chat_msg = "Dagger"
	get_cards()
end

function display_grandweapon()
	storeResources()
	destroy_copy()
	search_string_add_1 = "grand weapon"
	search_string_omit_1 = "nil"
	display_chat_msg = "Grand Weapon"
	get_cards()
end

function display_katana()
	storeResources()
	destroy_copy()
	search_string_add_1 = "katana"
	search_string_omit_1 = "nil"
	display_chat_msg = "Katana"
	get_cards()
end

function display_katar()
	storeResources()
	destroy_copy()
	search_string_add_1 = "katar"
	search_string_omit_1 = "nil"
	display_chat_msg = "Katar"
	get_cards()
end

function display_scythe()
	storeResources()
	destroy_copy()
	search_string_add_1 = "scythe"
	search_string_omit_1 = "nil"
	display_chat_msg = "Scythe"
	get_cards()
end

function display_shield()
	storeResources()
	destroy_copy()
	search_string_add_1 = "shield"
	search_string_omit_1 = "nil"
	display_chat_msg = "Shield"
	get_cards()
end

function display_sword()
	storeResources()
	destroy_copy()
	search_string_add_1 = "sword"
	search_string_omit_1 = "nil"
	display_chat_msg = "Sword"
	get_cards()
end

function display_spear()
	storeResources()
	destroy_copy()
	search_string_add_1 = "spear"
	search_string_omit_1 = "nil"
	display_chat_msg = "Spear"
	get_cards()
end

function display_whip()
	storeResources()
	destroy_copy()
	search_string_add_1 = "whip"
	search_string_omit_1 = "nil"
	display_chat_msg = "Whip"
	get_cards()
end


-------------------------------------------------------------------------------
-- Weapon Ability Functions
-------------------------------------------------------------------------------

function wpn_ability_buttons()

  local buttons = self.getButtons()
  for i, v in pairs(buttons) do
    if v.index >= 10 then
        self.removeButton(v.index)
    end
  end

  local btn_params = {
	  click_function = "",
	  function_owner = self,
	  label          = "",
	  position       = {},
	  rotation       = {0,0,0},
	  scale          = {0.5, 0.5, 0.5},
	  width          = 2900,
	  height         = 500,
	  font_size      = 400,
	  color          = {0,0,0},
	  font_color     = {1,1,1},
  }

  btn_params.position = {-4.5, 0.1, -4.2}
  btn_params.label = "Deadly"
  btn_params.click_function = "display_deadly"
  self.createButton(btn_params)

  btn_params.position = {-1.5, 0.1, -4.2}
  btn_params.label = "Devastating"
  btn_params.click_function = "display_devastating"
  self.createButton(btn_params)

  btn_params.position = {1.5, 0.1, -4.2}
  btn_params.label = "Paired"
  btn_params.click_function = "display_paired"
  self.createButton(btn_params)

  btn_params.position = {4.5, 0.1, -4.2}
  btn_params.label = "Perfect Hit"
  btn_params.click_function = "display_perfectHit"
  self.createButton(btn_params)

  btn_params.position = {7.5, 0.1, -4.2}
  btn_params.label = "Range"
  btn_params.click_function = "display_range"
  self.createButton(btn_params)

  btn_params.position = {-7.5, 0.1, -3.6}
  btn_params.label = "Reach"
  btn_params.click_function = "display_reach"
  self.createButton(btn_params)

  btn_params.position = {-4.5, 0.1, -3.6}
  btn_params.label = "Savage"
  btn_params.click_function = "display_savage"
  self.createButton(btn_params)

  btn_params.position = {-1.5, 0.1, -3.6}
  btn_params.label = "Sentient"
  btn_params.click_function = "display_sentient"
  self.createButton(btn_params)

  btn_params.position = {1.5, 0.1, -3.6}
  btn_params.label = "Sharp"
  btn_params.click_function = "display_sharp"
  self.createButton(btn_params)

  btn_params.position = {4.5, 0.1, -3.6}
  btn_params.label = "Slow"
  btn_params.click_function = "display_slow"
  self.createButton(btn_params)

  btn_params.position = {7.5, 0.1, -3.6}
  btn_params.label = "Unique"
  btn_params.click_function = "display_unique"
  self.createButton(btn_params)
end

function display_deadly()
	storeResources()
	destroy_copy()
	search_string_add_1 = "deadly"
	search_string_omit_1 = "nil"
	display_chat_msg = "Deadly"
	get_cards()
end

function display_devastating()
	storeResources()
	destroy_copy()
	search_string_add_1 = "devastating"
	search_string_omit_1 = "nil"
	display_chat_msg = "Devastating"
	get_cards()
end

function display_paired()
	storeResources()
	destroy_copy()
	search_string_add_1 = "paired"
	search_string_omit_1 = "nil"
	display_chat_msg = "Paired"
	get_cards()
end

function display_perfectHit()
	storeResources()
	destroy_copy()
	search_string_add_1 = "perfectHit"
	search_string_omit_1 = "nil"
	display_chat_msg = "Perfect Hit"
	get_cards()
end

function display_range()
	storeResources()
	destroy_copy()
	search_string_add_1 = "range"
	search_string_omit_1 = "nil"
	display_chat_msg = "Range"
	get_cards()
end

function display_reach()
	storeResources()
	destroy_copy()
	search_string_add_1 = "reach"
	search_string_omit_1 = "nil"
	display_chat_msg = "Reach"
	get_cards()
end

function display_savage()
	storeResources()
	destroy_copy()
	search_string_add_1 = "savage"
	search_string_omit_1 = "nil"
	display_chat_msg = "Savage"
	get_cards()
end

function display_sentient()
	storeResources()
	destroy_copy()
	search_string_add_1 = "sentient"
	search_string_omit_1 = "nil"
	display_chat_msg = "Sentient"
	get_cards()
end

function display_sharp()
	storeResources()
	destroy_copy()
	search_string_add_1 = "sharp"
	search_string_omit_1 = "nil"
	display_chat_msg = "Sharp"
	get_cards()
end

function display_slow()
	storeResources()
	destroy_copy()
	search_string_add_1 = "slow"
	search_string_omit_1 = "nil"
	display_chat_msg = "Slow"
	get_cards()
end

function display_unique()
	storeResources()
	destroy_copy()
	search_string_add_1 = "unique"
	search_string_omit_1 = "nil"
	display_chat_msg = "Unique"
	get_cards()
end



-------------------------------------------------------------------------------
-- Affinity Functions
-------------------------------------------------------------------------------

function red_perm()
	storeResources()
	destroy_copy()
	search_string_add_1 = "red_perm"
	search_string_omit_1 = "nil"
	display_chat_msg = "Permanent Red Affinity"
	get_cards()
end

function green_perm()
	storeResources()
	destroy_copy()
	search_string_add_1 = "green_perm"
	search_string_omit_1 = "nil"
	display_chat_msg = "Permanent Green Affinity"
	get_cards()
end

function blue_perm()
	storeResources()
	destroy_copy()
	search_string_add_1 = "blue_perm"
	search_string_omit_1 = "nil"
	display_chat_msg = "Permanent Blue Affinity"
	get_cards()
end

function red_up()
	storeResources()
	destroy_copy()
	search_string_add_1 = "red_up"
	search_string_omit_1 = "nil"
	display_chat_msg = "Red Up Affinity"
	get_cards()
end -- end function

function red_down()
	storeResources()
	destroy_copy()
	search_string_add_1 = "red_down"
	search_string_omit_1 = "nil"
	display_chat_msg = "Red Down Affinity"
	get_cards()
end

function red_left()
	storeResources()
	destroy_copy()
	search_string_add_1 = "red_left"
	search_string_omit_1 = "nil"
	display_chat_msg = "Red Left Affinity"
	get_cards()
end

function red_right()
	storeResources()
	destroy_copy()
	search_string_add_1 = "red_right"
	search_string_omit_1 = "nil"
	display_chat_msg = "Red Right Affinity"
	get_cards()
end

function green_up()
	storeResources()
	destroy_copy()
	search_string_add_1 = "green_up"
	search_string_omit_1 = "nil"
	display_chat_msg = "Green Up Affinity"
	get_cards()
end

function green_down()
	storeResources()
	destroy_copy()
	search_string_add_1 = "green_down"
	search_string_omit_1 = "nil"
	display_chat_msg = "Green Down Affinity"
	get_cards()
end

function green_left()
	storeResources()
	destroy_copy()
	search_string_add_1 = "green_left"
	search_string_omit_1 = "nil"
	display_chat_msg = "Green Left Affinity"
	get_cards()
end

function green_right()
	storeResources()
	destroy_copy()
	search_string_add_1 = "green_right"
	search_string_omit_1 = "nil"
	display_chat_msg = "Green Right Affinity"
	get_cards()
end

function blue_up()
	storeResources()
	destroy_copy()
	search_string_add_1 = "blue_up"
	search_string_omit_1 = "nil"
	display_chat_msg = "Blue Up Affinity"
	get_cards()
end

function blue_down()
	storeResources()
	destroy_copy()
	search_string_add_1 = "blue_down"
	search_string_omit_1 = "nil"
	display_chat_msg = "Blue Down Affinity"
	get_cards()
end

function blue_left()
	storeResources()
	destroy_copy()
	search_string_add_1 = "blue_left"
	search_string_omit_1 = "nil"
	display_chat_msg = "Blue Left Affinity"
	get_cards()
end

function blue_right()
	storeResources()
	destroy_copy()
	search_string_add_1 = "blue_right"
	search_string_omit_1 = "nil"
	display_chat_msg = "Blue Right Affinity"
	get_cards()
end

-------------------------------------------------------------------------------
-- Utility Functions
-------------------------------------------------------------------------------
function destroy_copy()
	for _, object in ipairs(zone.getObjects()) do
	  local desc = object.getDescription()
	  if string.find(desc, "copy") then
		 object.destroy()
	  end
	end
end

function set_settlement_location_variables()
	for _, card in ipairs(zoneCrafting.getObjects()) do
		if card.getName() == settlement_location then
			location = card
			break
		end
	end
	location_armor_Table = {}
	location_weapon_Table = {}
	location_other_Table = {}
end

function set_master_gear_deck()
	for _, object in ipairs(zone_gearDeck.getObjects()) do
		if object.tag == "Deck" then
			gearDeck = object
			break
		end
	end
end

-- Gets the Gear Cards from the Master Gear Deck
function get_cards()
	gear_Table = {}
   local count = 0
   for _, object in ipairs(zone_gearDeck.getObjects()) do
     if object.tag == "Deck" then
       gearDeck = object
     end
   end
   for _, card in ipairs(gearDeck.getObjects()) do
   local desc = card.description
     if string.find(desc, search_string_add_1) and not string.find(desc, search_string_omit_1) then
       count = count + 1
       table.insert(gear_Table, gearDeck.takeObject({guid=card.guid, smooth=false, position = CardPosition(count)}))
       end
     end
   print(count .. " cards found for " .. display_chat_msg)
end

function onObjectLeaveScriptingZone(zone, leave_object)
  if zone == getObjectFromGUID(Global.getTable('zones').zoneGearStation.guid) then
    for k, obj in pairs(gear_Table) do
      if obj == leave_object then
          table.remove(gear_Table, k)
          break
      end
    end
  end
end

function getResources()
	for _, res in pairs(resource) do
		for k, v in pairs(res.zone.getObjects()) do
			if string.find(v.tag,'Deck') then
				getCards(v, true, res.pos.x, res.pos.z, res.pos.offset)
			elseif string.find(v.tag, 'Card') then
				getCards(v, false, res.pos.x, res.pos.z, res.pos.offset)
			end
		end
	end
end

-- Gets the Resource Cards from the Settlement Storage
function getCards(card, deck, x, z, offset)
	if not deck then
		card.setPosition({x, 4.19, z})
	 	card.setScale({0.80, 1.00, 0.80})
	else
		for i, v in ipairs(card.getObjects()) do
		  local moved_card = card.takeObject({position={x +(i-1) * offset, 4.19, z}})
	   	moved_card.setScale({0.80, 1.00, 0.80})
		end
	end
end

-- Returns Resources to Settlement Storage
function storeResources()
  for k, v in pairs(zoneBone.getObjects()) do
    local desc = v.getDescription()
    if string.find(desc, "resource") then
      v.setScale({1.10, 1.00, 1.10})
      v.setPosition({33.56, 4.34, 12.02})
    end
  end
  for k, v in pairs(zoneHide.getObjects()) do
    local desc = v.getDescription()
    if string.find(desc, "resource") then
      v.setScale({1.10, 1.00, 1.10})
      v.setPosition({36.49, 4.34, 12.02})
    end
  end
  for k, v in pairs(zoneOrgan.getObjects()) do
    local desc = v.getDescription()
    if string.find(desc, "resource") then
      v.setScale({1.10, 1.00, 1.10})
      v.setPosition({39.57, 4.34, 12.02})
    end
  end
  for k, v in pairs(zoneBoneHide.getObjects()) do
    local desc = v.getDescription()
    if string.find(desc, "resource") then
      v.setScale({1.10, 1.00, 1.10})
      v.setPosition({59.45, 4.34, 12.02})
    end
  end
  for k, v in pairs(zoneBoneOrgan.getObjects()) do
    local desc = v.getDescription()
    if string.find(desc, "resource") then
      v.setScale({1.10, 1.00, 1.10})
      v.setPosition({62.46, 4.34, 12.02})
    end
  end
  for k, v in pairs(zoneHideOrgan.getObjects()) do
    local desc = v.getDescription()
    if string.find(desc, "resource") then
      v.setScale({1.10, 1.00, 1.10})
      v.setPosition({65.44, 4.34, 12.02})
    end
  end
  for k, v in pairs(zoneBoneHideOrgan.getObjects()) do
    local desc = v.getDescription()
    if string.find(desc, "resource") then
      v.setScale({1.10, 1.00, 1.10})
      v.setPosition({42.53, 4.34, 12.02})
    end
  end
  for k, v in pairs(zoneOther.getObjects()) do
    local desc = v.getDescription()
    if string.find(desc, "resource") then
      v.setScale({1.10, 1.00, 1.10})
      v.setPosition({68.69, 4.34, 12.02})
    end
  end
end -- end function

-- How much space should be between cards
local spacing = {x = 2.45, z = 2.45}
-- How many cards in a row
local rowNum = 10
-- Initial position
local initPos = {46.61, 4.19, -30.11}

-- Get the position of Nth card, starting at 1
function CardPosition(count)
  local row = math.floor((count-1)/rowNum)
  local col = (count-1)%rowNum
  return { initPos[1] + spacing.x*col, initPos[2], initPos[3] + spacing.z*row }
end

--//TODO: DEPRECATE
-- only used for renaming decks if needed
function resetgear()
	local deck = getObjectFromGUID('c45dc9')
	for _, card in ipairs(deck.getObjects()) do
		local desc = card.description
		if string.find(desc, ", copy") then
			local new_card = deck.takeObject({guid = card.guid})
			local new_desc = string.gsub(new_card.getDescription(), ", copy", ", archive")
			new_card.setDescription(new_desc)
		end
	end
end

--//TODO; NEEDS TESTING
function view_gear_storage()
	local btns = self.getButtons()
	if btns ~= nil then
		for i, v in pairs(btns) do
			if v.label == "View Gear Storage" then
				self.removeButton(v.index)
				self.createButton({click_function = "close_gear_storage", function_owner = self, label = "Close Gear Storage", position = {0, 0.5, 1.6}, scale = {0.5, 0.5, 0.5}, width = 2000, height = 500, font_size = 300, color = {0, 0, 0, 0}, font_color = {1, 1, 1, 100}})
			end
		end
	end

	local storage_chest = getObjectFromGUID('a87f74')
	for _, obj in ipairs(storage_chest.getObjects()) do
		local number_stored = #storage_chest.getObjects()
	end

	if number_stored > 10 then
		for i=1, 10 do
			storage_chest.takeObject({position = {46.61, 4.19 + i * 2.45, -30.11}, smooth = false, rotation = {0, 180, 0}})
		end
	elseif number_stored < 10 then
		for i=1, number_stored do
			storage_chest.takeObject({position = {46.61, 4.19 + i * 2.45, -30.11}, smooth = false, rotation = {0, 180, 0}})
		end
	end
end

function close_gear_storage()
	local storage_chest = getObjectFromGUID('a87f74')
	storage_chest.reset()
	local btns = self.getButtons()
	if btns ~= nil then
		for i, v in pairs(btns) do
			if v.label == "Close Gear Storage" then
				self.removeButton(v.index)
			end
		end
	end
	self.createButton({click_function = "view_gear_storage", function_owner = self, label = "View Gear Storage", position = {0, 0.5, 1.6}, scale = {0.5, 0.5, 0.5}, width = 2000, height = 500, font_size = 300, color = {0, 0, 0, 0}, font_color = {1, 1, 1, 100}})
end

function dud() end




-- end gear builder